//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
TYPE
#pragma pack(push, 4)
  _XML_ATTRIBUTE : STRUCT
    Name : ^USINT;  //! <Type Comment="Name of the attribute" Name="_XML_ATTRIBUTE.Name"/>
    Value : ^USINT;  //! <Type Comment="Value of the attribute" Name="_XML_ATTRIBUTE.Value"/>
  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 4)
  _XML_ATTRIBUTE_LIST : STRUCT
    no : UDINT;  //! <Type Comment="Number of attributes" Name="_XML_ATTRIBUTE_LIST.no"/>
    pList : ^_XML_ATTRIBUTE;  //! <Type Comment="Pointer at the list of attributes" Name="_XML_ATTRIBUTE_LIST.pList"/>
  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 4)
  _XML_ELEMENT : STRUCT
    Name : ^USINT;  //! <Type Comment="Name of the element" Name="_XML_ELEMENT.Name"/>
    Attributes : _XML_ATTRIBUTE_LIST;  //! <Type Comment="Attribute list of the element" Name="_XML_ELEMENT.Attributes"/>
    pText : ^USINT;  //! <Type Comment="Pointer at the text of the element" Name="_XML_ELEMENT.pText"/>
    pChildren : ^_XML_ELEMENT;  //! <Type Comment="Pointer at the child-elements" Name="_XML_ELEMENT.pChildren"/>
    pFather : ^_XML_ELEMENT;  //! <Type Comment="Pointer at the father element" Name="_XML_ELEMENT.pFather"/>
    pNext : ^_XML_ELEMENT;  //! <Type Comment="Pointer at the next element at the same level" Name="_XML_ELEMENT.pNext"/>
    pPrevious : ^_XML_ELEMENT;  //! <Type Comment="Pointer at the previous element at the same level" Name="_XML_ELEMENT.pPrevious"/>
    isClosed : BOOL;  //! <Type Comment="True if element is already closed" Name="_XML_ELEMENT.isClosed"/>
  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 4)
  _XML_FILE : STRUCT
    Header : ^USINT;  //! <Type Comment="Header in the XML file" Name="_XML_FILE.Header"/>
    MajorElement : ^_XML_ELEMENT;  //! <Type Comment="Major and first element in the XML file" Name="_XML_FILE.MajorElement"/>
  END_STRUCT;
#pragma pack(pop)
  ENV_Status :
  (
    ENV_NoVariableName,
    ENV_ValidValue,
    ENV_NoInterface,
    ENV_VariableNameNotFound,
    ENV_NoValueString
  )$UDINT;
  gt_LogLevel :  //! <Type Comment="OWNER: SF_Logger&#13;&#10;Message logging level" Name="gt_LogLevel"/>
  (
    LL_NONE,  //! <Type Comment="Disable logging messages" Name="gt_LogLevel.LL_NONE"/>
    LL_DEBUG_RT,  //! <Type Comment="Log Realtime Debug data" Name="gt_LogLevel.LL_DEBUG_RT"/>
    LL_DEBUG,  //! <Type Comment="Log Debug Message strings&#13;&#10;&#13;&#10;Debug messages inform &#13;&#10;R&amp;D users during debugging." Name="gt_LogLevel.LL_DEBUG"/>
    LL_INFO,  //! <Type Comment="Log Info message strings&#13;&#10;&#13;&#10;Messages to inform outside world.&#13;&#10;&#13;&#10;&#13;&#10;Example:&#13;&#10;&quot;HMI send cmd xxx&quot;&#13;&#10;" Name="gt_LogLevel.LL_INFO"/>
    LL_WARNING,  //! <Type Comment="Log Warning message strings&#13;&#10;&#13;&#10;Object found a problem but there is no need to react runtime.&#13;&#10;&#13;&#10;Example:&#13;&#10;&quot;Speed is limitted to maximum speed&quot;" Name="gt_LogLevel.LL_WARNING"/>
    LL_ERROR_APPLICATION:=5,  //! <Type Comment="Log application Error message strings&#13;&#10;&#13;&#10;Application error detected caused by application.&#13;&#10;&#13;&#10;Commonly, an application error indicates a mismatch in parameters/settings. &#13;&#10;If it�s not possible to recover the error, user interaction may be needed.&#13;&#10;&#13;&#10;Example:&#13;&#10;Axis can not reach it&apos;s end position because of a blocking object. &#13;&#10;&#13;&#10;" Name="gt_LogLevel.LL_ERROR_APPLICATION"/>
    LL_ERROR_INTERNAL:=6,  //! <Type Comment="Log internal Error message strings&#13;&#10;&#13;&#10;Object has an internal error detected.&#13;&#10;Commonly, an internal error indicates a programming error.  &#13;&#10;If it�s not possible to recover the error, the internalError will cause &#13;&#10;a critical error or an application error.&#13;&#10;&#13;&#10;Example:&#13;&#10;NIL pointer passed" Name="gt_LogLevel.LL_ERROR_INTERNAL"/>
    LL_ERROR_CRITICAL  //! <Type Comment="Log Critical error message strings&#13;&#10;&#13;&#10;Object has a critical error detected which can not be solved runtime.&#13;&#10;An application restart is required to solve error.&#13;&#10;&#13;&#10;" Name="gt_LogLevel.LL_ERROR_CRITICAL"/>
  )$UDINT;
#pragma pack(push, 1)
  gt_LogData : STRUCT  //! <Type Comment="OWNER: SF_Logger&#13;&#10;Log data, interface between safan logger &#13;&#10;and other classes." Name="gt_LogData"/>
    LogLevel : gt_LogLevel;  //! <Type Comment="Identify loglevel " Name="gt_LogData.LogLevel"/>
    p_ObjName : ^CHAR;  //! <Type Comment="Name of source object " Name="gt_LogData.p_ObjName"/>
    p_Msg : ^CHAR;  //! <Type Comment="for Message logging:&#13;&#10;Pointer to message " Name="gt_LogData.p_Msg"/>
    Id : UDINT;  //! <Type Comment="For Message logging:&#13;&#10;Id to identify message.&#13;&#10;&#13;&#10;For RealTime data logging:&#13;&#10;Id to identify value that is stored in dValue." Name="gt_LogData.Id"/>
    dValue : DINT;  //! <Type Comment="For realtime data logging:&#13;&#10;Log value " Name="gt_LogData.dValue"/>
    rtCall : BOOL;
  END_STRUCT;
#pragma pack(pop)
  gpt_LogData : ^gt_LogData;  //! <Type Comment="OWNER: SF_Logger&#13;&#10;Pointer to logdata, interface between safan logger and other classes." Name="gpt_LogData"/>
  gt_AgvHandleState :
  (
    HandleOperational,
    HandleStartUp,
    HandleConfiguration,
    HandleDisabled
  )$UDINT;
  gt_AgvMainAuto :
  (
    AutoConfig,
    AutoStartUp,
    AutoIdle,
    AutoRunning,
    AutoError,
    AutoReset
  )$UDINT;
  gt_AgvMainAux :
  (
    AuxMainConfig,
    AuxMainStartUp,
    AuxMainOperational,
    AuxMainError,
    AuxMainIdle
  )$UDINT;
  gt_agvMainPeripherals :
  (
    PerConfig,
    PerStartup,
    PerOperational,
    PerError,
    PerIdle
  )$UDINT;
  gt_AgvMainState :
  (
    Agv_Configuration,
    Agv_StartUp,
    Agv_idle,
    Agv_Auto,
    Agv_Manual,
    Agv_InError,
    Agv_Recover_Error
  )$UDINT;
  gt_AgvManual :
  (
    ManualConfig,
    ManualStartUp,
    ManualIdle,
    ManualRunning,
    ManualError,
    ManualReset
  )$UDINT;
  gt_AgvSettingsCmd :
  (
    LoadSettings,
    LoadReadyOk,
    LoadReadError
  )$UDINT;
  gt_FifoBufMode :  //! <Type Comment="OWNER: SF_DynamicBuffer&#13;&#10;FiFo Buffer mode &#13;&#10;- Cyclic (overwrite buffer if buffer is full)&#13;&#10;- Once   (Stop writing if buffer is full)&#13;&#10;&#13;&#10;&#13;&#10;FiFo := First In First Out" Name="gt_FifoBufMode"/>
  (
    FIFOBUFMODE_ONCE,  //! <Type Comment="Stop writing if buffer is full" Name="gt_FifoBufMode.FIFOBUFMODE_ONCE"/>
    FIFOBUFMODE_CYCLIC  //! <Type Comment="Overwrite buffer if buffer is full&#13;&#10;" Name="gt_FifoBufMode.FIFOBUFMODE_CYCLIC"/>
  )$UDINT;
  gt_LogCmd :  //! <Type Comment="OWNER: SF_Logger&#13;&#10;Log commands" Name="gt_LogCmd"/>
  (
    LOGCMD_IDLE,  //! <Type Comment="Command status Idle&#13;&#10;No command is running" Name="gt_LogCmd.LOGCMD_IDLE"/>
    LOGCMD_BUSY,  //! <Type Comment="Command status busy.&#13;&#10;Last command is stil running" Name="gt_LogCmd.LOGCMD_BUSY"/>
    LOGCMD_ERROR,  //! <Type Comment="Command status error.&#13;&#10;Last command failed" Name="gt_LogCmd.LOGCMD_ERROR"/>
    LOGCMD_RESET,  //! <Type Comment="Reset logger.&#13;&#10;- Remove existing files&#13;&#10;- Clear Realtime data buffer&#13;&#10;- Set variables back to default." Name="gt_LogCmd.LOGCMD_RESET"/>
    LOGCMD_FLUSH_MSG_LOG,  //! <Type Comment="Flush message log buffer and send content to message logfile.&#13;&#10;" Name="gt_LogCmd.LOGCMD_FLUSH_MSG_LOG"/>
    LOGCMD_START_RT_LOG,  //! <Type Comment="Command Start realtime logging unconditionally.&#13;&#10;&#13;&#10;Data is logged to RAM  buffer." Name="gt_LogCmd.LOGCMD_START_RT_LOG"/>
    LOGCMD_STARTTRIGGER_RT_LOG,  //! <Type Comment="Command start realtime data logging if trigger condition is found.&#13;&#10;Data is logged to RAM  buffer.&#13;&#10;&#13;&#10;&#13;&#10;*-------------&#13;&#10;&#13;&#10;* = trigger&#13;&#10;- = data is logged&#13;&#10;&#13;&#10;" Name="gt_LogCmd.LOGCMD_STARTTRIGGER_RT_LOG"/>
    LOGCMD_STOPTRIGGER_RT_LOG,  //! <Type Comment="Command start realtime data logging until &#13;&#10;trigger condition is found.&#13;&#10;Data is logged to RAM  buffer.&#13;&#10;&#13;&#10;&#13;&#10;-------------*&#13;&#10;&#13;&#10;* = trigger&#13;&#10;- = data is logged&#13;&#10;" Name="gt_LogCmd.LOGCMD_STOPTRIGGER_RT_LOG"/>
    LOGCMD_STOP_RT_LOG,  //! <Type Comment="Stop an active realtime data logging" Name="gt_LogCmd.LOGCMD_STOP_RT_LOG"/>
    LOGCMD_SENDFILE_RT_LOG,  //! <Type Comment="Store realtime log data into a file&#13;&#10;&#13;&#10;Note: Previous file will be overwritten" Name="gt_LogCmd.LOGCMD_SENDFILE_RT_LOG"/>
    LOGCMD_TEST_MSG_LOG
  )$UDINT;
  gt_LogTarget :  //! <Type Public="true" Comment="OWNER: SF_Logger&#13;&#10;Target for Log message strings&#13;&#10;" Name="gt_LogTarget"/>
  (
    LT_FILE,  //! <Type Comment="Log to file" Name="gt_LogTarget.LT_FILE"/>
    LT_SCREEN,  //! <Type Comment="Log to screen of Lasal development environment" Name="gt_LogTarget.LT_SCREEN"/>
    LT_FILE_SCREEN,  //! <Type Comment="Log to file and screen" Name="gt_LogTarget.LT_FILE_SCREEN"/>
    LT_EVENT
  )$UDINT;
  gt_ObjectStatus : BDINT  //! <Type Comment="OWNER: SF_Base&#13;&#10;&#13;&#10;Object status.&#13;&#10;&#13;&#10;Generic object status interface.&#13;&#10;Bit 0 - 15 is reserved for generic Safan framework&#13;&#10;Bit 16 -31 can be used by the application" Name="gt_ObjectStatus"/>
  [
    1 Error,  //! <Type Comment="1: Object has an internal, application or critical error.&#13;&#10;0: Object has no error&#13;&#10;&#13;&#10;Note:&#13;&#10;This flag is only updated via methode:&#13;&#10;UpdateObjectStatusError&#13;&#10;" Name="gt_ObjectStatus.Error"/>
    2 CriticalError,  //! <Type Comment="Object has an critical error detected&#13;&#10;which can not be solved runtime.&#13;&#10;&#13;&#10;Criticals are reserved for dangerous &#13;&#10;situations.&#13;&#10;&#13;&#10;" Name="gt_ObjectStatus.CriticalError"/>
    3 InternalError,  //! <Type Comment="Object has an internal error detected&#13;&#10;which can not be solved runtime.&#13;&#10;" Name="gt_ObjectStatus.InternalError"/>
    4 ApplicationError,  //! <Type Comment="Application error detected.&#13;&#10;This error could be detected &#13;&#10;internal or set by an external object&#13;&#10;&#13;&#10;Error can be solved runtime" Name="gt_ObjectStatus.ApplicationError"/>
    8 Enabled,  //! <Type Comment="1: Object is config, mode and extern mode enbled&#13;&#10;0: Object is disabled&#13;&#10;&#13;&#10;Note:&#13;&#10;Write this flag only via methode:&#13;&#10;UpdateObjectStatusEnable" Name="gt_ObjectStatus.Enabled"/>
    9 ConfigEnable,  //! <Type Comment="Object is configurated to be enabled.&#13;&#10;&#13;&#10;" Name="gt_ObjectStatus.ConfigEnable"/>
    10 ModeEnable,  //! <Type Comment="Object is set runtime to be enabled or disabled &#13;&#10;Typically controlled internaly by object.&#13;&#10;&#13;&#10;1: Object is Enabled&#13;&#10;0: Object is disabled&#13;&#10;" Name="gt_ObjectStatus.ModeEnable"/>
    11 ExtModeEnable,  //! <Type Comment="Object is set runtime to be enabled or disabled &#13;&#10;Typically controlled by external objects.&#13;&#10;&#13;&#10;1: Object is Enabled&#13;&#10;0: Object is disabled&#13;&#10;" Name="gt_ObjectStatus.ExtModeEnable"/>
    15 DebugRtLogEnabled,  //! <Type Comment="Realtime Debug log is enabled" Name="gt_ObjectStatus.DebugRtLogEnabled"/>
    16 LogConnected,  //! <Type Comment="Client op_LogData is is connected to central Logger " Name="gt_ObjectStatus.LogConnected"/>
    17 ApplicationStatus_1,
    18 ApplicationStatus_2,
    19 ApplicationStatus_3,
    20 ApplicationStatus_4,
    21 ApplicationStatus_5,
    22 ApplicationStatus_6,
    23 ApplicationStatus_7,
    24 ApplicationStatus_8,
    25 ApplicationStatus_9,
    26 ApplicationStatus_10,
    27 ApplicationStatus_11,
    28 ApplicationStatus_12,
    29 ApplicationStatus_13,
    30 ApplicationStatus_14,
    31 ApplicationStatus_15,
    32 ApplicationStatus_16,
  ];
#pragma pack(push, 1)
  gt_RtLogTrigger : STRUCT  //! <Type Comment="OWNER: SF_Logger&#13;&#10;Trigger settings used for realtime data logging" Name="gt_RtLogTrigger"/>
    Control : BSINT  //! <Type Comment="Flags to enable trigger conditions&#13;&#10;&#13;&#10;&#13;&#10;trigger = (    EnabledId and Id match&#13;&#10;   AND (  (EnableValueEqual  AND value equal)&#13;&#10;              OR (EnableValueLower  AND value lower)&#13;&#10;       OR (EnableValueHigher AND value higher)&#13;&#10;              )&#13;&#10;           )" Name="gt_RtLogTrigger.Control"/>
    [
      1 EnableId,  //! <Type Comment="Id used for trigger condition&#13;&#10;0: disabled&#13;&#10;1: enabled&#13;&#10;&#13;&#10;If enabled Id should match also &#13;&#10;to find trigger" Name="gt_RtLogTrigger.Control.EnableId"/>
      2 EnableValueEqual,  //! <Type Comment="Value used for trigger condition&#13;&#10;TriggerEvent if value is equal&#13;&#10;0: disabled&#13;&#10;1: enabled" Name="gt_RtLogTrigger.Control.EnableValueEqual"/>
      3 EnableValueLower,  //! <Type Comment="Value used for trigger condition&#13;&#10;TriggerEvent if value is lower&#13;&#10;0: disabled&#13;&#10;1: enabled" Name="gt_RtLogTrigger.Control.EnableValueLower"/>
      4 EnableValueHigher,  //! <Type Comment="Value used for trigger condition&#13;&#10;TriggerEvent if value is higher&#13;&#10;0: disabled&#13;&#10;1: enabled" Name="gt_RtLogTrigger.Control.EnableValueHigher"/>
    ];
    Id : UDINT;  //! <Type Comment="Id of logged data" Name="gt_RtLogTrigger.Id"/>
    Value : DINT;  //! <Type Comment="Data value" Name="gt_RtLogTrigger.Value"/>
  END_STRUCT;
#pragma pack(pop)
END_TYPE
