//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
#RE_IN_DE
#pragma define (store)
_cJSON : CLASS_PUBLIC
	TYPE
#pragma pack(push, 1)
	  t_s_cJSON : STRUCT
	    Next : ^t_s_cJSON;
	    Prev : ^t_s_cJSON;
	    Child : ^t_s_cJSON;
	    JType : DINT;
	    Val_String : ^CHAR;
	    Val_Int : DINT;
	    Val_Double : LREAL;
	    String : ^CHAR;
	  END_STRUCT;
#pragma pack(pop)
	END_TYPE
END_CLASS;
#pragma define (restore)
_JSONReader : CLASS_PUBLIC
	TYPE
	  t_e_Errors :
	  (
	    E_NoError:=0,
	    E_FileNameNotSet:=4294967295,
	    E_ClassState:=4294967294,
	    E_MemFull:=4294967293,
	    E_AsyncIDUnknown:=4294967292,
	    E_AsyncResultLost:=4294967291,
	    E_AsyncOperationResultUnknown:=4294967290,
	    E_FileContentsTooSmall:=4294967289,
	    E_FileOperationRequestFailed:=4294967288,
	    E_FileReadError:=4294967287,
	    E_JSONError:=4294967286
	  )$DINT;
	  t_e_READSTEPS :
	  (
	    RS_WAIT,
	    RS_OPEN_FILE:=1,
	    RS_WAIT_FOR_OPEN,
	    RS_GET_FILELENGTH:=3,
	    RS_WAIT_FOR_LEN:=4,
	    RS_READ_FILE:=5,
	    RS_WAIT_FOR_READ:=6,
	    RS_CLOSE_FILE:=7,
	    RS_WAIT_FOR_CLOSE:=8,
	    RS_PARSE:=9,
	    RS_COMPLETE:=10,
	    RS_ERROR:=11
	  )$UDINT;
	END_TYPE
END_CLASS;
#pragma define (restore)
_JSONWriter : CLASS_PUBLIC
	TYPE
	  t_e_Errors :
	  (
	    E_NoError:=0,
	    E_FileNameNotSet:=4294967295,
	    E_ClassState:=4294967294,
	    E_MemFull:=4294967293,
	    E_AsyncIDUnknown:=4294967292,
	    E_AsyncResultLost:=4294967291,
	    E_AsyncOperationResultUnknown:=4294967290,
	    E_FileOperationRequestFailed:=4294967289,
	    E_FileWriteError:=4294967288,
	    E_JSONError:=4294967287
	  )$DINT;
	  t_e_WRITESTEPS :
	  (
	    WS_WAIT,
	    WS_PRINT_TO_STRING:=1,
	    WS_OPEN_FILE:=2,
	    WS_WAIT_FOR_OPEN:=3,
	    WS_WRITE_FILE:=4,
	    WS_WAIT_FOR_WRITE:=5,
	    WS_CLOSE_FILE:=6,
	    WS_WAIT_FOR_CLOSE:=7,
	    WS_ERROR:=11
	  )$UDINT;
	END_TYPE
END_CLASS;
#pragma define (restore)
_TCPIPClient : CLASS_PUBLIC
#include "..\Class\_TCPIPClient\_TCPIPClient.h"
#include "..\Class\_TCPIPClient\SalamanderDelay.h"
#include "..\Class\_TCPIPClient\lsl_st_ssl_user.h"
	TYPE
	  _FSM_TCPIP_CLIENT :
	  (
	    _STATE_NONE,
	    _STATE_INIT_SERVER,
	    _STATE_NO_USER_INTERFACE_CONNECTED,
	    _STATE_IDLE,
	    _STATE_MAIN_SOCK,
	    _STATE_LISTEN,
	    _STATE_ACCEPT,
	    _STATE_CONNECT,
	    _STATE_RECV,
	    _STATE_SHUTDOWN,
	    _STATE_CLOSE_MAIN_SOCK,
	    _STATE_CLOSE_SOCK,
	    _STATE_ERROR,
	    _STATE_ERROR_ALLOCATING_MEMORY,
	    _STATE_ERROR_CREATING_MUTEX,
	    _STATE_ERROR_CREATING_TASK,
	    _STATE_SEND,
	    _STATE_MAIN_SOCK_OPT,
	    _STATE_DEL_CONNECTION,
	    _STATE_CONN_SOCK_OPT
	  )$UDINT;
	END_TYPE
END_CLASS;
#pragma define (restore)
_TCPIPClientInterface : CLASS_PUBLIC
	TYPE
	  _STATE_TCPIPC_INTF :
	  (
	    _STATE_NO_CONNECTION,
	    _STATE_DISCONNECTED,
	    _STATE_CONNECTED
	  )$UDINT;
	END_TYPE
END_CLASS;
#pragma define (restore)
_XMLReader : CLASS_PUBLIC
	TYPE
	  _XML_PARSE_ERROR :
	  (
	    _PARSE_ERR_NONE,
	    _PARSE_ERR_NO_HEADER,
	    _PARSE_ERR_UNEXPECTED_SIGN,
	    _PARSE_ERR_WRONG_SEQUENCE,
	    _PARSE_ERR_ATTRIBUTE_TWICE,
	    _PARSE_ERR_NO_TASK,
	    _PARSE_ERR_MEMORY,
	    _PARSE_ERR_NO_ROOT_ELEMENT
	  )$UDINT;
	  XML_READ_STATE :
	  (
	    _READY,
	    _FILE_OPENING,
	    _FILE_OPENED,
	    _FILE_GET_LENGTH,
	    _FILE_GOT_LENGTH,
	    _FILE_READING,
	    _FILE_READ,
	    _FILE_CLOSING,
	    _FILE_CLOSED,
	    _STRUCT_CREATING,
	    _STRUCT_CREATED,
	    _ERROR,
	    _PARSE_STREAM,
	    _STRUCT_FREE
	  )$UDINT;
	END_TYPE
END_CLASS;
#pragma define (restore)
_XMLStructCreator : CLASS_PUBLIC
	TYPE
	  _XML_FREE_TYPE :
	  (
	    _XML_FREE_ELEMENT,
	    _XML_FREE_ATTRIBUTE,
	    _XML_FREE_TEXT
	  )$UDINT;
	  _XML_STRUCT_ERR :
	  (
	    _NO_ERROR,
	    _MEM_ERROR
	  )$UDINT;
	END_TYPE
END_CLASS;
#pragma define (restore)
#pragma InclDefBlk CanOpenBase
CanOpenBase : CLASS_PUBLIC
	TYPE
	  CanDeviceState :
	  (
	    cds_Initialising,
	    cds_Disconnected,
	    cds_Connecting,
	    cds_Preparing,
	    cds_Prepared,
	    cds_Operational,
	    cds_PreOperational:=127,
	    cds_Idle:=255
	  )$DINT;
#pragma pack(push, 1)
	  tCanOpenBasePdoMap : STRUCT
	    NumberOfItems : DINT;
	    Config : ARRAY [0..5] OF DINT;
	    ItemValues : ARRAY [1..4] OF DINT;
	  END_STRUCT;
#pragma pack(pop)
	  tCanOpenBasePdo : ARRAY [0..3] OF tCanOpenBasePdoMap;
	END_TYPE
END_CLASS;
#pragma define (restore)
CanOpenCyncMaster : CLASS_PUBLIC
	TYPE
	  NMT_Commands :
	  (
	    NC_Start:=1,
	    NC_Stop:=2,
	    NC_GotoPreOperational:=128,
	    NC_Reset:=129,
	    NC_ResetComm:=130
	  )$DINT;
	END_TYPE
END_CLASS;
#pragma define (restore)
Curtis_Base : CLASS_PUBLIC
	TYPE
	  eCurtisDriveMode :
	  (
	    cdm_Idle,
	    cdm_TimeOut,
	    cdm_EmergencyStop,
	    cdm_Referencing,
	    cdm_Manual,
	    cdm_Auto,
	    cdm_DriveReset,
	    cdm_ExtInterlockReset
	  )$UDINT;
	  eCurtisDriveModeRequest :
	  (
	    cdmr_NoReq:=4294967295,
	    cdmr_Idle,
	    cdmr_Reference,
	    cdmr_Manual:=2,
	    cdmr_Automatic:=3,
	    cdmr_ResetDrive:=4,
	    cdmr_ResetExtInterlock:=5
	  )$DINT;
	END_TYPE
END_CLASS;
#pragma define (restore)
Curtis_AC2F : CLASS_PUBLIC
: Curtis_Base
	TYPE
	  tCurtisFault :
	  (
	    cf_NoFault:=0,
	    cf_ControllerOvercurrent:=18,
	    cf_CurrentSensorFault:=19,
	    cf_PrechargeFailed:=20,
	    cf_ControllerSevereUndertemp:=21,
	    cf_ControllerSevereOvertemp:=22,
	    cf_SevereBPlusUndervoltage:=23,
	    cf_SevereBPlusOvervoltage:=24,
	    cf_ControllerOvertempCutback:=34,
	    cf_BPlusUndervoltageCutback:=35,
	    cf_BPlusOvervoltageCutback:=36,
	    cf_5VSupplyFailure:=37,
	    cf_DigitalOut6OpenShort:=38,
	    cf_DigitalOut7OpenShort:=39,
	    cf_MotorTempHotCutback:=40,
	    cf_MotorTempSensorFault:=41,
	    cf_Coil1DriverOpenShort:=49,
	    cf_Coil2DriverOpenShort:=50,
	    cf_Coil3OpenShort:=51,
	    cf_Coil4OpenShort:=52,
	    cf_PDOpenShort:=53,
	    cf_EncoderFault:=54,
	    cf_MotorOpen:=55,
	    cf_MainContactorWelded:=56,
	    cf_MainContactorDidNotClose:=57,
	    cf_ThrottleWiperHigh:=64,
	    cf_ThrottleWiperLow:=65,
	    cf_Pot2WiperHigh:=66,
	    cf_Pot2WiperLow:=68,
	    cf_PotLowOvercurrent:=69,
	    cf_EEPROMFailure:=70,
	    cf_HPDSequencingFault:=71,
	    cf_EmerRevHPD:=72,
	    cf_ParameterChangeFault:=73,
	    cf_ExternalSupplyOutOfRange:=105,
	    cf_OSGeneral:=113,
	    cf_PDOTimeout:=114,
	    cf_StallDetected:=115,
	    cf_FaultOnOtherTractionController:=116,
	    cf_DualSevereFault:=117,
	    cf_SupervisorFault:=119,
	    cf_SupervisorIncompatible:=120,
	    cf_BadCalibrations:=130,
	    cf_DriverSupply:=131,
	    cf_MotorCharacterizationFault:=135,
	    cf_EncoderPulseCountFault:=136,
	    cf_MotorTypeFault:=137,
	    cf_VCLOSMismatch:=145,
	    cf_EMBrakeFailedToSet:=146,
	    cf_EncoderLOS:=147,
	    cf_EMRRevTimeout:=148,
	    cf_IllegalModelNumber:=152,
	    cf_DualmotorParameterMismatch:=153,
	    cf_VCLRuntimeError:=201
	  )$UDINT;
	END_TYPE
END_CLASS;
#pragma define (restore)
Curtis_Universal : CLASS_PUBLIC
	TYPE
	  eCurtisDriveMode :
	  (
	    cdm_Idle,
	    cdm_TimeOut,
	    cdm_EmergencyStop,
	    cdm_Referencing,
	    cdm_Manual,
	    cdm_Auto,
	    cdm_DriveReset,
	    cdm_ExtInterlockReset
	  )$UDINT;
	  eCurtisDriveModel :
	  (
	    Model_1232e:=1,
	    Model_AC2F:=2
	  )$UDINT;
	  eCurtisDriveModeRequest :
	  (
	    cdmr_NoReq:=4294967295,
	    cdmr_Idle,
	    cdmr_Reference,
	    cdmr_Automatic,
	    cdmr_ResetDrive,
	    cdmr_ResetExtInterlock
	  )$DINT;
	END_TYPE
END_CLASS;
#pragma define (restore)
Dana_Tm4 : CLASS_PUBLIC
	TYPE
	  tControlWord : BINT
	  [
	    1 DriveEnable,
	    2 MainContactor,
	    3 BrakeRelease,
	    4 Output_01,
	    5 Output_02,
	    6 Output_03,
	    7 Output_04,
	    8 SafeStop,
	    9 Bit9,
	    10 Bit10,
	    11 Bit11,
	    12 Bit12,
	    13 Bit13,
	    14 Bit14,
	    15 Bit15,
	    16 Reset,
	  ];
	  tStatusbyte : BSINT
	  [
	    1 PowerActive,
	    2 Fault,
	    3 TorqueMode,
	    4 ModeAnalog,
	    5 ModeCan,
	    6 ccwActive,
	    7 SafeStopActive,
	    8 ToggelBit,
	  ];
	END_TYPE
END_CLASS;
#pragma define (restore)
HAL_BMS_Base : CLASS_PUBLIC
	TYPE
	  tBMSAlarms : BDINT
	  [
	    1 ba_OverVoltage,
	    2 ba_UnderVoltage,
	    3 ba_AlmostUnderVoltage,
	    4 ba_BatteryEmpty,
	    5 ba_BatteryAlmostEmpty,
	    6 ba_InternalDefect,
	    7 ba_NoCommunication,
	    8 Bit8,
	    9 Bit9,
	    10 Bit10,
	    11 Bit11,
	    12 Bit12,
	    13 Bit13,
	    14 Bit14,
	    15 Bit15,
	    16 Bit16,
	    17 Bit17,
	    18 Bit18,
	    19 Bit19,
	    20 Bit20,
	    21 Bit21,
	    22 Bit22,
	    23 Bit23,
	    24 Bit24,
	    25 Bit25,
	    26 Bit26,
	    27 Bit27,
	    28 Bit28,
	    29 Bit29,
	    30 Bit30,
	    31 Bit31,
	    32 Bit32,
	  ];
#pragma pack(push, 1)
	  tBMSData : STRUCT
	    bd_StateOfCharge : UINT;
	    bd_TimeToGo : UINT;
	    bd_EnergyDraw : INT;
	    bd_BatteryVoltage : UINT;
	    bd_BatteryCurrent : INT;
	    bd_BatteryTemperature : INT;
	    bd_BatteryCharging : BOOL;
	    bd_BatteryLowIndication : BOOL;
	    bd_Alarm : tBMSAlarms;
	  END_STRUCT;
#pragma pack(pop)
	END_TYPE
END_CLASS;
#pragma define (restore)
HAL_BMS_MasterVolt : CLASS_PUBLIC
: HAL_BMS_Base
	TYPE
	  tHMIAdditionalIconBMS :
	  (
	    HAI_None,
	    HAI_Attention,
	    HAI_Charging
	  )$UDINT;
	END_TYPE
END_CLASS;
#pragma define (restore)
HandleSteering : CLASS_PUBLIC
	TYPE
	  eDriveMode :
	  (
	    dm_Idle,
	    dm_Manual,
	    dm_Auto,
	    dm_Referencing,
	    dm_EmergencyStop
	  )$UDINT;
#pragma pack(push, 1)
	  tDriveStatus : STRUCT
	    ds_DriveMode : eDriveMode;
	    ds_Referenced : DINT;
	    ds_Setpoint : REAL;
	    ds_Actual : REAL;
	    ds_FaultCode : DINT;
	    ds_CommunicationOK : DINT;
	    ds_EstopOK : DINT;
	  END_STRUCT;
#pragma pack(pop)
	END_TYPE
END_CLASS;
#pragma define (restore)
I_PivotWheel : CLASS_PUBLIC
	TYPE
#pragma pack(push, 1)
	  tPivotWheelParameters : STRUCT
	    pwp_DistanceToCenterX : REAL;
	    pwp_DistanceToCenterY : REAL;
	    pwp_PivotWheelReferenced : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 4)
	  tPivotWheelStatus : STRUCT
	    pws_PivotWheelExists : BOOL;
	    pws_Driving : HandleSteering::tDriveStatus;
	    pws_Steering : HandleSteering::tDriveStatus;
	  END_STRUCT;
#pragma pack(pop)
	END_TYPE
END_CLASS;
#pragma define (restore)
MainAuxCntrl : CLASS_PUBLIC
	TYPE
	  tAuxMainStatus : BDINT
	  [
	    1 Configuration_loaded,
	    2 bit2,
	    3 AuxReady,
	    4 AgvOnpostion,
	    5 Bit5,
	    6 Bit6,
	    7 Bit7,
	    8 Bit8,
	    9 RestartRequest,
	    10 Bit10,
	    11 Bit11,
	    12 Bit12,
	    13 Bit13,
	    14 Bit14,
	    15 Bit15,
	    16 Bit16,
	    17 Bit17,
	    18 Bit18,
	    19 Bit19,
	    20 Bit20,
	    21 Bit21,
	    22 Bit22,
	    23 Bit23,
	    24 Bit24,
	    25 Bit25,
	    26 Bit26,
	    27 Bit27,
	    28 Bit28,
	    29 Bit29,
	    30 Bit30,
	    31 AuxError,
	    32 CmdError,
	  ];
	END_TYPE
END_CLASS;
#pragma define (restore)
MerkerEx : CLASS_PUBLIC
#include <.\lsl_st_mt.h>
	TYPE
	  Cmdm_udLength :
	  (
	    GET_DATA_PTR,
	    EXCHANGE_DATA_PTR,
	    SAVE_DATA_TO_RAMEXFILE
	  )$UINT;
	END_TYPE
END_CLASS;
#pragma define (restore)
MQTTBackgroundWorker : CLASS_PUBLIC
	TYPE
	  t_e_WorkerState :
	  (
	    WS_Init,
	    WS_Ready,
	    WS_ResolvingHostname,
	    WS_WaitForResolving
	  )$UDINT;
	END_TYPE
END_CLASS;
#pragma define (restore)
MQTTPacketQueue : CLASS_PUBLIC
	TYPE
#pragma pack(push, 1)
	  t_s_Packet : STRUCT
	    pData : ^void;
	    udDataSize : UDINT;
	    pPayload : ^void;
	    udPayloadSize : UDINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  t_s_PacketEntry : STRUCT
	    udWriteOffset : UDINT;
	    bLocked : BOOL;
	    dID : DINT;
	    PacketData : t_s_Packet;
	    pCBThis : ^void;
	    pCBMeth : ^void;
	    Direction : DINT;
	    MsgType : DINT;
	  END_STRUCT;
#pragma pack(pop)
	END_TYPE
END_CLASS;
#pragma define (restore)
MQTTClient : CLASS_PUBLIC
#include "..\Class\MQTTClient\MQTTClient_LogTexts.h"
	TYPE
	  t_e_MQTTClientStates :
	  (
	    MCS_Initialise,
	    MCS_Connect,
	    MCS_Connected,
	    MCS_Reconnect,
	    MCS_Disconnect,
	    MCS_Error
	  )$UDINT;
	  t_e_MQTTControlPackets :
	  (
	    MCP_CONNECT,
	    MCP_CONNACK,
	    MCP_PUBLISH,
	    MCP_PUBACK,
	    MCP_PUBREC,
	    MCP_PUBREL,
	    MCP_PUBCOMP,
	    MCP_SUBSCRIBE,
	    MCP_SUBACK,
	    MCP_UNSUBSCRIBE,
	    MCP_UNSUBACK,
	    MCP_PINGREQ,
	    MCP_PINGRESP,
	    MCP_DISCONNECT,
	    MCP_UNKNOWN
	  )$UDINT;
	  t_e_MQTTErrors :
	  (
	    MQTT_ERR_CONN_PENDING:=4294967295,
	    MQTT_ERR_SUCCESS:=0,
	    MQTT_ERR_NOMEM:=1,
	    MQTT_ERR_PROTOCOL:=2,
	    MQTT_ERR_INVAL:=3,
	    MQTT_ERR_NO_CONN:=4,
	    MQTT_ERR_CONN_REFUSED:=5,
	    MQTT_ERR_NOT_FOUND:=6,
	    MQTT_ERR_CONN_LOST:=7,
	    MQTT_ERR_TLS:=8,
	    MQTT_ERR_PAYLOAD_SIZE:=9,
	    MQTT_ERR_NOT_SUPPORTED:=10,
	    MQTT_ERR_AUTH:=11,
	    MQTT_ERR_ACL_DENIED:=12,
	    MQTT_ERR_UNKNOWN:=13,
	    MQTT_ERR_ERRNO:=14,
	    MQTT_ERR_EAI:=15,
	    MQTT_ERR_PROXY:=16,
	    MQTT_ERR_PLUGIN_DEFER:=17,
	    MQTT_ERR_MALFORMED_UTF8:=18,
	    MQTT_ERR_KEEPALIVE:=19,
	    MQTT_ERR_LOOKUP:=20,
	    MQTT_ERR_ALREADY_SUB:=21
	  )$INT;
#pragma pack(push, 1)
	  t_s_MQTTMessage : STRUCT
	    mid : INT;
	    topic : ^UINT;
	    payload : ^void;
	    payloadlen : UDINT;
	    qos : INT;
	    bRetain : BOOL;
	  END_STRUCT;
#pragma pack(pop)
	END_TYPE
END_CLASS;
#pragma define (restore)
MQTTClient_Interface : CLASS_PUBLIC
#include "..\Class\MQTTClient_Interface\MQTTClientInterface_LogTexts.h"
	TYPE
	  t_bd_LogConfig : BDINT
	  [
	    1 Log_Info,
	    2 Log_Notice,
	    3 Log_Warning,
	    4 Log_Error,
	    5 Log_Debug,
	    6 Log_Subscribe,
	    7 Log_Unsubscribe,
	    8 Log_WebSockets,
	    9 Bit9,
	    10 Bit10,
	    11 Bit11,
	    12 Bit12,
	    13 Bit13,
	    14 Bit14,
	    15 Bit15,
	    16 Bit16,
	    17 Bit17,
	    18 Bit18,
	    19 Bit19,
	    20 Bit20,
	    21 Bit21,
	    22 Bit22,
	    23 Bit23,
	    24 Bit24,
	    25 Bit25,
	    26 Bit26,
	    27 Bit27,
	    28 Bit28,
	    29 Bit29,
	    30 Bit30,
	    31 Bit31,
	    32 Bit32,
	  ];
	  t_e_ConfigParameters :
	  (
	    CP_DataMap_SendOnAdd
	  )$UDINT;
	  t_e_DataMap_DataTypes :
	  (
	    DD_Unknown,
	    DD_UDINT,
	    DD_DINT,
	    DD_REAL,
	    DD_String
	  )$UDINT;
	  t_e_DataMap_ElementTypes :
	  (
	    DM_Publish,
	    DM_Subscribe
	  )$UDINT;
	  t_e_DataMap_Operations :
	  (
	    DO_Unknown,
	    DO_Poll,
	    DO_Change,
	    DO_Subscribe
	  )$UDINT;
	  t_e_DataMap_RetCode :
	  (
	    DM_OK:=0,
	    DM_TopicNameTooLong:=4294967295,
	    DM_ElementNameTooLong:=4294967294,
	    DM_ListFull:=4294967293,
	    DM_ElementNotFound:=4294967292,
	    DM_InputValueError:=4294967291
	  )$DINT;
	  t_e_MQTTClientStates :
	  (
	    MCIS_Ready:=0,
	    MCIS_Initialise:=1,
	    MCIS_Prepare,
	    MCIS_WaitForConnection,
	    MCIS_Reconnecting,
	    MCIS_Connected,
	    MCIS_Error
	  )$UDINT;
	  t_e_PubSubRetCodes :
	  (
	    PSRC_Subscribed,
	    PSRC_Unsubscribed,
	    PSRC_PublishReceived,
	    PSRC_Published,
	    PSRC_Disconnected
	  )$UDINT;
	END_TYPE
END_CLASS;
#pragma define (restore)
MQTTClient_Interface_ConfigBase : CLASS_PUBLIC
	TYPE
#pragma pack(push, 1)
	  t_s_Authentication : STRUCT
	    username : ^UINT;
	    password : ^UINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  t_s_ClientID : STRUCT
	    ClientID : ^UINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  t_s_ConnectionParameters : STRUCT
	    hostname : ^UINT;
	    port : INT;
	    keepalive : INT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  t_s_MaxInflightMessages : STRUCT
	    max_inflight_messages : INT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  t_s_ReconnectionParameters : STRUCT
	    min_interval : INT;
	    max_interval : INT;
	    exponential_scale : BOOL;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  t_s_TLS : STRUCT
	    cafile : ^CHAR;
	    certfile : ^CHAR;
	    keyfile : ^CHAR;
	    pw : ^CHAR;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  t_s_Will : STRUCT
	    topic : ^UINT;
	    payloadtext : ^CHAR;
	    qos : INT;
	    bRetain : BOOL;
	  END_STRUCT;
#pragma pack(pop)
	END_TYPE
END_CLASS;
#pragma define (restore)
MQTTTopic : CLASS_PUBLIC
#include "..\Class\MQTTTopic\MQTTTopic_LogTexts.h"
	TYPE
	  t_e_ConfigParameters :
	  (
	    CP_SendAtStart
	  )$UDINT;
	  t_e_MQTT_TopicState :
	  (
	    MTS_Init,
	    MTS_WaitForConnection,
	    MTS_Ready,
	    MTS_Subscribe,
	    MTS_WaitForSubscribe,
	    MTS_Subscribed,
	    MTS_Unsubscribe,
	    MTS_WaitForUnsubscribe,
	    MTS_Unsubscribed,
	    MTS_WaitForPublishInterval,
	    MTS_WaitForPublishDataChange,
	    MTS_WaitForPublishCommand,
	    MTS_Publish,
	    MTS_WaitForPublishDone,
	    MTS_Error,
	    MTS_Error_WaitForReset
	  )$UDINT;
	  t_e_MQTT_TopicType :
	  (
	    MT_Deactivated,
	    MT_Subscribe,
	    MT_Publish_Poll,
	    MT_Publish_OnChange,
	    MT_Publish_Manual
	  )$UDINT;
#pragma pack(push, 1)
	  t_s_MQTT_TopicTimeouts : STRUCT
	    udSubscribeTimeout : UDINT;
	    udUnsubscribeTimeout : UDINT;
	    udPublishTimeout : UDINT;
	  END_STRUCT;
#pragma pack(pop)
	END_TYPE
END_CLASS;
#pragma define (restore)
VirtualBaseInit : CLASS_PUBLIC
	TYPE
	  CmdData :
	  (
	    GET_ADD_INFO,
	    READ_DATA,
	    WRITE_DATA,
	    READ_DATA_OFF,
	    WRITE_DATA_OFF
	  )$UINT;
	END_TYPE
END_CLASS;
#pragma define (restore)

#RE_IN_DE
