//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
#RE_IN_DE
#pragma define (store)
#if _LSL_COMPILERVERSION >= 42
_LMCModuleBase : CLASS;
HwcLogging : CLASS;
SigCLib : CLASS;
#endif
_AxisBase : CLASS_PUBLIC
	TYPE
	  _LMCAXIS_POSINFOMODE :
	  (
	    POSINFO_TIME,
	    POSINFO_DISTANCE
	  )$UDINT;
	  _LMCAXIS_READPARAMETER_LREAL :
	  (
	    LMCAXIS_PAR_RD2_JMAX,
	    LMCAXIS_PAR_RD2_ACC
	  )$UDINT;
	  CmdControl :
	  (
	    IPRPowerOn,
	    IPRPowerOff,
	    IPRMoveRelative,
	    IPRMoveAbsolute,
	    IPRMoveReference,
	    IPRMoveEndless,
	    IPRMoveHand,
	    IPRStopMove,
	    IPRCoupleGearVelocity,
	    IPRCoupleDeltaPos,
	    IPRCoupleUserPos,
	    IPRCoupleProfilePos,
	    IPRCoupleGearRelative,
	    IPRCoupleGearAbsolute,
	    IPRCoupleCurveTab,
	    IPRSetSWEndPos,
	    IPRSetPosition,
	    IPRChangeCoupleSettings,
	    IPRTuneAxis,
	    IPRReadPosition,
	    IPRReadVelocity,
	    IPRInPosition,
	    IPRReadAxisStatus,
	    IPRReadAxisError,
	    IPRReadMasterInfo,
	    IPRSetFollowMode,
	    IPRReferenceReady,
	    IPRInpositionOk,
	    IPRCoupleGearPolynom,
	    IPRSetParameter,
	    IPRSetAdjustment,
	    IPRReadParameter,
	    IPRReadSWEndPos,
	    IPRCalcMovingTime,
	    IPRQuitError,
	    IPRCalcMaxSlavePath,
	    IPRCalcExtToAppliPos,
	    IPRReadUserData,
	    IPRGetMasterInformation,
	    IPR_SetErrorToMasterCoupleMonitoring
	  )$UINT;
	END_TYPE
END_CLASS;
#pragma define (restore)
_cJSON : CLASS_PUBLIC
	TYPE
#pragma pack(push, 1)
	  t_s_cJSON : STRUCT
	    Next : ^t_s_cJSON;
	    Prev : ^t_s_cJSON;
	    Child : ^t_s_cJSON;
	    JType : DINT;
	    Val_String : ^CHAR;
	    Val_Int : DINT;
	    Val_Double : LREAL;
	    String : ^CHAR;
	  END_STRUCT;
#pragma pack(pop)
	END_TYPE
END_CLASS;
#pragma define (restore)
_JSONReader : CLASS_PUBLIC
	TYPE
	  t_e_Errors :
	  (
	    E_NoError:=0,
	    E_FileNameNotSet:=4294967295,
	    E_ClassState:=4294967294,
	    E_MemFull:=4294967293,
	    E_AsyncIDUnknown:=4294967292,
	    E_AsyncResultLost:=4294967291,
	    E_AsyncOperationResultUnknown:=4294967290,
	    E_FileContentsTooSmall:=4294967289,
	    E_FileOperationRequestFailed:=4294967288,
	    E_FileReadError:=4294967287,
	    E_JSONError:=4294967286
	  )$DINT;
	  t_e_READSTEPS :
	  (
	    RS_WAIT,
	    RS_OPEN_FILE:=1,
	    RS_WAIT_FOR_OPEN,
	    RS_GET_FILELENGTH:=3,
	    RS_WAIT_FOR_LEN:=4,
	    RS_READ_FILE:=5,
	    RS_WAIT_FOR_READ:=6,
	    RS_CLOSE_FILE:=7,
	    RS_WAIT_FOR_CLOSE:=8,
	    RS_PARSE:=9,
	    RS_COMPLETE:=10,
	    RS_ERROR:=11
	  )$UDINT;
	END_TYPE
END_CLASS;
#pragma define (restore)
_JSONWriter : CLASS_PUBLIC
	TYPE
	  t_e_Errors :
	  (
	    E_NoError:=0,
	    E_FileNameNotSet:=4294967295,
	    E_ClassState:=4294967294,
	    E_MemFull:=4294967293,
	    E_AsyncIDUnknown:=4294967292,
	    E_AsyncResultLost:=4294967291,
	    E_AsyncOperationResultUnknown:=4294967290,
	    E_FileOperationRequestFailed:=4294967289,
	    E_FileWriteError:=4294967288,
	    E_JSONError:=4294967287
	  )$DINT;
	  t_e_WRITESTEPS :
	  (
	    WS_WAIT,
	    WS_PRINT_TO_STRING:=1,
	    WS_OPEN_FILE:=2,
	    WS_WAIT_FOR_OPEN:=3,
	    WS_WRITE_FILE:=4,
	    WS_WAIT_FOR_WRITE:=5,
	    WS_CLOSE_FILE:=6,
	    WS_WAIT_FOR_CLOSE:=7,
	    WS_ERROR:=11
	  )$UDINT;
	END_TYPE
END_CLASS;
#pragma define (restore)
_LMCRefBase : CLASS_PUBLIC
	TYPE
#pragma pack(push, 1)
	  _LMCAXIS_REFDATA : STRUCT
	    Status : iprStates;
	    Velocity : DINT;
	    Acc : DINT;
	    vSetRef1 : DINT;
	    vSetRef2 : DINT;
	    PosWindow : DINT;
	    LatchPosRef : DINT;
	    Speed : DINT;
	  END_STRUCT;
#pragma pack(pop)
	  _LMCREF_READPARAMETER :
	  (
	    ZPULSE_DIST
	  )$UDINT;
	END_TYPE
END_CLASS;
#pragma define (restore)
#pragma InclDefBlk _LMCAxisBase
_LMCAxisBase : CLASS_PUBLIC
: _AxisBase
#include <.\lsl_st_systrace.h>
#include "..\Class\_LMCAxisBase\C_MathAxis.h"
#include "..\Class\_LMCAxisBase\_LMCTraceView.h"
#include "..\Class\_LMCAxisBase\BacklashLogin.h"
	TYPE
	  _CommandList :
	  (
	    CPowerOn,
	    CPowerOff,
	    CInposition,
	    CMoveHand,
	    CMoveEndless,
	    CMoveAbsolut,
	    CMoveReference,
	    CMoveRelative,
	    CStopMove,
	    CCoupleGearAbsolute,
	    CCoupleGearRelative,
	    CCoupleGearVelocity,
	    CCoupleCurveTab,
	    CCoupleUserPos,
	    CCoupleDeltaPos,
	    CCoupleProfilePos,
	    CSetPosition,
	    CSetAutoOffset,
	    CSetCoupleParameter,
	    CSetParameter,
	    CReadPosition,
	    CSetSWEndPos,
	    CReadSWEndPos,
	    CReadAxisError,
	    CReadAxisStatus,
	    CReadMasterInfo,
	    CReadVelocity,
	    CReadParameter,
	    CTuneAxis:=28,
	    CInternModuloOverFlow:=29,
	    CFollowMode:=30,
	    CCoupleGearPolynom:=31,
	    CCoupleAdditivePosDiff:=32,
	    CCoupleCAM,
	    CMoveShortestWay,
	    CCalcMovingTime,
	    CQuitError,
	    CCalcMaxSlavePath,
	    CCalcExtToAppliPos,
	    CChangeMoveSettings,
	    CGetPosInfoBeforeRampDown,
	    CSetDynSWEndPos,
	    CQuickStop
	  )$UDINT;
	  _CoupleMonitorExtendedConfig : BDINT
	  [
	    1 ReportErrorToMaster,
	    2 ReportSlaveErrorToMaster,
	    3 ReportMasterErrorToSlave,
	    4 ReportSlaveErrorToSlave,
	    5 SwLimitMonitoring,
	    6 PowerOffMonitoring,
	  ];
	  _LogStruct : STRUCT
	    Command : _CommandList;
	    CommandoResult : _LMCAXIS_CMDERROR;
	    TimeStamp : UDINT;
	    RTStamp : UDINT;
	  END_STRUCT;
	  _LogFile : STRUCT
	    Logmode : DINT;
	    AccesNr : DINT;
	    LogData : ARRAY [0..101] OF _LogStruct;
	  END_STRUCT;
	  t_BLMMeasFlags : BINT
	  [
	    1 StartMeasurement,
	    2 DoMeasurement,
	    3 FinishedMeasurement,
	    4 BLValueDetected,
	    5 BLAmountNegCalced,
	    6 BLAmountPosCalced,
	    7 GetHWInfo,
	    8 HWInfoError,
	    9 DoBLValCorrection,
	    10 InvCurr,
	    11 Bit11,
	    12 Bit12,
	    13 Bit13,
	    14 Bit14,
	    15 Bit15,
	    16 DoMeasurementError,
	  ];
	  t_BLCCompFlags : BINT
	  [
	    1 DirFlg,
	    2 TransitionActive,
	    3 Enabled,
	    4 EnabledMarker,
	    5 UseTable,
	    6 CallTable,
	    7 CalcBL,
	    8 Standstill,
	    9 StandstillMarker,
	    10 MoveDirChanged,
	    11 ValidTable,
	    12 Bit12,
	    13 Bit13,
	    14 Bit14,
	    15 TransferBLAmountError,
	    16 ExecuteBacklashError,
	  ];
	  te_BLCmdClassSvr :
	  (
	    IPBLCGetPointerBacklash:=51,
	    IPBLCSetBacklashAmount,
	    IPBLCGetPointerBLCompFlags,
	    IPBLCExecute,
	    IPBLCSetPointerSetPosVel,
	    IPBLCSetTimeBase,
	    IPBLCDetectMoveDirChange,
	    IPBLCReset,
	    IPBLMGetPointerBacklashValue:=71,
	    IPBLMDoMeasurement,
	    IPBLMGetPointerMeasFlags,
	    IPBLMSetTimeBase,
	    IPBLMSetExtIntUnits,
	    IPBLMSetPlaceAxisNo,
	    IPBLMSetCurrSign,
	    IPBLMReset
	  )$UDINT;
	END_TYPE
END_CLASS;
#pragma define (restore)
#pragma InclDefBlk _LMCMathFunctions
_LMCMathFunctions : CLASS_PUBLIC
#include "..\Class\_LMCMathFunctions\C_MathFunct.h"
	TYPE
#pragma pack(push, 4)
	  _coeff_ : STRUCT
	    coA : LREAL;
	    coB : LREAL;
	    coC : LREAL;
	    coD : LREAL;
	    coE : LREAL;
	  END_STRUCT;
#pragma pack(pop)
	  _COORD_2D : ARRAY [0..1] OF DINT;
#pragma pack(push, 4)
	  _LMC_VECTOR3 : STRUCT
	    coord_x1 : LREAL;
	    coord_x2 : LREAL;
	    coord_x3 : LREAL;
	  END_STRUCT;
#pragma pack(pop)
	  t_e_LMC_MoveProf_Jerk_ProfTypes :
	  (
	    LMC_ProfType_Jerk_TT,
	    LMC_ProfType_Jerk_TW,
	    LMC_ProfType_Jerk_WW,
	    LMC_ProfType_Jerk_WT,
	    LMC_ProfType_Jerk_XW,
	    LMC_ProfType_Jerk_XT
	  )$UDINT;
	  t_e_LMCMath_Retcodes :
	  (
	    LMCMathRet_NoError,
	    LMCMathRet_NegRoot,
	    LMCMathRet_InputErr,
	    LMCMathRet_NotPossible
	  )$UDINT;
#pragma pack(push, 1)
	  t_st_LMC_MoveProf_Jerk_Point : STRUCT
	    lrT : LREAL;
	    lrS : LREAL;
	    lrV : LREAL;
	    lrA : LREAL;
	    lrJ : LREAL;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  t_st_LMC_MoveProf_Jerk : STRUCT
	    ProfileType : t_e_LMC_MoveProf_Jerk_ProfTypes;
	    aPts : ARRAY [0..9] OF t_st_LMC_MoveProf_Jerk_Point;
	  END_STRUCT;
#pragma pack(pop)
	END_TYPE
END_CLASS;
#pragma define (restore)
_LMCPublisher : CLASS_PUBLIC
	TYPE
	  _Config_ : BDINT
	  [
	    1 VirtualAxis,
	    2 RealAxis,
	  ];
	  _LMCPublisher_Cmd :
	  (
	    _LOGINCMD:=123
	  )$UDINT;
	END_TYPE
END_CLASS;
#pragma define (restore)
_SerLib : CLASS_PUBLIC
	TYPE
	  CmdCommand :
	  (
	    StartUserIPR,
	    StopUserIPR,
	    SerCloseIPR,
	    SerSendIPR,
	    RecvCharIPR,
	    SetOnlineIPR,
	    GetRecvStateIPR,
	    GetSendStateIPR,
	    GetErrorIPR,
	    IsInitializedIPR,
	    ClearRecBufferIPR,
	    RtsOnOffIPR,
	    rdRtsIPR,
	    rdCtsIPR,
	    DtrOnOffIPR,
	    rdDtrIPR,
	    rdDcdIPR,
	    rdDsrIPR,
	    rdRiIPR,
	    SetRSModeIPR,
	    GetRSModeIPR,
	    GetInterfaceTypeIPR
	  )$UINT;
	END_TYPE
END_CLASS;
#pragma define (restore)
_TCPIPClient : CLASS_PUBLIC
#include "..\Class\_TCPIPClient\_TCPIPClient.h"
#include "..\Class\_TCPIPClient\SalamanderDelay.h"
#include "..\Class\_TCPIPClient\lsl_st_ssl_user.h"
	TYPE
	  _FSM_TCPIP_CLIENT :
	  (
	    _STATE_NONE,
	    _STATE_INIT_SERVER,
	    _STATE_NO_USER_INTERFACE_CONNECTED,
	    _STATE_IDLE,
	    _STATE_MAIN_SOCK,
	    _STATE_LISTEN,
	    _STATE_ACCEPT,
	    _STATE_CONNECT,
	    _STATE_RECV,
	    _STATE_SHUTDOWN,
	    _STATE_CLOSE_MAIN_SOCK,
	    _STATE_CLOSE_SOCK,
	    _STATE_ERROR,
	    _STATE_ERROR_ALLOCATING_MEMORY,
	    _STATE_ERROR_CREATING_MUTEX,
	    _STATE_ERROR_CREATING_TASK,
	    _STATE_SEND,
	    _STATE_MAIN_SOCK_OPT,
	    _STATE_DEL_CONNECTION,
	    _STATE_CONN_SOCK_OPT
	  )$UDINT;
	END_TYPE
END_CLASS;
#pragma define (restore)
_TCPIPClientInterface : CLASS_PUBLIC
	TYPE
	  _STATE_TCPIPC_INTF :
	  (
	    _STATE_NO_CONNECTION,
	    _STATE_DISCONNECTED,
	    _STATE_CONNECTED
	  )$UDINT;
	END_TYPE
END_CLASS;
#pragma define (restore)
_XMLReader : CLASS_PUBLIC
	TYPE
	  _XML_PARSE_ERROR :
	  (
	    _PARSE_ERR_NONE,
	    _PARSE_ERR_NO_HEADER,
	    _PARSE_ERR_UNEXPECTED_SIGN,
	    _PARSE_ERR_WRONG_SEQUENCE,
	    _PARSE_ERR_ATTRIBUTE_TWICE,
	    _PARSE_ERR_NO_TASK,
	    _PARSE_ERR_MEMORY,
	    _PARSE_ERR_NO_ROOT_ELEMENT
	  )$UDINT;
	  XML_READ_STATE :
	  (
	    _READY,
	    _FILE_OPENING,
	    _FILE_OPENED,
	    _FILE_GET_LENGTH,
	    _FILE_GOT_LENGTH,
	    _FILE_READING,
	    _FILE_READ,
	    _FILE_CLOSING,
	    _FILE_CLOSED,
	    _STRUCT_CREATING,
	    _STRUCT_CREATED,
	    _ERROR,
	    _PARSE_STREAM,
	    _STRUCT_FREE
	  )$UDINT;
	END_TYPE
END_CLASS;
#pragma define (restore)
_XMLStructCreator : CLASS_PUBLIC
	TYPE
	  _XML_FREE_TYPE :
	  (
	    _XML_FREE_ELEMENT,
	    _XML_FREE_ATTRIBUTE,
	    _XML_FREE_TEXT
	  )$UDINT;
	  _XML_STRUCT_ERR :
	  (
	    _NO_ERROR,
	    _MEM_ERROR
	  )$UDINT;
	END_TYPE
END_CLASS;
#pragma define (restore)
AutomaticControl : CLASS_PUBLIC
	TYPE
#pragma pack(push, 1)
	  tAutomaticControlData : STRUCT
	    acd_DrivingVectorAngle : REAL;
	    acd_SteeringRadius : REAL;
	    acd_DrivingSpeed : REAL;
	  END_STRUCT;
#pragma pack(pop)
	END_TYPE
END_CLASS;
#pragma define (restore)
#pragma InclDefBlk CanOpenBase
CanOpenBase : CLASS_PUBLIC
	TYPE
	  CanDeviceState :
	  (
	    cds_Initialising,
	    cds_Disconnected,
	    cds_Connecting,
	    cds_Preparing,
	    cds_Prepared,
	    cds_Operational,
	    cds_PreOperational:=127,
	    cds_Idle:=255
	  )$DINT;
#pragma pack(push, 1)
	  tCanOpenBasePdoMap : STRUCT
	    NumberOfItems : DINT;
	    Config : ARRAY [0..5] OF DINT;
	    ItemValues : ARRAY [1..4] OF DINT;
	  END_STRUCT;
#pragma pack(pop)
	  tCanOpenBasePdo : ARRAY [0..3] OF tCanOpenBasePdoMap;
	END_TYPE
END_CLASS;
#pragma define (restore)
CanOpenCyncMaster : CLASS_PUBLIC
	TYPE
	  NMT_Commands :
	  (
	    NC_Start:=1,
	    NC_Stop:=2,
	    NC_GotoPreOperational:=128,
	    NC_Reset:=129,
	    NC_ResetComm:=130
	  )$DINT;
	END_TYPE
END_CLASS;
#pragma define (restore)
Controller : CLASS_PUBLIC
	TYPE
	  _LMCCONTROLLER_SETPARAMETER :
	  (
	    _LMCCONTROLLER_PAR_SET_CYCLIC_DRIVE_ENABLED_CHECK
	  )$UDINT;
	END_TYPE
END_CLASS;
#pragma define (restore)
Curtis_Base : CLASS_PUBLIC
	TYPE
	  eCurtisDriveMode :
	  (
	    cdm_Idle,
	    cdm_TimeOut,
	    cdm_EmergencyStop,
	    cdm_Referencing,
	    cdm_Manual,
	    cdm_Auto,
	    cdm_DriveReset,
	    cdm_ExtInterlockReset
	  )$UDINT;
	  eCurtisDriveModeRequest :
	  (
	    cdmr_NoReq:=4294967295,
	    cdmr_Idle,
	    cdmr_Reference,
	    cdmr_Manual:=2,
	    cdmr_Automatic:=3,
	    cdmr_ResetDrive:=4,
	    cdmr_ResetExtInterlock:=5
	  )$DINT;
	END_TYPE
END_CLASS;
#pragma define (restore)
Curtis_AC2F : CLASS_PUBLIC
: Curtis_Base
	TYPE
	  tCurtisFault :
	  (
	    cf_NoFault:=0,
	    cf_ControllerOvercurrent:=18,
	    cf_CurrentSensorFault:=19,
	    cf_PrechargeFailed:=20,
	    cf_ControllerSevereUndertemp:=21,
	    cf_ControllerSevereOvertemp:=22,
	    cf_SevereBPlusUndervoltage:=23,
	    cf_SevereBPlusOvervoltage:=24,
	    cf_ControllerOvertempCutback:=34,
	    cf_BPlusUndervoltageCutback:=35,
	    cf_BPlusOvervoltageCutback:=36,
	    cf_5VSupplyFailure:=37,
	    cf_DigitalOut6OpenShort:=38,
	    cf_DigitalOut7OpenShort:=39,
	    cf_MotorTempHotCutback:=40,
	    cf_MotorTempSensorFault:=41,
	    cf_Coil1DriverOpenShort:=49,
	    cf_Coil2DriverOpenShort:=50,
	    cf_Coil3OpenShort:=51,
	    cf_Coil4OpenShort:=52,
	    cf_PDOpenShort:=53,
	    cf_EncoderFault:=54,
	    cf_MotorOpen:=55,
	    cf_MainContactorWelded:=56,
	    cf_MainContactorDidNotClose:=57,
	    cf_ThrottleWiperHigh:=64,
	    cf_ThrottleWiperLow:=65,
	    cf_Pot2WiperHigh:=66,
	    cf_Pot2WiperLow:=68,
	    cf_PotLowOvercurrent:=69,
	    cf_EEPROMFailure:=70,
	    cf_HPDSequencingFault:=71,
	    cf_EmerRevHPD:=72,
	    cf_ParameterChangeFault:=73,
	    cf_ExternalSupplyOutOfRange:=105,
	    cf_OSGeneral:=113,
	    cf_PDOTimeout:=114,
	    cf_StallDetected:=115,
	    cf_FaultOnOtherTractionController:=116,
	    cf_DualSevereFault:=117,
	    cf_SupervisorFault:=119,
	    cf_SupervisorIncompatible:=120,
	    cf_BadCalibrations:=130,
	    cf_DriverSupply:=131,
	    cf_MotorCharacterizationFault:=135,
	    cf_EncoderPulseCountFault:=136,
	    cf_MotorTypeFault:=137,
	    cf_VCLOSMismatch:=145,
	    cf_EMBrakeFailedToSet:=146,
	    cf_EncoderLOS:=147,
	    cf_EMRRevTimeout:=148,
	    cf_IllegalModelNumber:=152,
	    cf_DualmotorParameterMismatch:=153,
	    cf_VCLRuntimeError:=201
	  )$UDINT;
	END_TYPE
END_CLASS;
#pragma define (restore)
Curtis_Universal : CLASS_PUBLIC
	TYPE
	  eCurtisDriveMode :
	  (
	    cdm_Idle,
	    cdm_TimeOut,
	    cdm_EmergencyStop,
	    cdm_Referencing,
	    cdm_Manual,
	    cdm_Auto,
	    cdm_DriveReset,
	    cdm_ExtInterlockReset
	  )$UDINT;
	  eCurtisDriveModel :
	  (
	    Model_1232e:=1,
	    Model_AC2F:=2
	  )$UDINT;
	  eCurtisDriveModeRequest :
	  (
	    cdmr_NoReq:=4294967295,
	    cdmr_Idle,
	    cdmr_Reference,
	    cdmr_Automatic,
	    cdmr_ResetDrive,
	    cdmr_ResetExtInterlock
	  )$DINT;
	END_TYPE
END_CLASS;
#pragma define (restore)
Dana_Tm4 : CLASS_PUBLIC
	TYPE
	  tControlWord : BINT
	  [
	    1 DriveEnable,
	    2 MainContactor,
	    3 BrakeRelease,
	    4 Output_01,
	    5 Output_02,
	    6 Output_03,
	    7 Output_04,
	    8 SafeStop,
	    9 Bit9,
	    10 Bit10,
	    11 Bit11,
	    12 Bit12,
	    13 Bit13,
	    14 Bit14,
	    15 Bit15,
	    16 Reset,
	  ];
	  tStatusbyte : BSINT
	  [
	    1 PowerActive,
	    2 Fault,
	    3 TorqueMode,
	    4 ModeAnalog,
	    5 ModeCan,
	    6 ccwActive,
	    7 SafeStopActive,
	    8 ToggelBit,
	  ];
	END_TYPE
END_CLASS;
#pragma define (restore)
HAL_BMS_Base : CLASS_PUBLIC
	TYPE
	  tBMSAlarms : BDINT
	  [
	    1 ba_OverVoltage,
	    2 ba_UnderVoltage,
	    3 ba_AlmostUnderVoltage,
	    4 ba_BatteryEmpty,
	    5 ba_BatteryAlmostEmpty,
	    6 ba_InternalDefect,
	    7 ba_NoCommunication,
	    8 Bit8,
	    9 Bit9,
	    10 Bit10,
	    11 Bit11,
	    12 Bit12,
	    13 Bit13,
	    14 Bit14,
	    15 Bit15,
	    16 Bit16,
	    17 Bit17,
	    18 Bit18,
	    19 Bit19,
	    20 Bit20,
	    21 Bit21,
	    22 Bit22,
	    23 Bit23,
	    24 Bit24,
	    25 Bit25,
	    26 Bit26,
	    27 Bit27,
	    28 Bit28,
	    29 Bit29,
	    30 Bit30,
	    31 Bit31,
	    32 Bit32,
	  ];
#pragma pack(push, 1)
	  tBMSData : STRUCT
	    bd_StateOfCharge : UINT;
	    bd_TimeToGo : UINT;
	    bd_EnergyDraw : INT;
	    bd_BatteryVoltage : UINT;
	    bd_BatteryCurrent : INT;
	    bd_BatteryTemperature : INT;
	    bd_BatteryCharging : BOOL;
	    bd_BatteryLowIndication : BOOL;
	    bd_Alarm : tBMSAlarms;
	  END_STRUCT;
#pragma pack(pop)
	END_TYPE
END_CLASS;
#pragma define (restore)
HAL_BMS_MasterVolt : CLASS_PUBLIC
: HAL_BMS_Base
	TYPE
	  tHMIAdditionalIconBMS :
	  (
	    HAI_None,
	    HAI_Attention,
	    HAI_Charging
	  )$UDINT;
	END_TYPE
END_CLASS;
#pragma define (restore)
#pragma InclDefBlk Hal_Lidar_Base
Hal_Lidar_Base : CLASS_PUBLIC
	TYPE
	  eDirection :
	  (
	    d_Fwd,
	    d_Bwd
	  )$UDINT;
	  eScannerPosition :
	  (
	    sp_LeftCorner,
	    sp_Middle,
	    sp_RightCorner
	  )$UDINT;
#pragma pack(push, 1)
	  tScanFieldStatus : STRUCT
	    sfs_WarningFieldDetection : DINT;
	    sfs_StopFieldDetection : DINT;
	    sfs_EStopFieldDetection : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  tVisuData : STRUCT
	    vd_Direction : Hal_Lidar_Base::eDirection;
	    vd_StartRange : DINT;
	    vd_EndRange : DINT;
	    vd_nrOfBeams : DINT;
	    vd_Beams : ARRAY [1..MAXBEAMS] OF UINT;
	  END_STRUCT;
#pragma pack(pop)
	END_TYPE
END_CLASS;
#pragma define (restore)
HandleSteering : CLASS_PUBLIC
	TYPE
	  eDriveMode :
	  (
	    dm_Idle,
	    dm_Manual,
	    dm_Auto,
	    dm_Referencing,
	    dm_EmergencyStop
	  )$UDINT;
#pragma pack(push, 1)
	  tDriveStatus : STRUCT
	    ds_DriveMode : eDriveMode;
	    ds_Referenced : DINT;
	    ds_Setpoint : REAL;
	    ds_Actual : REAL;
	    ds_FaultCode : DINT;
	    ds_CommunicationOK : DINT;
	    ds_EstopOK : DINT;
	  END_STRUCT;
#pragma pack(pop)
	END_TYPE
END_CLASS;
#pragma define (restore)
HMIHandler : CLASS_PUBLIC
	TYPE
	  eMessageResponse :
	  (
	    mr_Idle,
	    mr_Positive,
	    mr_Negative
	  )$UDINT;
#pragma pack(push, 1)
	  tHMIMessage : STRUCT
	    hm_Enable : BOOL;
	    hm_pMessage : ^CHAR;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  tHMIMessageResponse : STRUCT
	    hmr_Enable : BOOL;
	    hmr_pMessage : ^CHAR;
	    hmr_Response : eMessageResponse;
	  END_STRUCT;
#pragma pack(pop)
	END_TYPE
END_CLASS;
#pragma define (restore)
I_LedControl : CLASS_PUBLIC
	TYPE
	  LedState :
	  (
	    LedAllOff,
	    LedRed,
	    LedRedLeft,
	    LedRedRight,
	    LedGreen,
	    LedGreenLeft,
	    LedGreenRight,
	    LedBlue,
	    LedBlueLeft,
	    LedBlueRight
	  )$UDINT;
	END_TYPE
END_CLASS;
#pragma define (restore)
I_Lift : CLASS_PUBLIC
	TYPE
	  LiftState : BDINT
	  [
	    1 OnTarget,
	    2 MovingUp,
	    3 MovingDown,
	    4 Bit4,
	    5 Bit5,
	    6 Bit6,
	    7 Bit7,
	    8 Bit8,
	    9 Bit9,
	    10 Bit10,
	    11 Bit11,
	    12 Bit12,
	    13 Bit13,
	    14 Bit14,
	    15 Bit15,
	    16 Bit16,
	    17 Bit17,
	    18 Bit18,
	    19 Bit19,
	    20 Bit20,
	    21 Bit21,
	    22 Bit22,
	    23 Bit23,
	    24 Bit24,
	    25 Bit25,
	    26 Bit26,
	    27 Bit27,
	    28 Bit28,
	    29 Bit29,
	    30 Bit30,
	    31 ReadyToUse,
	    32 InError,
	  ];
	END_TYPE
END_CLASS;
#pragma define (restore)
I_PivotWheel : CLASS_PUBLIC
	TYPE
#pragma pack(push, 1)
	  tPivotWheelParameters : STRUCT
	    pwp_DistanceToCenterX : REAL;
	    pwp_DistanceToCenterY : REAL;
	    pwp_PivotWheelReferenced : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 4)
	  tPivotWheelStatus : STRUCT
	    pws_PivotWheelExists : BOOL;
	    pws_Driving : HandleSteering::tDriveStatus;
	    pws_Steering : HandleSteering::tDriveStatus;
	  END_STRUCT;
#pragma pack(pop)
	END_TYPE
END_CLASS;
#pragma define (restore)
PivotWheel : CLASS_PUBLIC
	TYPE
#pragma pack(push, 1)
	  tPivotWheelParameters : STRUCT
	    pwp_DistanceToCenterX : REAL;
	    pwp_DistanceToCenterY : REAL;
	    pwp_PivotWheelReferenced : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 4)
	  tPivotWheelStatus : STRUCT
	    pws_PivotWheelExists : BOOL;
	    pws_Driving : HandleSteering::tDriveStatus;
	    pws_Steering : HandleSteering::tDriveStatus;
	  END_STRUCT;
#pragma pack(pop)
	END_TYPE
END_CLASS;
#pragma define (restore)
#pragma InclDefBlk KinematicNpivot
KinematicNpivot : CLASS_PUBLIC
	TYPE
	  tnPivotStatus : ARRAY [1..8] OF PivotWheel::tPivotWheelStatus;
#pragma pack(push, 1)
	  tReferenceWheelsInfo : STRUCT
	    rwi_ReferenceWheel1Angle : REAL;
	    rwi_ReferenceWheel1Speed : REAL;
	    rwi_ReferenceWheel2Angle : REAL;
	    rwi_ReferenceWheel2Speed : REAL;
	  END_STRUCT;
#pragma pack(pop)
	END_TYPE
END_CLASS;
#pragma define (restore)
MainAuxCntrl : CLASS_PUBLIC
	TYPE
	  tAuxMainStatus : BDINT
	  [
	    1 Configuration_loaded,
	    2 bit2,
	    3 AuxReady,
	    4 AgvOnpostion,
	    5 Bit5,
	    6 Bit6,
	    7 Bit7,
	    8 Bit8,
	    9 RestartRequest,
	    10 Bit10,
	    11 Bit11,
	    12 Bit12,
	    13 Bit13,
	    14 Bit14,
	    15 Bit15,
	    16 Bit16,
	    17 Bit17,
	    18 Bit18,
	    19 Bit19,
	    20 Bit20,
	    21 Bit21,
	    22 Bit22,
	    23 Bit23,
	    24 Bit24,
	    25 Bit25,
	    26 Bit26,
	    27 Bit27,
	    28 Bit28,
	    29 Bit29,
	    30 Bit30,
	    31 AuxError,
	    32 CmdError,
	  ];
	END_TYPE
END_CLASS;
#pragma define (restore)
MainFuctionCntrl : CLASS_PUBLIC
	TYPE
	  tAuxMainStatus : BDINT
	  [
	    1 Configuration_loaded,
	    2 bit2,
	    3 AuxReady,
	    4 AgvOnpostion,
	    5 Bit5,
	    6 Bit6,
	    7 Bit7,
	    8 Bit8,
	    9 RestartRequest,
	    10 Bit10,
	    11 Bit11,
	    12 Bit12,
	    13 Bit13,
	    14 Bit14,
	    15 Bit15,
	    16 Bit16,
	    17 Bit17,
	    18 Bit18,
	    19 Bit19,
	    20 Bit20,
	    21 Bit21,
	    22 Bit22,
	    23 Bit23,
	    24 Bit24,
	    25 Bit25,
	    26 Bit26,
	    27 Bit27,
	    28 Bit28,
	    29 Bit29,
	    30 Bit30,
	    31 AuxError,
	    32 CmdError,
	  ];
	END_TYPE
END_CLASS;
#pragma define (restore)
MainHardwareCntrl : CLASS_PUBLIC
	TYPE
	  tAuxMainStatus : BDINT
	  [
	    1 Configuration_loaded,
	    2 bit2,
	    3 AuxReady,
	    4 AgvOnpostion,
	    5 Bit5,
	    6 Bit6,
	    7 Bit7,
	    8 Bit8,
	    9 RestartRequest,
	    10 Bit10,
	    11 Bit11,
	    12 Bit12,
	    13 Bit13,
	    14 Bit14,
	    15 Bit15,
	    16 Bit16,
	    17 Bit17,
	    18 Bit18,
	    19 Bit19,
	    20 Bit20,
	    21 Bit21,
	    22 Bit22,
	    23 Bit23,
	    24 Bit24,
	    25 Bit25,
	    26 Bit26,
	    27 Bit27,
	    28 Bit28,
	    29 Bit29,
	    30 Bit30,
	    31 AuxError,
	    32 CmdError,
	  ];
	END_TYPE
END_CLASS;
#pragma define (restore)
MainPeripheralCntrl : CLASS_PUBLIC
	TYPE
	  tAuxMainStatus : BDINT
	  [
	    1 Configuration_loaded,
	    2 bit2,
	    3 AuxReady,
	    4 AgvOnpostion,
	    5 Bit5,
	    6 Bit6,
	    7 Bit7,
	    8 Bit8,
	    9 RestartRequest,
	    10 Bit10,
	    11 Bit11,
	    12 Bit12,
	    13 Bit13,
	    14 Bit14,
	    15 Bit15,
	    16 Bit16,
	    17 Bit17,
	    18 Bit18,
	    19 Bit19,
	    20 Bit20,
	    21 Bit21,
	    22 Bit22,
	    23 Bit23,
	    24 Bit24,
	    25 Bit25,
	    26 Bit26,
	    27 Bit27,
	    28 Bit28,
	    29 Bit29,
	    30 Bit30,
	    31 AuxError,
	    32 CmdError,
	  ];
	END_TYPE
END_CLASS;
#pragma define (restore)
MerkerEx : CLASS_PUBLIC
#include <.\lsl_st_mt.h>
	TYPE
	  Cmdm_udLength :
	  (
	    GET_DATA_PTR,
	    EXCHANGE_DATA_PTR,
	    SAVE_DATA_TO_RAMEXFILE
	  )$UINT;
	END_TYPE
END_CLASS;
#pragma define (restore)
MES_MQTT_Handler : CLASS_PUBLIC
	TYPE
#pragma pack(push, 1)
	  tAGVStatusMES : STRUCT
	    as_online : BOOL;
	    as_docking : BOOL;
	    as_manualDrive : BOOL;
	    as_brakeRelease : BOOL;
	    as_charging : BOOL;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 4)
	  _tLiftTarget : STRUCT
	    lt_x : REAL;
	    lt_y : REAL;
	    lt_radius : REAL;
	    lt_heightIn : DINT;
	    lt_heightOut : DINT;
	    lt_loadRequired : BOOL;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 4)
	  tLiftMES : STRUCT
	    l_load : BOOL;
	    l_liftHeight : DINT;
	    l_manualLift : BOOL;
	    l_target : _tLiftTarget;
	  END_STRUCT;
#pragma pack(pop)
	  _eHMIMessageResponse :
	  (
	    hms_IDLE,
	    hms_OK,
	    hms_CANCEL
	  )$UDINT;
#pragma pack(push, 1)
	  tPubHMIMessageMES : STRUCT
	    enable : BOOL;
	    pMessage : ^CHAR;
	    response : _eHMIMessageResponse;
	  END_STRUCT;
#pragma pack(pop)
	END_TYPE
END_CLASS;
#pragma define (restore)
MQTTBackgroundWorker : CLASS_PUBLIC
	TYPE
	  t_e_WorkerState :
	  (
	    WS_Init,
	    WS_Ready,
	    WS_ResolvingHostname,
	    WS_WaitForResolving
	  )$UDINT;
	END_TYPE
END_CLASS;
#pragma define (restore)
MQTTPacketQueue : CLASS_PUBLIC
	TYPE
#pragma pack(push, 1)
	  t_s_Packet : STRUCT
	    pData : ^void;
	    udDataSize : UDINT;
	    pPayload : ^void;
	    udPayloadSize : UDINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  t_s_PacketEntry : STRUCT
	    udWriteOffset : UDINT;
	    bLocked : BOOL;
	    dID : DINT;
	    PacketData : t_s_Packet;
	    pCBThis : ^void;
	    pCBMeth : ^void;
	    Direction : DINT;
	    MsgType : DINT;
	  END_STRUCT;
#pragma pack(pop)
	END_TYPE
END_CLASS;
#pragma define (restore)
MQTTClient : CLASS_PUBLIC
#include "..\Class\MQTTClient\MQTTClient_LogTexts.h"
	TYPE
	  t_e_MQTTClientStates :
	  (
	    MCS_Initialise,
	    MCS_Connect,
	    MCS_Connected,
	    MCS_Reconnect,
	    MCS_Disconnect,
	    MCS_Error
	  )$UDINT;
	  t_e_MQTTControlPackets :
	  (
	    MCP_CONNECT,
	    MCP_CONNACK,
	    MCP_PUBLISH,
	    MCP_PUBACK,
	    MCP_PUBREC,
	    MCP_PUBREL,
	    MCP_PUBCOMP,
	    MCP_SUBSCRIBE,
	    MCP_SUBACK,
	    MCP_UNSUBSCRIBE,
	    MCP_UNSUBACK,
	    MCP_PINGREQ,
	    MCP_PINGRESP,
	    MCP_DISCONNECT,
	    MCP_UNKNOWN
	  )$UDINT;
	  t_e_MQTTErrors :
	  (
	    MQTT_ERR_CONN_PENDING:=4294967295,
	    MQTT_ERR_SUCCESS:=0,
	    MQTT_ERR_NOMEM:=1,
	    MQTT_ERR_PROTOCOL:=2,
	    MQTT_ERR_INVAL:=3,
	    MQTT_ERR_NO_CONN:=4,
	    MQTT_ERR_CONN_REFUSED:=5,
	    MQTT_ERR_NOT_FOUND:=6,
	    MQTT_ERR_CONN_LOST:=7,
	    MQTT_ERR_TLS:=8,
	    MQTT_ERR_PAYLOAD_SIZE:=9,
	    MQTT_ERR_NOT_SUPPORTED:=10,
	    MQTT_ERR_AUTH:=11,
	    MQTT_ERR_ACL_DENIED:=12,
	    MQTT_ERR_UNKNOWN:=13,
	    MQTT_ERR_ERRNO:=14,
	    MQTT_ERR_EAI:=15,
	    MQTT_ERR_PROXY:=16,
	    MQTT_ERR_PLUGIN_DEFER:=17,
	    MQTT_ERR_MALFORMED_UTF8:=18,
	    MQTT_ERR_KEEPALIVE:=19,
	    MQTT_ERR_LOOKUP:=20,
	    MQTT_ERR_ALREADY_SUB:=21
	  )$INT;
#pragma pack(push, 1)
	  t_s_MQTTMessage : STRUCT
	    mid : INT;
	    topic : ^UINT;
	    payload : ^void;
	    payloadlen : UDINT;
	    qos : INT;
	    bRetain : BOOL;
	  END_STRUCT;
#pragma pack(pop)
	END_TYPE
END_CLASS;
#pragma define (restore)
MQTTClient_Interface : CLASS_PUBLIC
#include "..\Class\MQTTClient_Interface\MQTTClientInterface_LogTexts.h"
	TYPE
	  t_bd_LogConfig : BDINT
	  [
	    1 Log_Info,
	    2 Log_Notice,
	    3 Log_Warning,
	    4 Log_Error,
	    5 Log_Debug,
	    6 Log_Subscribe,
	    7 Log_Unsubscribe,
	    8 Log_WebSockets,
	    9 Bit9,
	    10 Bit10,
	    11 Bit11,
	    12 Bit12,
	    13 Bit13,
	    14 Bit14,
	    15 Bit15,
	    16 Bit16,
	    17 Bit17,
	    18 Bit18,
	    19 Bit19,
	    20 Bit20,
	    21 Bit21,
	    22 Bit22,
	    23 Bit23,
	    24 Bit24,
	    25 Bit25,
	    26 Bit26,
	    27 Bit27,
	    28 Bit28,
	    29 Bit29,
	    30 Bit30,
	    31 Bit31,
	    32 Bit32,
	  ];
	  t_e_ConfigParameters :
	  (
	    CP_DataMap_SendOnAdd
	  )$UDINT;
	  t_e_DataMap_DataTypes :
	  (
	    DD_Unknown,
	    DD_UDINT,
	    DD_DINT,
	    DD_REAL,
	    DD_String
	  )$UDINT;
	  t_e_DataMap_ElementTypes :
	  (
	    DM_Publish,
	    DM_Subscribe
	  )$UDINT;
	  t_e_DataMap_Operations :
	  (
	    DO_Unknown,
	    DO_Poll,
	    DO_Change,
	    DO_Subscribe
	  )$UDINT;
	  t_e_DataMap_RetCode :
	  (
	    DM_OK:=0,
	    DM_TopicNameTooLong:=4294967295,
	    DM_ElementNameTooLong:=4294967294,
	    DM_ListFull:=4294967293,
	    DM_ElementNotFound:=4294967292,
	    DM_InputValueError:=4294967291
	  )$DINT;
	  t_e_MQTTClientStates :
	  (
	    MCIS_Ready:=0,
	    MCIS_Initialise:=1,
	    MCIS_Prepare,
	    MCIS_WaitForConnection,
	    MCIS_Reconnecting,
	    MCIS_Connected,
	    MCIS_Error
	  )$UDINT;
	  t_e_PubSubRetCodes :
	  (
	    PSRC_Subscribed,
	    PSRC_Unsubscribed,
	    PSRC_PublishReceived,
	    PSRC_Published,
	    PSRC_Disconnected
	  )$UDINT;
	END_TYPE
END_CLASS;
#pragma define (restore)
MQTTClient_Interface_ConfigBase : CLASS_PUBLIC
	TYPE
#pragma pack(push, 1)
	  t_s_Authentication : STRUCT
	    username : ^UINT;
	    password : ^UINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  t_s_ClientID : STRUCT
	    ClientID : ^UINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  t_s_ConnectionParameters : STRUCT
	    hostname : ^UINT;
	    port : INT;
	    keepalive : INT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  t_s_MaxInflightMessages : STRUCT
	    max_inflight_messages : INT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  t_s_ReconnectionParameters : STRUCT
	    min_interval : INT;
	    max_interval : INT;
	    exponential_scale : BOOL;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  t_s_TLS : STRUCT
	    cafile : ^CHAR;
	    certfile : ^CHAR;
	    keyfile : ^CHAR;
	    pw : ^CHAR;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  t_s_Will : STRUCT
	    topic : ^UINT;
	    payloadtext : ^CHAR;
	    qos : INT;
	    bRetain : BOOL;
	  END_STRUCT;
#pragma pack(pop)
	END_TYPE
END_CLASS;
#pragma define (restore)
MQTTTopic : CLASS_PUBLIC
#include "..\Class\MQTTTopic\MQTTTopic_LogTexts.h"
	TYPE
	  t_e_ConfigParameters :
	  (
	    CP_SendAtStart
	  )$UDINT;
	  t_e_MQTT_TopicState :
	  (
	    MTS_Init,
	    MTS_WaitForConnection,
	    MTS_Ready,
	    MTS_Subscribe,
	    MTS_WaitForSubscribe,
	    MTS_Subscribed,
	    MTS_Unsubscribe,
	    MTS_WaitForUnsubscribe,
	    MTS_Unsubscribed,
	    MTS_WaitForPublishInterval,
	    MTS_WaitForPublishDataChange,
	    MTS_WaitForPublishCommand,
	    MTS_Publish,
	    MTS_WaitForPublishDone,
	    MTS_Error,
	    MTS_Error_WaitForReset
	  )$UDINT;
	  t_e_MQTT_TopicType :
	  (
	    MT_Deactivated,
	    MT_Subscribe,
	    MT_Publish_Poll,
	    MT_Publish_OnChange,
	    MT_Publish_Manual
	  )$UDINT;
#pragma pack(push, 1)
	  t_s_MQTT_TopicTimeouts : STRUCT
	    udSubscribeTimeout : UDINT;
	    udUnsubscribeTimeout : UDINT;
	    udPublishTimeout : UDINT;
	  END_STRUCT;
#pragma pack(pop)
	END_TYPE
END_CLASS;
#pragma define (restore)
NavitecInterface : CLASS_PUBLIC
	TYPE
#pragma pack(push, 1)
	  _tnavitrolStatusGeneral : STRUCT
	    nsg_SectionID : UINT;
	    nsg_SectionLength : UDINT;
	    nsg_BatteryVoltage : REAL;
	    nsg_OnRoute : UINT;
	  END_STRUCT;
#pragma pack(pop)
	END_TYPE
END_CLASS;
#pragma define (restore)
RiwoDateTime : CLASS_PUBLIC
	TYPE
#pragma pack(push, 1)
	  tDAT_DateAndTime : STRUCT
	    DAT_Date : SYSDATE;
	    DAT_Time : SYSTIME;
	  END_STRUCT;
#pragma pack(pop)
	  tDLSday :
	  (
	    DayOfMonth_1:=1,
	    DayOfMonth_2:=2,
	    DayOfMonth_3:=3,
	    DayOfMonth_4:=4,
	    DayOfMonth_5:=5,
	    DayOfMonth_6:=6,
	    DayOfMonth_7:=7,
	    DayOfMonth_8:=8,
	    DayOfMonth_9:=9,
	    DayOfMonth_10:=10,
	    DayOfMonth_11:=11,
	    DayOfMonth_12:=12,
	    DayOfMonth_13:=13,
	    DayOfMonth_14:=14,
	    DayOfMonth_15:=15,
	    DayOfMonth_16:=16,
	    DayOfMonth_17:=17,
	    DayOfMonth_18:=18,
	    DayOfMonth_19:=19,
	    DayOfMonth_20:=20,
	    DayOfMonth_21:=21,
	    DayOfMonth_22:=22,
	    DayOfMonth_23:=23,
	    DayOfMonth_24:=24,
	    DayOfMonth_25:=25,
	    DayOfMonth_26:=26,
	    DayOfMonth_27:=27,
	    DayOfMonth_28:=28,
	    DayOfMonth_29:=29,
	    DayOfMonth_30:=30,
	    DayOfMonth_31:=31,
	    DayOfWeek_Sunday:=100,
	    DayOfWeek_Monday:=101,
	    DayOfWeek_Tuesday:=102,
	    DayOfWeek_Wednesday:=103,
	    DayOfWeek_Thursday:=104,
	    DayOfWeek_Friday:=105,
	    DayOfWeek_Saturday:=106
	  )$UDINT;
	  tDLSTimeType :
	  (
	    CalculateByUTCTime,
	    CalculateByLocalTime,
	    CalculateByUTCFixedDate,
	    CalculateByLocalFixedDate
	  )$UDINT;
	  tDLSWeekOption :
	  (
	    FirstWeekOfTheMonth:=0,
	    SecondWeekOfTheMonth:=1,
	    ThirdWeekOfTheMonth:=2,
	    FourthWeekOfTheMonth:=3,
	    LastWeekOfTheMonth:=4
	  )$UDINT;
	END_TYPE
END_CLASS;
#pragma define (restore)
RiwoParamAlarm : CLASS_PUBLIC
	TYPE
	  eAlarmLevel :
	  (
	    eal_Error,
	    eal_Warning,
	    eal_Info
	  )$UDINT;
	  eAlarmReport :
	  (
	    ear_No,
	    ear_Yes
	  )$UDINT;
	END_TYPE
END_CLASS;
#pragma define (restore)
SafetyCDIAS_Base : CLASS_PUBLIC
#include "..\Class\SafetyCDIAS_Base\SafetyCDIAS_Base.h"
#include "..\Source\interfaces\lsl_st_safety.h"
#include "..\Class\SafetyManager\SafetyManager.h"
	TYPE
	  FrameTypeType : BSINT
	  [
	    1 Cfg,
	    2 ToP,
	    3 Standard,
	    4 PDO,
	    5 TDO,
	    6 Reserved1,
	    7 Reserved2,
	    8 Response,
	  ];
#pragma pack(push, 1)
	  SDOStdHeader : STRUCT
	    CRC : UDINT;
	    Cmd : USINT;
	    Typ : FrameTypeType;
	    SeqNr : USINT;
	    Len : USINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  SDOHeader : STRUCT
	    StdHeader : SDOStdHeader;
	    SrcAdr : HDINT;
	    DstAdr : HDINT;
	    SessId : UDINT;
	  END_STRUCT;
#pragma pack(pop)
	END_TYPE
END_CLASS;
#pragma define (restore)
SafetyUDP : CLASS_PUBLIC
	TYPE
	  _FSM_UDP_ERROR :
	  (
	    _NO_ERROR_UDP_ERROR:=0,
	    _INIT_TCP_USER_UDP_ERROR:=4294967295,
	    _NO_IP_ADDRESS_UDP_ERROR:=4294967294,
	    _NO_MEMORY_SOCKET_UDP_ERROR:=4294967293,
	    _NO_MEMORY_SENDBUFFER_UDP_ERROR:=4294967292,
	    _INVALID_HANDLE_UDP_ERROR:=4294967291,
	    _SHUTDOWN_UDP_ERROR:=4294967290,
	    _CLOSESOCKET_UDP_ERROR:=4294967289,
	    _ALLOCATE_SOCKET_UDP_ERROR:=4294967288,
	    _SET_BIND_UDP_ERROR:=4294967287,
	    _RECV_UDP_ERROR:=4294967286,
	    _SEND_UDP_ERROR:=4294967285,
	    _NO_LOCAL_IP_UDP_ERROR:=4294967284,
	    _NO_DESTINATION_IP_UDP_ERROR:=4294967283,
	    _INVALID_UDP_PORT_UDP_ERROR,
	    _INVALID_INTERFACE_NUMBER_UDP_ERROR,
	    _NO_MEMORY_RECEIVE_BUFFER_UDP_ERROR,
	    _NO_MEMORY_CONNECTION_BUFFER_UDP_ERROR
	  )$DINT;
	  _FSM_UDP_USER :
	  (
	    _STATE_INIT_UDP,
	    _STATE_IDLE_UDP,
	    _STATE_SOCK_UDP,
	    _STATE_CONNECT_UDP,
	    _STATE_ONLY_SEND_UDP,
	    _STATE_RECV_UDP,
	    _STATE_SEND_UDP,
	    _STATE_SHUTDOWN_UDP,
	    _STATE_CLOSE_SOCK_UDP,
	    _STATE_ERROR_UDP
	  )$UDINT;
	  _INITSTEPS :
	  (
	    _NO_OPERATION,
	    _ADD_SOCKET,
	    _CHECK_IF_SOCKET_OPEN,
	    _BIND_SOCKET,
	    _CLOSE_CON
	  )$UDINT;
	END_TYPE
END_CLASS;
#pragma define (restore)
#pragma InclDefBlk SdiasBase
SdiasBase : CLASS_PUBLIC
#include "..\Class\SdiasManager\SdiasManager.h"
#include "..\Class\SdiasBase\SdiasBase.h"
#include "..\Class\HwControl\HwControl.h"
#include "..\Source\interfaces\lsl_st_hardwaretree.h"
#include "..\Source\interfaces\lsl_st_mt.h"
	TYPE
	  t_b_SdiasFWState : BINT
	  [
	    1 VoltageNotOk,
	    2 NoSync,
	    3 FlashDataCRCError,
	    4 RAMDataCRCError,
	    5 FlashUnsafe,
	    6 BusTimeNotSupported,
	    7 ToggleBit,
	  ];
#pragma pack(push, 1)
	  t_s_SdiasFWStateStandard : STRUCT
	    ErrorBits : t_b_SdiasFWState;
	    Reserved : UINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  t_s_SPI_AccessControl : STRUCT
	    udAccessHandle : UDINT;
	    usAccessLength : USINT;
	    usAccessOffset : USINT;
	    pControlByte : t_SDIAS_pControlByte;
	    pStateByte : t_SDIAS_pStateByte;
	  END_STRUCT;
#pragma pack(pop)
	  t_SPI_PDO_DataWrite : ARRAY [0..SDIAS_MAX_PDO_SIZE-1] OF USINT;
	  t_SPI_PDO_DataRead : ARRAY [0..SDIAS_MAX_PDO_SIZE-1] OF USINT;
	  t_e_SPIWriteSSW :
	  (
	    _SPIWrite_Idle,
	    _AllocateMemory,
	    _SetRequest,
	    _ReadGrant,
	    _ReadSectorData_SetPageAddress,
	    _ReadSectorData_Wait4SetPageAddress,
	    _ReadSectorData_SetReadPageCommand,
	    _ReadSectorData_Wait4SetReadPageCommand,
	    _ReadSectorData_ReadReceiveBufferPart1,
	    _ReadSectorData_ReadReceiveBufferPart2,
	    _EraseSector_SetPageAddress,
	    _EraseSector_Wait4SetPageAddress,
	    _EraseSector_SetEraseSectorCommand,
	    _EraseSector_Wait4SetEraseSectorCommand,
	    _WriteSectorData_SetPageAddress,
	    _WriteSectorData_Wait4SetPageAddress,
	    _WriteSectorData_WriteTransmitBufferPart1,
	    _WriteSectorData_WriteTransmitBufferPart2,
	    _WriteSectorData_SetWritePageCommand,
	    _WriteSectorData_Wait4SetWritePageCommand,
	    _VerifySectorData_SetPageAddress,
	    _VerifySectorData_Wait4SetPageAddress,
	    _VerifySectorData_SetReadPageCommand,
	    _VerifySectorData_Wait4SetReadPageCommand,
	    _VerifySectorData_ReadReceiveBufferPart1,
	    _VerifySectorData_ReadReceiveBufferPart2,
	    _VerifySectorData_CompareData,
	    _ClearRequest,
	    _DisableDataObjects,
	    _FreeMemory,
	    _FinishSPIWrite
	  )$UDINT;
	  usWriteModes : USINT;
#pragma pack(push, 1)
	  t_s_SPIWriteVars : STRUCT
	    sWriteAccess : t_s_SPI_AccessControl;
	    pWriteData : ^t_SPI_PDO_DataWrite;
	    sReadAccess : t_s_SPI_AccessControl;
	    pReadData : ^t_SPI_PDO_DataRead;
	    sReadStateAccess : t_s_SPI_AccessControl;
	    pReadStateData : ^USINT;
	    pSectorMemoryRead : ^USINT;
	    pSectorMemoryWrite : ^USINT;
	    pSectorMemoryVerify : ^USINT;
	    pUserWriteData : ^USINT;
	    udUserWriteLength : UDINT;
	    usUserSectorNumber : USINT;
	    usUserPageNumber : USINT;
	    usUserPageOffset : USINT;
	    eSPIWriteSSW : t_e_SPIWriteSSW;
	    eSPIWriteSSWError : t_e_SPIWriteSSW;
	    uiCurrentPage : UINT;
	    udCurrentSectorMemoryOffset : UDINT;
	    usRetryCnt : USINT;
	    bsFinished : BSINT
	    [
	      1 Finished,
	      2 Error,
	      3 Bit3,
	      4 Bit4,
	      5 Bit5,
	      6 Bit6,
	      7 Bit7,
	      8 Bit8,
	    ];
	    usCycleWaitCnt : USINT;
	    udTimeout : UDINT;
	    NotReadyCnt : DINT;
	    usFinishedWriteLog : USINT;
	    usWriteMode : usWriteModes;
	    udMemoryToAllocate : UDINT;
	    uiLastPage : UINT;
	    udUserDataOffset : DINT;
	  END_STRUCT;
#pragma pack(pop)
	END_TYPE
END_CLASS;
#pragma define (restore)
#pragma InclDefBlk Standard
Standard : CLASS_PUBLIC
	TYPE
	  _eSafetyFieldOptions :
	  (
	    sfo_None,
	    sfo_DockingMode,
	    sfo_ManualMode,
	    sfo_ChargerLocation
	  )$UDINT;
	  eAGVMode :
	  (
	    am_Manual:=1,
	    am_Auto:=2,
	    am_SemiAuto:=3
	  )$DINT;
	  eAGVMovementMode :
	  (
	    amm_FastMovement,
	    amm_NormalMovement,
	    amm_SlowMovement,
	    amm_NoMovement
	  )$UDINT;
	  eEstopStatus :
	  (
	    es_Clear,
	    es_Pressed,
	    es_PendingReset
	  )$UDINT;
	  eMasterState :
	  (
	    ms_Undefined,
	    ms_StartState,
	    ms_StandbyState,
	    ms_AutoState,
	    ms_FstopState,
	    ms_LoadState,
	    ms_HoldState,
	    ms_ManualState,
	    ms_PauseState
	  )$UDINT;
	  eProductionStatus :
	  (
	    ps_Idle,
	    ps_InProduction,
	    ps_NotInProduction
	  )$UDINT;
#pragma pack(push, 1)
	  tCustomAttributeMaster : STRUCT
	    Value : REAL;
	    Name : ARRAY [0..32] OF CHAR;
	  END_STRUCT;
#pragma pack(pop)
	  tCustomAttributesMaster : ARRAY [1..5] OF tCustomAttributeMaster;
#pragma pack(push, 1)
	  tMasterCurrentStatus : STRUCT
	    mcs_MasterState : eMasterState;
	    mcs_AGVX : REAL;
	    mcs_AGVY : REAL;
	    mcs_AGVAngle : REAL;
	    mcs_AGVLevel : DINT;
	    mcs_AGVSpeed : REAL;
	    mcs_PositionInitializeStatus : BOOL;
	    mcs_PositionConfidence : DINT;
	    mcs_ErrorStatus : BOOL;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  tMasterStatusControl : STRUCT
	    msc_Error : DINT;
	    msc_ControlEnable : DINT;
	    msc_BrakeRelease : DINT;
	  END_STRUCT;
#pragma pack(pop)
	  tRemoteControlInputs : BDINT
	  [
	    1 rci_Reference,
	    2 rci_Up,
	    3 rci_Down,
	    4 rci_Reset,
	    5 rci_SlowMode,
	    6 rci_FastMode,
	    7 rci_NormalMode,
	    8 rci_OverruleSafetyFields,
	    9 rci_SwitchModeRequest,
	    10 Bit10,
	    11 Bit11,
	    12 Bit12,
	    13 Bit13,
	    14 Bit14,
	    15 Bit15,
	    16 Bit16,
	    17 Bit17,
	    18 Bit18,
	    19 Bit19,
	    20 Bit20,
	    21 Bit21,
	    22 Bit22,
	    23 Bit23,
	    24 Bit24,
	    25 Bit25,
	    26 Bit26,
	    27 Bit27,
	    28 Bit28,
	    29 Bit29,
	    30 Bit30,
	    31 Bit31,
	    32 Bit32,
	  ];
#pragma pack(push, 1)
	  tRouteInformation : STRUCT
	    ri_TargetPositionID : UDINT;
	    ri_TargetReached : BOOL;
	    ri_TargetPositionName : ARRAY [0..31] OF CHAR;
	    ri_OriginPositionName : ARRAY [0..31] OF CHAR;
	  END_STRUCT;
#pragma pack(pop)
	  tSafetyScannerFieldStatus :
	  (
	    ssf_Clear,
	    ssf_Warning,
	    ssf_Stop,
	    ssf_Estop
	  )$UDINT;
#pragma pack(push, 1)
	  tSafetyStatus : STRUCT
	    ss_Scanner1 : tSafetyScannerFieldStatus;
	    ss_Scanner2 : tSafetyScannerFieldStatus;
	    ss_Scanner3 : tSafetyScannerFieldStatus;
	    ss_OverhangScanner : BOOL;
	    ss_ForkCollision : BOOL;
	    ss_Estop : eEstopStatus;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  tStateData : STRUCT
	    sd_AGVMode : eAGVMode;
	    sd_GeneralAlarm : BOOL;
	    sd_GeneralWarning : DINT;
	    sd_EStopActive : BOOL;
	    sd_BrakeReleased : BOOL;
	    sd_ReadyForAutomaticControl : BOOL;
	    sd_WaitingForTask : BOOL;
	    sd_StartingToDrive : BOOL;
	    sd_PrecautionNotification : BOOL;
	    sd_DockingModeActive : BOOL;
	    sd_Charging : BOOL;
	    sd_InProduction : eProductionStatus;
	    sd_AGVMovementMode : eAGVMovementMode;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  tVirtualTagsMaster : STRUCT
	    vtm_TagActive : BOOL;
	    vtm_ValueTag1 : UDINT;
	    vtm_ValueTag2 : UDINT;
	  END_STRUCT;
#pragma pack(pop)
	END_TYPE
END_CLASS;
#pragma define (restore)
VirtualBaseInit : CLASS_PUBLIC
	TYPE
	  CmdData :
	  (
	    GET_ADD_INFO,
	    READ_DATA,
	    WRITE_DATA,
	    READ_DATA_OFF,
	    WRITE_DATA_OFF
	  )$UINT;
	END_TYPE
END_CLASS;
#pragma define (restore)

#RE_IN_DE
