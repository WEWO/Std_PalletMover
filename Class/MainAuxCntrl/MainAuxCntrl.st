//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "MainAuxCntrl"
	Revision           = "0.0"
	GUID               = "{2D358A37-993D-4CFE-997A-26E94D35485F}"
	RealtimeTask       = "false"
	CyclicTask         = "true"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(810,180)">
	<Channels>
		<Server Name="AuxMainControl" GUID="{6C20A0FA-5FFE-472A-870B-449D4A4D383F}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false"/>
	</Channels>
	<Network Name="MainAuxCntrl">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "_base"
				GUID       = "{95351F4E-C8F1-4B37-90C8-FC11E952AD9F}"
				Class      = "LinkedListControlBase"
				Position   = "(218,120)"
				Visualized = "false">
				<Channels>
					<Server Name="NumberOfPeripherals"/>
					<Server Name="ToObject"/>
					<Client Name="op_LogData"/>
					<Client Name="p_FirstObject"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.ToObject" Destination="_base.ToObject" Vertices="(1216,210),(1044,210),"/>
			<Connection Source="this.NumberOfPeripherals" Destination="_base.NumberOfPeripherals" Vertices="(1216,270),(1044,270),"/>
			<Connection Source="_base.p_FirstObject" Destination="this.p_FirstObject" Vertices="(218,270),(90,270),(38,270),"/>
			<Connection Source="_base.op_LogData" Destination="this.op_LogData" Vertices="(218,210),(38,210),"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
#pragma using LinkedListControlBase

MainAuxCntrl : CLASS
: LinkedListControlBase
	TYPE
	  tAuxMainStatus : BDINT  //! <Type Public="true" Name="tAuxMainStatus"/>
	  [
	    1 Configuration_loaded,
	    2 bit2,
	    3 AuxReady,
	    4 AgvOnpostion,
	    5 Bit5,
	    6 Bit6,
	    7 Bit7,
	    8 Bit8,
	    9 RestartRequest,
	    10 Bit10,
	    11 Bit11,
	    12 Bit12,
	    13 Bit13,
	    14 Bit14,
	    15 Bit15,
	    16 Bit16,
	    17 Bit17,
	    18 Bit18,
	    19 Bit19,
	    20 Bit20,
	    21 Bit21,
	    22 Bit22,
	    23 Bit23,
	    24 Bit24,
	    25 Bit25,
	    26 Bit26,
	    27 Bit27,
	    28 Bit28,
	    29 Bit29,
	    30 Bit30,
	    31 AuxError,
	    32 CmdError,
	  ];
	  tAuxStateHandeling :
	  (
	    StartState,
	    Runstate,
	    CleanupState,
	    ExitState
	  )$UDINT;
	END_TYPE
  //Servers:
	AuxMainControl 	: SvrCh_gt_AgvMainAux;
  //Clients:
  //Variables:
		ReqAuxMainControl 	: gt_AgvMainAux;
		ActualState 	: gt_AgvHandleState;
		CurAuxMainControl 	: gt_AgvMainAux;
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL Init;
	
	FUNCTION VIRTUAL GLOBAL CyWork
		VAR_INPUT
			EAX 	: UDINT;
		END_VAR
		VAR_OUTPUT
			state (EAX) 	: UDINT := READY;
		END_VAR;
	
	FUNCTION HandleMainConfiguration;
	
	FUNCTION HandleMainSettings;
	
	FUNCTION HandleMainStartUp;
	
	FUNCTION HandleMainOperational;
	
	FUNCTION GLOBAL HandleMainState
		VAR_OUTPUT
			RetValue 	: BOOL;
		END_VAR;
	
	FUNCTION ProcessMainError
		VAR_INPUT
			ErrorNumber 	: UDINT;
		END_VAR;
	
	FUNCTION MainAuxLoop;
	
	FUNCTION GetMainError
		VAR_OUTPUT
			Retvalue 	: BOOL;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL AuxMainControl::Read
		VAR_OUTPUT
			output (EAX) 	: gt_AgvMainAux;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL AuxMainControl::Write
		VAR_INPUT
			input (EAX) 	: gt_AgvMainAux;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: gt_AgvMainAux;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB MainAuxCntrl::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_MAINAUXCNTRL
0$UINT, 0$UINT, (SIZEOF(::MainAuxCntrl))$UINT, 
1$UINT, 0$UINT, 0$UINT, 
TO_UDINT(988640718), "MainAuxCntrl", //Class
TO_UDINT(2398870984), "LinkedListControlBase", 0$UINT, 11$UINT, //Baseclass
//Servers:
(::MainAuxCntrl.AuxMainControl.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1320130314), "AuxMainControl", 
//Clients:
END_FUNCTION


#define USER_CNT_MainAuxCntrl 12

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_MainAuxCntrl] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION MainAuxCntrl::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
		nCmdSize	: UINT;
	END_VAR

	ret_code	:= LinkedListControlBase::@STD();
	IF ret_code <> C_OK THEN
		RETURN;
	END_IF;
	nCmdSize		:= WewoBase::ToObject.pMeth^.nCmds$UINT*SIZEOF(pVoid) + CMDMETH.Init;

	_memcpy((#vmt.CmdTable)$^USINT, WewoBase::ToObject.pMeth, nCmdSize);
	vmt.CmdTable.nCmds		:= nSTDCMD + USER_CNT_MainAuxCntrl;
	vmt.CmdTable.Init		:= #Init();
	vmt.CmdTable.CyWork		:= #CyWork();
	WewoBase::ToObject.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF WewoBase::ToObject.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	AuxMainControl.pMeth			:= StoreMethod( #AuxMainControl::Read(), #AuxMainControl::Write() );
	IF AuxMainControl.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION
#pragma using LinkedObjectBase
#pragma using AuxBase

FUNCTION VIRTUAL GLOBAL MainAuxCntrl::Init

   LinkedListControlBase::Init();
   p_FirstObject:=p_FirstObject.Read();
   
    
   if (initCnt >= 12) then
    
  end_if;

END_FUNCTION

FUNCTION VIRTUAL GLOBAL MainAuxCntrl::CyWork
	VAR_INPUT
		EAX 	: UDINT;
	END_VAR
	VAR_OUTPUT
		state (EAX) 	: UDINT;(* := READY *)
	END_VAR
    
    
    MainAuxLoop();
    
  
END_FUNCTION




FUNCTION VIRTUAL GLOBAL MainAuxCntrl::AuxMainControl::Write
	VAR_INPUT
		input (EAX) 	: gt_AgvMainAux;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: gt_AgvMainAux;
	END_VAR

	AuxMainControl := input;
    ReqAuxMainControl := AuxMainControl;
	result := AuxMainControl;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL MainAuxCntrl::AuxMainControl::Read
	VAR_OUTPUT
		output (EAX) 	: gt_AgvMainAux;
	END_VAR

	output := AuxMainControl;

END_FUNCTION


FUNCTION GLOBAL MainAuxCntrl::HandleMainState
	VAR_OUTPUT
		RetValue 	: BOOL;
	END_VAR
 VAR
  	    p_object          : pVoid;             // pointer to AuxBase
        ReadyCounter : dint;
        Objcounter      : dint;
    END_VAR
    
    ReadyCounter := 0;
    objcounter      := 0;
    p_object          := GetFirstObject();
    
    while (p_object <> NIL) do
        Objcounter +=1 ;
        // pre action
        case ActualState of
            gt_AgvHandleState::HandleOperational:
                if  p_object^$AuxBase.configStatus() = 1 then
                    p_object^$AuxBase.HandleOperational();
                else
                    p_object^$AuxBase.HandleDisabled(); 
                end_if;
                
            gt_AgvHandleState::HandleStartUp:
               if p_object^$AuxBase.HandleStartUp() = true then
                    ReadyCounter += 1;
                end_if;
        
            gt_AgvHandleState::HandleConfiguration:
               if  p_object^$AuxBase.Handleconfiguration() = true then
                    ReadyCounter += 1;
                end_if;

         end_case;   
     
        // Post action
     
       ProcessMainError(p_object^$AuxBase.GetActuelErrorWarning());
        
     p_object := p_object^$AuxBase.GetNextObjectPtr();
  end_while;
 
 if objcounter = Readycounter then
    RetValue := true;
    else
    RetValue := false;
  end_if;
 
END_FUNCTION


FUNCTION MainAuxCntrl::ProcessMainError
	VAR_INPUT
		ErrorNumber 	: UDINT;
	END_VAR

END_FUNCTION


FUNCTION MainAuxCntrl::MainAuxLoop
  // Check if step change is posible.
   
    if (ReqAuxMainControl <> CurAuxMainControl)  then
      CurAuxMainControl := ReqAuxMainControl;    
    end_if;
    
    
    Case CurAuxMainControl of
        
        AuxMainConfig:
            ActualState := HandleConfiguration;
            if  HandleMainState() = true then
                if GetMainError() = false then
                    AuxMainControl := AuxMainIdle;
                    else
                    AuxMainControl := AuxMainError;
                end_if;
            end_if;
        
        AuxMainStartUp:
            ActualState :=HandleStartUp;
             if  HandleMainState() = true then
                if GetMainError() = false then
                    AuxMainControl := AuxMainIdle;
                    else
                    AuxMainControl := AuxMainError;
                end_if;
            end_if;
        
        AuxMainOperational:
            ActualState := HandleOperational;
            HandleMainState();
        
        AuxMainIdle:
        
        
        AuxMainError:
        
        
        
    end_case;

   
    
   
END_FUNCTION


FUNCTION MainAuxCntrl::GetMainError
	VAR_OUTPUT
		Retvalue 	: BOOL;
	END_VAR
    
    Retvalue := false;

END_FUNCTION
