//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "WewoBase"
	Revision           = "0.29"
	GUID               = "{FEBAAD3A-56B0-4A2D-946D-EBEB7849F8EC}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(450,120)"
	Comment            = "SafanBase&#13;&#10;Basic definition used by each (Safan) Object.&#13;&#10;&#13;&#10;Note:&#13;&#10;SafanBase has always a background task enabled but default cyclic time is set to off so it is&apos;nt used.&#13;&#10;&#13;&#10;Reason for this:&#13;&#10;If a base class does not have a background task enabled a child class can&apos;t have it also.&#13;&#10;For cyclic and realtime tasks this restriction is not applicable.">
	<Channels>
		<Server Name="m_Id" GUID="{AAB7581E-3B92-42E8-9287-D9BCBCF7E8ED}" Visualized="false" Initialize="true" WriteProtected="false" Retentive="false" Comment="An identification number of this object.&#13;&#10;&#13;&#10;Free to use/define by derived classes and application.&#13;&#10;"/>
		<Server Name="m_p_Name" GUID="{33AD7665-E336-4A23-BACF-BD56E31FDC73}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false" Comment="Name of this object.&#13;&#10;String is closed by an end of sting character (value 0) &#13;&#10;String is read only!"/>
		<Server Name="o_ErrorWarningStatus" GUID="{71D405E1-73D5-4283-95DF-BAB38DCB9D0B}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false" Comment="Actual active Error or Warning status.&#13;&#10;&#13;&#10;A lower level message will not overwite an active higher level message.&#13;&#10;for example a warning will not overwrite this server if it has already an active error&#13;&#10;&#13;&#10;Note: see also internal variable FirstError &#13;&#10;to find the first error detected since last &#13;&#10;error handling."/>
		<Server Name="ObjectStatus" GUID="{A29E2DB3-B7AD-4363-A726-DB93BF808383}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false" Comment="Generic object status interface.&#13;&#10;Bit 0 - 15 is reserved for generic Safan framework&#13;&#10;Bit 16 -31 can be used by the application&#13;&#10;&#13;&#10;See also type gt_ObjectStatus."/>
		<Server Name="ToObject" GUID="{9EED831D-1495-49CA-AD11-0E8CDA8941D2}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false" Comment="ToObject:&#13;&#10;Object channel server.&#13;&#10;Channel to reach the methodes of this object.&#13;&#10;&#13;&#10;In case this object should be Accessible by a pointer&#13;&#10;the variable ToObject is used to handover the address of this object.&#13;&#10;&#13;&#10;This server is never used for anything else!!!&#13;&#10;&#13;&#10;&#13;&#10;"/>
		<Client Name="_ObjStr" Required="true" Internal="true"/>
		<Client Name="c_Group" Required="false" Internal="false" Comment="Group identification object is part of."/>
		<Client Name="op_LogData" Required="false" Internal="false" Comment="Output for logging data to SF_Logger"/>
		<Client Name="toOsLibTaskObjControl" Required="false" Internal="false"/>
	</Channels>
	<Dependencies>
		<Files>
			<File Path=".\Class\WewoBase\SafanGeneral.h" Include="false"/>
			<File Path=".\Class\WewoBase\SFN_Base.pdf"/>
		</Files>
	</Dependencies>
	<RevDoku>
		<Owner Company="Safan" Author="HenOdi"/>
		<Dokumentation Revision="0.29" Date="2014-10-30" Author="HenOdi" Company="Safan" Description="CheckTimer() uses a pointer to startTimer on 2 locations in this methode. &#13;&#10;Value could be changed during evaluation. Store content in an internal variable to be sure we use in both cases the same value."/>
		<Dokumentation Revision="0.28" Date="2014-03-17" Author="HenOdi" Company="Safan" Description="Add generic Start and Check ObjectTimer methodes"/>
		<Dokumentation Revision="0.27" Date="2013-06-06" Author="HenOdi" Company="Safan" Description="All safan classes have access now to  toOsLibTaskOjectControl&#13;&#10;"/>
		<Dokumentation Revision="0.26" Date="2013-02-05" Author="HenOdi" Company="Safan" Description="Set/Clear DebugRtLogEnabled bit in objectStatus moved from methode reset() to methode init().&#13;&#10;"/>
		<Dokumentation Revision="0.25" Date="2012-01-13" Author="HenOdi" Company="Safan" Description="Add methode ResetObject()"/>
		<Dokumentation Revision="0.24" Date="2011-11-17" Author="HenOdi" Company="Safan" Description="Add methode ConnectClientChannels&#13;&#10;"/>
		<Dokumentation Revision="0.23" Date="2011-04-12" Author="HenOdi" Company="Safan" Description="ObjectStatus.error like ObjectStatus.Enable&#13;&#10;Add SetApplicationErrorFlag(), SetInternalErrorFlag()&#13;&#10;remove SetErrorFlag(), ResetErrorFlag()&#13;&#10;"/>
		<Dokumentation Revision="0.22" Date="5-11-2010" Author="HenOdi" Company="Safan" Description="Remove unused server Security context"/>
		<Dokumentation Revision="0.21" Date="2-11-2010" Author="HenOdi" Company="Safan" Description="Add log fucntionality&#13;&#10;Remove previous trail (remove include file SafanLogDef.h)"/>
		<Dokumentation Revision="0.20" Author="HenOdi" Company="Safan" Description="First trial of Datalogging for debugging only"/>
		<Dokumentation Revision="0.19" Date="15-7-2010" Description="Add methodes to set Appl error flag in object status"/>
	</RevDoku>
	<Network Name="WewoBase">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "_ObjStr"
				GUID       = "{2B6E692A-8C0F-46D0-A9AA-41CFD79D3BDE}"
				Class      = "WewoStringUtils"
				Position   = "(330,540)"
				Visualized = "false">
				<Channels>
					<Server Name="ToObject"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this._ObjStr" Destination="_ObjStr.ToObject"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
WewoBase : CLASS
	TYPE
	  TestOverRide :
	  (
	    een,
	    twee
	  )$UDINT;
	END_TYPE
  //Servers:
	ToObject 	: SvrChCmd_pVoid;
	ObjectStatus 	: SvrCh_gt_ObjectStatus;
	o_ErrorWarningStatus 	: SvrCh_UDINT;
	m_Id 	: SvrCh_UDINT;
	m_p_Name 	: SvrCh_pChar;
  //Clients:
	op_LogData 	: CltCh_gpt_LogData;
	c_Group 	: CltCh_UDINT;
	toOsLibTaskObjControl 	: CltChCmd__TaskObjectControl;
	_ObjStr 	: CltChCmd_WewoStringUtils;
  //Variables:
		initCnt 	: USINT;			//! <Variable Comment="Counts the Init() calls&#13;&#10;&#13;&#10;This variable can be used to init objects in a certain order if it is requirerd." Name="initCnt"/>
		nextWewoObj 	: ^pVoid;			//! <Variable Comment="Next SFN_Base object in chain.&#13;&#10;&#13;&#10;Content of this variable is only available if this object is connected to Safanlogger!!!!&#13;&#10;It is used for an application to be able to go through all objects which is derived from SFN_Base and connected to the SFN_Logger.&#13;&#10;&#13;&#10;&#13;&#10;&#13;&#10;" Name="nextWewoObj"/>
		firstError 	: UDINT;			//! <Variable Comment="First error detected since last error handling was finished.&#13;&#10;" Name="firstError"/>
  //Functions:
				//! <Function Comment="Constructor" Name="WewoBase"/>
	FUNCTION WewoBase
		VAR_OUTPUT
			ret_code 	: ConfStates;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Init;
	
	FUNCTION VIRTUAL GLOBAL Background
		VAR_INPUT
			EAX 	: UDINT;
		END_VAR
		VAR_OUTPUT
			state (EAX) 	: UDINT;
		END_VAR;
				//! <Function Comment="Creates a copy of this object containing the same attribute data&#13;&#10;&#13;&#10;the same as SaveAs functionality.&#13;&#10;" Name="Clone"/>
	FUNCTION VIRTUAL GLOBAL Clone
		VAR_OUTPUT
			p_ObjectOut 	: pVoid;			//! <Variable Comment="Pointer to cloned object." Name="Clone.p_ObjectOut"/>
		END_VAR;
				//! <Function Comment="Get actual warning or error status.&#13;&#10;Only the highest and latest level status will &#13;&#10;be returned" Name="GetActuelErrorWarning"/>
	FUNCTION GLOBAL GetActuelErrorWarning
		VAR_OUTPUT
			status 	: UDINT;
		END_VAR;
				//! <Function Comment="Get name of a server or client.&#13;&#10;&#13;&#10;Note 1:&#13;&#10;Object name is included in name string&#13;&#10;&#13;&#10;Note 2:&#13;&#10;p_string should point to 255 byte allocated memory&#13;&#10;to store channelName string.&#13;&#10;If allocated size is less then 255 &#13;&#10;you have to be sure string will not exceed that size.&#13;&#10;&#13;&#10;return string examples&#13;&#10;&quot;ObjectName.ServerName&quot;&#13;&#10;&quot;ObjectName.ClientName&quot;" Name="GetChannelName"/>
	FUNCTION GLOBAL GetChannelName
		VAR_INPUT
			p_NameString 	: ^CHAR;			//! <Variable Comment="Pointer to a 255 bytes string location&#13;&#10;to store channel name" Name="GetChannelName.p_NameString"/>
			p_Channel 	: ^void;			//! <Variable Comment="Pointer to a server or client" Name="GetChannelName.p_Channel"/>
			p_this 	: ^void;			//! <Variable Comment="Pointer to object of requested server or client name" Name="GetChannelName.p_this"/>
		END_VAR;
				//! <Function Comment="Get name of object connected to the specified client." Name="GetConnectedObjectName"/>
	FUNCTION GLOBAL GetConnectedObjectName
		VAR_INPUT
			p_ClientChannel 	: ^void;			//! <Variable Comment="Pointer to client" Name="GetConnectedObjectName.p_ClientChannel"/>
		END_VAR
		VAR_OUTPUT
			p_ObjName 	: ^CHAR;			//! <Variable Comment="Pointer to object name string. (read only)" Name="GetConnectedObjectName.p_ObjName"/>
		END_VAR;
				//! <Function Comment="Get name of server connected to the specified client.&#13;&#10;&#13;&#10;Note: excluding object name &#13;&#10;Note: For some reason does not work for object channels !!!!!" Name="GetConnectedServerName"/>
	FUNCTION GLOBAL GetConnectedServerName
		VAR_INPUT
			p_ClientChannel 	: ^void;
		END_VAR
		VAR_OUTPUT
			p_SrvName 	: ^CHAR;
		END_VAR;
				//! <Function Comment="Get the actual error or warning status." Name="GetFirstError"/>
	FUNCTION GLOBAL GetFirstError
		VAR_OUTPUT
			status 	: UDINT;			//! <Variable Comment="Actual Error or warning status" Name="GetFirstError.status"/>
		END_VAR;
				//! <Function Comment="Get group Id object is part of" Name="GetGroupId"/>
	FUNCTION GLOBAL GetGroupId
		VAR_OUTPUT
			group 	: UDINT;
		END_VAR;
				//! <Function Comment="Get next object pointer for framework only.&#13;&#10;&#13;&#10;This methode is used to go through all safan class objects &#13;&#10;in linked list.&#13;&#10;&#13;&#10;" Name="GetNextWewoObject"/>
	FUNCTION GLOBAL GetNextWewoObject
		VAR_OUTPUT
			p_Object 	: ^WewoBase;
		END_VAR;
				//! <Function Comment="Take a copy of objectdata and put it into a destination object" Name="GetObjectData"/>
	FUNCTION GLOBAL GetObjectData
		VAR_INPUT
			p_DestObj 	: pVoid;			//! <Variable Comment="Pointer to Destination object where to store objectdata" Name="GetObjectData.p_DestObj"/>
			DestSize 	: UDINT;			//! <Variable Comment="Size of object data to copy.&#13;&#10;&#13;&#10;can be found by doing sizeof(class)" Name="GetObjectData.DestSize"/>
		END_VAR
		VAR_OUTPUT
			Result 	: BOOL;			//! <Variable Comment="Result of this methode&#13;&#10;&#13;&#10;Passed if succesfull&#13;&#10;Failed if not" Name="GetObjectData.Result"/>
		END_VAR;
				//! <Function Comment="Gets object status" Name="GetObjectStatus"/>
	FUNCTION GLOBAL GetObjectStatus
		VAR_OUTPUT
			status 	: gt_ObjectStatus;			//! <Variable Comment="Object status" Name="GetObjectStatus.status"/>
		END_VAR;
				//! <Function Comment="Gets object pointer (this pointer).&#13;&#10;" Name="GetThisPtr"/>
	FUNCTION GLOBAL GetThisPtr
		VAR_OUTPUT
			p_ThisPtr 	: pVoid;			//! <Variable Comment="Object Pointer " Name="GetThisPtr.p_ThisPtr"/>
		END_VAR;
				//! <Function Comment=" Purpose to enable temporary object &#13;&#10; Typically used by internal methodes &#13;&#10; &#13;&#10; See also ExtModeEnable / ExtModeDisable&#13;&#10; For fixed setting see ConfigEnable/ConfigDisable" Name="ModeEnable"/>
	FUNCTION VIRTUAL ModeEnable;
				//! <Function Comment=" Disable object&#13;&#10; Purpose to disable temporary object &#13;&#10; Typically used by internal methodes &#13;&#10; &#13;&#10; See also ExtModeEnable / ExtModeDisable&#13;&#10; For fixed setting see ConfigEnable/ConfigDisable" Name="ModeDisable"/>
	FUNCTION VIRTUAL ModeDisable;
				//! <Function Comment=" Configuration Enable object&#13;&#10; &#13;&#10; Purpose Enable configuration setting is for fixed settings&#13;&#10; For temporary setting see ModeEnable/ModeDisable and&#13;&#10; ExtModeEnable/ExtModeDisable&#13;&#10;" Name="ConfigEnable"/>
	FUNCTION VIRTUAL GLOBAL ConfigEnable;
				//! <Function Comment=" Configuration Disable object&#13;&#10; &#13;&#10; Purpose Disable configuration setting is for fixed settings&#13;&#10; For temporary setting see ModeEnable/ModeDisable and&#13;&#10; ExtModeEnable/ExtModeDisable&#13;&#10;" Name="ConfigDisable"/>
	FUNCTION VIRTUAL GLOBAL ConfigDisable;
				//! <Function Comment=" Enable object from external instances&#13;&#10; &#13;&#10; Purpose to enable temporary object &#13;&#10; Typically used by External methodes &#13;&#10;&#13;&#10; See also ModeEnable / ModeDisable&#13;&#10; For fixed setting see ConfigEnable/ConfigDisable&#13;&#10;" Name="ExtModeEnable"/>
	FUNCTION VIRTUAL GLOBAL ExtModeEnable
		VAR_OUTPUT
			ResultStatus 	: BOOL;
		END_VAR;
				//! <Function Comment=" Disable object from an external object.&#13;&#10; like HMI or a machine setting file.&#13;&#10; &#13;&#10; Purpose mode setting is for temporary settings from &#13;&#10; external objects&#13;&#10; See also ModeEnable / ModeDisable&#13;&#10; For fixed setting see ConfigEnable/ConfigDisable&#13;&#10;" Name="ExtModeDisable"/>
	FUNCTION VIRTUAL GLOBAL ExtModeDisable
		VAR_OUTPUT
			ResultStatus 	: BOOL;
		END_VAR;
				//! <Function Comment="Checks internal consistency of this object. &#13;&#10;&#13;&#10;Note:&#13;&#10;This methode checks only.&#13;&#10;" Name="Verify"/>
	FUNCTION VIRTUAL GLOBAL Verify
		VAR_OUTPUT
			Result 	: BOOL;			//! <Variable Comment="Return status:&#13;&#10;status=0  : PASSED &#13;&#10;status&lt;&gt;0 : FAILED&#13;&#10;" Name="Verify.Result"/>
		END_VAR;
				//! <Function Comment="Update actual object enable status." Name="UpdateObjectStatusEnable"/>
	FUNCTION VIRTUAL UpdateObjectStatusEnable;
				//! <Function Comment="load object data from remanent memory into temporary memory (RAM).&#13;&#10;" Name="Load"/>
	FUNCTION GLOBAL Load;
				//! <Function Comment="Reset internal and application errors.&#13;&#10;&#13;&#10;Note:&#13;&#10;Critical errors are cleared if application is restarted." Name="ResetError"/>
	FUNCTION GLOBAL ResetError
		VAR_OUTPUT
			ErrorStatus 	: BOOL;			//! <Variable Comment="If no error active PASSED&#13;&#10;If error active    FAILED&#13;&#10;" Name="ResetError.ErrorStatus"/>
		END_VAR;
				//! <Function Comment="Save object data into remanent (permanent) memory .&#13;&#10;" Name="Save"/>
	FUNCTION GLOBAL Save;
				//! <Function Comment="Set / Reset application error flag" Name="SetApplicationErrorFlag"/>
	FUNCTION GLOBAL SetApplicationErrorFlag
		VAR_INPUT
			SetValue 	: BOOL;			//! <Variable Comment="TRUE  set flag&#13;&#10;FALSE Reset flag&#13;&#10;" Name="SetApplicationErrorFlag.SetValue"/>
		END_VAR;
				//! <Function Comment="Set / Reset critical error flag" Name="SetCriticalErrorFlag"/>
	FUNCTION GLOBAL SetCriticalErrorFlag
		VAR_INPUT
			SetValue 	: BOOL;			//! <Variable Comment="TRUE  set flag&#13;&#10;FALSE Reset flag&#13;&#10;" Name="SetCriticalErrorFlag.SetValue"/>
		END_VAR;
				//! <Function Comment="Writes next object pointer for framework only.&#13;&#10;&#13;&#10;This methode is only used by SFN_Logger to build &#13;&#10;a linked list of all safan objects used in the application.&#13;&#10;&#13;&#10;" Name="SetNextWewoObject"/>
	FUNCTION GLOBAL SetNextWewoObject
		VAR_INPUT
			p_Object 	: ^WewoBase;
		END_VAR;
				//! <Function Comment="Convert a client pointer as it is used in application &#13;&#10;to an internal client pointer (The way it is used internal by LASAL)&#13;&#10;Methode used Workaround to solve &#13;&#10;mismatch in :&#13;&#10; #p_client^.items (accessed via pointer)&#13;&#10;  client.items&#13;&#10;&#13;&#10;for structure items see CltCh" Name="GetInternalChannelPtr"/>
	FUNCTION GetInternalChannelPtr
		VAR_INPUT
			p_Channel 	: ^void;
		END_VAR
		VAR_OUTPUT
			p_IntChannel 	: ^CltCh;
		END_VAR;
				//! <Function Comment="Get name of a server or client.&#13;&#10;Workaround methode for _GetObjectName() to remove &quot;_BASE\&quot; from &#13;&#10;name string." Name="GetObjectName"/>
	FUNCTION GetObjectName
		VAR_INPUT
			pO 	: ^Obj;			//! <Variable Comment="Pointer to object" Name="GetObjectName.pO"/>
			pCh 	: ^void;			//! <Variable Comment="Pointer to server or client" Name="GetObjectName.pCh"/>
			pName 	: ^CHAR;			//! <Variable Comment="pName should point to memory of 255 bytes&#13;&#10;to be able to store the biggest string." Name="GetObjectName.pName"/>
		END_VAR;
				//! <Function Comment="Set / Reset internal error flag" Name="SetInternalErrorFlag"/>
	FUNCTION SetInternalErrorFlag
		VAR_INPUT
			SetValue 	: BOOL;			//! <Variable Comment="TRUE  set flag&#13;&#10;FALSE Reset flag&#13;&#10;" Name="SetInternalErrorFlag.SetValue"/>
		END_VAR;
				//! <Function Comment="Update ObjectStatus error flag with actual error flags" Name="UpdateObjectStatusError"/>
	FUNCTION UpdateObjectStatusError;
				//! <Function Comment="Write an active error or warning status&#13;&#10;- Convert error or warning to an external id (incl group and level information)&#13;&#10;- Write status in o_ErrorWarningStatus&#13;&#10;- Store first error&#13;&#10;- Log error message &#13;&#10;- Set error flag in object status&#13;&#10;&#13;&#10;Note: For a realtime task use the RT_WriteActiveErrorWarning()" Name="WriteActiveErrorWarning"/>
	FUNCTION GLOBAL WriteActiveErrorWarning
		VAR_INPUT
			IntErrorWarningId 	: UDINT;			//! <Variable Comment="Internal Error or warning identifier&#13;&#10;&#13;&#10;Note: without level and group info&#13;&#10;&#13;&#10;" Name="WriteActiveErrorWarning.IntErrorWarningId"/>
			LogLevel 	: gt_LogLevel;			//! <Variable Comment="Error type (internal, application or critical)" Name="WriteActiveErrorWarning.LogLevel"/>
			p_msg 	: ^CHAR;			//! <Variable Comment="Pointer to log message string" Name="WriteActiveErrorWarning.p_msg"/>
		END_VAR;
				//! <Function Comment="Writes a log message.&#13;&#10; If Lasal logger is connected message will be written to LasalLogger&#13;&#10; If Lasal logger is not connected message will be written to screen" Name="WriteLogMessage"/>
	FUNCTION WriteLogMessage
		VAR_INPUT
			msgId 	: UDINT;
			LogLevel 	: gt_LogLevel;			//! <Variable Comment="Loglevel" Name="WriteLogMessage.LogLevel"/>
			p_msg 	: ^CHAR;			//! <Variable Comment="Pointer to message (read only)" Name="WriteLogMessage.p_msg"/>
			rtCall 	: BOOL;			//! <Variable Comment="Indicates methode is called from a Realtime Task." Name="WriteLogMessage.rtCall"/>
		END_VAR;
				//! <Function Comment="Writes realtime log data to LasalLogger&#13;&#10;2 values are logged: Identifier + value" Name="WriteLogRtData"/>
	FUNCTION GLOBAL WriteLogRtData
		VAR_INPUT
			Id 	: UDINT;			//! <Variable Comment="Identifier of logged data" Name="WriteLogRtData.Id"/>
			Value 	: DINT;			//! <Variable Comment="Data" Name="WriteLogRtData.Value"/>
		END_VAR;
				//! <Function Comment="Connect client channels.&#13;&#10;&#13;&#10;If implemented the derived class can connect dynamically &#13;&#10;client channels.&#13;&#10;&#13;&#10;&#13;&#10;" Name="ConnectClientChannels"/>
	FUNCTION VIRTUAL GLOBAL ConnectClientChannels
		VAR_INPUT
			ConnectionString 	: ^CHAR;
		END_VAR
		VAR_OUTPUT
			ConnectionValid 	: DINT;
		END_VAR;
				//! <Function Comment="Reset internal object variables to the situation just after &#13;&#10;               Init() was finished. &#13;&#10;               So object can restart on a reproducable way" Name="ResetObject"/>
	FUNCTION VIRTUAL GLOBAL ResetObject;
				//! <Function Comment="Methode to log an active error/warning in a realtime task." Name="RT_WriteActiveErrorWarning"/>
	FUNCTION RT_WriteActiveErrorWarning
		VAR_INPUT
			IntErrorWarningId 	: UDINT;
			LogLevel 	: gt_LogLevel;
			p_msg 	: ^CHAR;
		END_VAR;
				//! <Function Comment="Start object timer&#13;&#10;&#13;&#10;Note:&#13;&#10;StartTimer variable has to be allocated in the derived class.&#13;&#10;(add class variable)" Name="StartObjectTimer"/>
	FUNCTION StartObjectTimer
		VAR_INPUT
			p_StartTimer 	: ^UDINT;			//! <Variable Comment="Pointer to timer variable " Name="StartObjectTimer.p_StartTimer"/>
		END_VAR;
				//! <Function Comment="Check if timer has been elapsed&#13;&#10;&#13;&#10;Also valid for wrap around situations&#13;&#10;&#13;&#10;Note:&#13;&#10;StartTimer variable has to be allocated in the derived class.&#13;&#10;(add class variable)" Name="CheckObjectTimer"/>
	FUNCTION CheckObjectTimer
		VAR_INPUT
			p_StartTimer 	: ^UDINT;			//! <Variable Comment="Pointer to timer variable " Name="CheckObjectTimer.p_StartTimer"/>
			timeOut 	: UDINT;			//! <Variable Comment="Timeout value used to check" Name="CheckObjectTimer.timeOut"/>
		END_VAR
		VAR_OUTPUT
			timeOutStatus 	: BOOL;			//! <Variable Comment="Timeout status&#13;&#10;&#13;&#10;FALSE: Timer not finished yet&#13;&#10;TRUE:  Timer is finished&#13;&#10;" Name="CheckObjectTimer.timeOutStatus"/>
		END_VAR;
	
	FUNCTION GLOBAL configStatus
		VAR_OUTPUT
			value 	: DINT;
		END_VAR;
	
	FUNCTION ParseConectionLine
		VAR_INPUT
			ConnectionStr 	: ^CHAR;
		END_VAR
		VAR_OUTPUT
			RetValue 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL ObjectStatus::Write
		VAR_INPUT
			input (EAX) 	: gt_ObjectStatus;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: gt_ObjectStatus;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma using WewoStringUtils
#pragma usingLtd _TaskObjectControl


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB WewoBase::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_WEWOBASE
0$UINT, 29$UINT, (SIZEOF(::WewoBase))$UINT, 
5$UINT, 4$UINT, 0$UINT, 
TO_UDINT(817841270), "WewoBase", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::WewoBase.ToObject.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(4019907084), "ToObject", 
(::WewoBase.ObjectStatus.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3760821362), "ObjectStatus", 
(::WewoBase.o_ErrorWarningStatus.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(117086533), "o_ErrorWarningStatus", 
(::WewoBase.m_Id.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2144356276), "m_Id", 
(::WewoBase.m_p_Name.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(4246244680), "m_p_Name", 
//Clients:
(::WewoBase.op_LogData.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(1597732449), "op_LogData", 
(::WewoBase.c_Group.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(1239514064), "c_Group", 
(::WewoBase.toOsLibTaskObjControl.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000000$UINT, TO_UDINT(80495826), "toOsLibTaskObjControl", TO_UDINT(1584830088), "_TaskObjectControl", 1$UINT, 1$UINT, 
(::WewoBase._ObjStr.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(1429042568), "_ObjStr", TO_UDINT(1771708268), "WewoStringUtils", 0$UINT, 10$UINT, 
END_FUNCTION


#define USER_CNT_WewoBase 12

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_WewoBase] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION WewoBase::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_WewoBase, pCmd := #vmt.CmdTable);
	vmt.CmdTable.Init		:= #Init();
#pragma warning (disable : 74)
	vmt.UserFcts[0]		:= #Background();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[1]		:= #Clone();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[2]		:= #ModeEnable();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[3]		:= #ModeDisable();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[4]		:= #ConfigEnable();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[5]		:= #ConfigDisable();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[6]		:= #ExtModeEnable();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[7]		:= #ExtModeDisable();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[8]		:= #Verify();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[9]		:= #UpdateObjectStatusEnable();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[10]		:= #ConnectClientChannels();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[11]		:= #ResetObject();

#pragma warning (default : 74)
	ToObject.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ToObject.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	ObjectStatus.pMeth			:= StoreMethod( #M_RD_DIRECT(), #ObjectStatus::Write() );
	IF ObjectStatus.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	m_Id.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF m_Id.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	ret_code	:= WewoBase();

END_FUNCTION

//{{LSL_IMPLEMENTATION
#include <Rtos_PrivHeader.h>      // Using _GetChName()

// NOTE: Released software never may have Wewo_DEBUG_RT_LOG_ENABLED defined!!!!
//#define Wewo_DEBUG_RT_LOG_ENABLED // To enable realtime debuglogging for all objects

FUNCTION WewoBase::WewoBase
	VAR_OUTPUT
		ret_code 	: ConfStates;
	END_VAR

  initCnt                    := 0;     // Start counting nr of init Calls
  ObjectStatus               := 0;     // Clear all bits
  
  ObjectStatus.ModeEnable    := 1;     // Default all objects are enabled
  ObjectStatus.ExtModeEnable := 1;     // Default all objects are enabled
  ObjectStatus.ConfigEnable  := 1;     // Default all objects are enabled
  ObjectStatus.Enabled       := 1;     // Default all objects are enabled

  // Default background task is defined but disabled
  toOsLibTaskObjControl.BackUpObject (thispointer:=this, tasktype:=OBJ_BG);

	ret_code := C_OK;
  
END_FUNCTION


FUNCTION VIRTUAL GLOBAL WewoBase::Init
  VAR
    pObj	    : ^Obj;
    regWewoObj : gt_LogData;                     // Register SFN object to chain.
  END_VAR

  initCnt += 1;                                 // Update nr of calls

  if initCnt = 1 then
    // Only first time
    
    // Take over object name as it is used in the OS
    pObj 	    := LSL_GetHdr(this);              // Get object header
    m_p_Name  := #pObj^.pObjDsc^.SymName + 4;   // Get adress location namestring
  
    ToObject := this;                           // Initialise Object Pointer to this object to reach object 
                                                // methodes via pointer
    ObjectStatus.Error            := 0;
    ObjectStatus.InternalError    := 0;
    ObjectStatus.ApplicationError := 0;
    
    firstError                    := 0;
    o_ErrorWarningStatus          := 0;

    #ifdef SF_DEBUG_RT_LOG_ENABLED                  
      ObjectStatus.DebugRtLogEnabled:= 1;       // Project setting debug log is enabled
      WriteLogMessage(LogLevel:=LL_WARNING, p_msg:="Wewo_Base::Init: Realtime data logging is enabled");
    
    #else
      ObjectStatus.DebugRtLogEnabled:= 0;       // Project setting debug log is disabled
    
    #endif
    
    // Fill log data for registration
    regWewoObj.LogLevel  := LL_NONE;
    regWewoObj.p_ObjName := NIL;                         // Just fill for identification
    regWewoObj.p_Msg     := NIL;                         // Just fill for identification
    regWewoObj.Id        := REGISTER_WEWO_OBJECT;
    regWewoObj.dValue    := this $ DINT;                 // Registrate this object
    
    // Registrate object.
    op_LogData.Write(input:=#regWewoObj);
    
    ObjectStatus.LogConnected := ( IsClientConnected(#op_LogData) = 1);

  elsif initCnt = 12 then
    ResetObject();

  end_if;

END_FUNCTION


(**************************************************************************
  FUNCTION Wewo_Base::ResetObject

  Description: Reset object
  
               Reset internal object variables to the situation just after 
               Init() was finished. 
               So object can restart on a reproducable way.
              
  Return:      -
  
**************************************************************************)

FUNCTION VIRTUAL GLOBAL WewoBase::ResetObject
  

  ResetError();
  
END_FUNCTION


(**************************************************************************
  FUNCTION Wewo_Base::Background

  Description: Define background task entry
  
               If a derived class uses a Background task then OS Lasal requires 
               to have also a background task defined in the baseclass.
               
               This is the reason we define here a Background task.
               It depends on the derived class if it is realy used or not.
               
  Note:        This is not required for a CY-task and a RT-task.
              
  Return:      -
  
**************************************************************************)
FUNCTION VIRTUAL GLOBAL WewoBase::Background
	VAR_INPUT
		EAX 	: UDINT;
	END_VAR
	VAR_OUTPUT
		state (EAX) 	: UDINT;
	END_VAR

  toOsLibTaskObjControl.BackUpObject (thispointer:=this, tasktype:=OBJ_BG);
	state := READY;

END_FUNCTION



FUNCTION GLOBAL WewoBase::Save

// ToDo implement save data from ram to flash
WriteActiveErrorWarning(IntErrorWarningId:= MSGID_NOT_IMPLEMENTED, 
                        LogLevel         := LL_WARNING, 
                        p_msg            := "SFN_Base::Save: Not implemented yet!"
                       );

END_FUNCTION


FUNCTION GLOBAL WewoBase::Load

// ToDo implement load data from flash to ram
WriteActiveErrorWarning(IntErrorWarningId:= MSGID_NOT_IMPLEMENTED, 
                        LogLevel         := LL_WARNING, 
                        p_msg            :="WewoBase::Load: Not implemented yet!"
                       );

END_FUNCTION


(**************************************************************************
  FUNCTION Wewo_Base::Verify

  Description:Verify object if it is consistent
              
  Return:  PASSED if this object consistent
           FAILED if actual settings causes an error
  
**************************************************************************)
FUNCTION VIRTUAL GLOBAL WewoBase::Verify
	VAR_OUTPUT
		Result 	: BOOL;
	END_VAR

  Result := PASSED;
  
END_FUNCTION


FUNCTION VIRTUAL GLOBAL WewoBase::Clone
	VAR_OUTPUT
		p_ObjectOut 	: pVoid;
	END_VAR
  
  // ToDo implement object independed 
  WriteActiveErrorWarning(IntErrorWarningId:=MSGID_NOT_IMPLEMENTED, LogLevel:=LL_WARNING, p_msg:="WewoBase::Clone: Not implemented yet!");

  // For now return this
  p_ObjectOut := this;
  
END_FUNCTION


(**************************************************************************
  FUNCTION Wewo_Base::GetThisPtr

  Description:Gets object pointer of this object.
              
  Return:  Pointer to this object
  
  Note:    Also available in server ToObject
**************************************************************************)
FUNCTION GLOBAL WewoBase::GetThisPtr
	VAR_OUTPUT
		p_ThisPtr 	: pVoid;
	END_VAR

  p_ThisPtr := this;

END_FUNCTION


(**************************************************************************
  FUNCTION Wewo_Base::GetObjectStatus

  Description:Gets object status
              
  Return:  object status
  
  Note:    Info also available in server ObjectStatus
**************************************************************************)
FUNCTION GLOBAL WewoBase::GetObjectStatus
	VAR_OUTPUT
		status 	: gt_ObjectStatus;
	END_VAR
  
  status := ObjectStatus;
  
END_FUNCTION


(**************************************************************************
  FUNCTION SFN_Base::WriteActiveErrorWarning

  Description: Write an activate error or warning
              - Log error or warning message 
              - store error Id if it is the first one
              - Set error flag in object status
  
  Parameter:  ErrorWarningId  Internal Error or warning identifier
              Loglevel        Loglevel (warning, internal, application or critical)
              p_msg           Pointer to log message string

  Note:       To write an error or warning witin a realtime task, use
              RT_WriteActiveErrorWarning()
**************************************************************************)
FUNCTION GLOBAL WewoBase::WriteActiveErrorWarning
	VAR_INPUT
		IntErrorWarningId 	: UDINT;
		LogLevel 	: gt_LogLevel;
		p_msg 	: ^CHAR;
	END_VAR

  VAR
  	lvl           : UDINT;
    ExtErrWarId   : UDINT; // Converted ErrorWarningId
  END_VAR


  // Update object error status 
  case LogLevel of
    LL_ERROR_APPLICATION:
      SetApplicationErrorFlag(SetValue:=TRUE);
      
    LL_ERROR_INTERNAL:
      SetInternalErrorFlag(SetValue:=TRUE);
      
    LL_ERROR_CRITICAL:
      SetCriticalErrorFlag(SetValue:=TRUE);
      
  end_case;


  if LogLevel >= LL_WARNING then
    // Id is Error or Warning
    
    // Combine group, level and internal Error or Warning id into an external Error or Warning Id
    ExtErrWarId := CONVERT_2_EXT_MSGLOG_ID(c_Group,LogLevel$UDINT,IntErrorWarningId);
    
    // Update FirstError
    if LogLevel > LL_WARNING then
      // Id is an Error 
      
      if (firstError = MSGID_NONE ) then
        // Store first error
        firstError := ExtErrWarId;
        
      end_if;

    end_if;

    lvl := GET_LEVEL(o_ErrorWarningStatus);
    // Update o_ErrorWarningStatus
    if (LogLevel > lvl $gt_LogLevel) then
      // Only write if equal or higher level    
      o_ErrorWarningStatus := ExtErrWarId;
    end_if;

    // Log message.
    WriteLogMessage(msgId:=ExtErrWarId,  LogLevel:=LogLevel, p_msg:=p_msg, rtCall:=FALSE);

  end_if;
  

END_FUNCTION


(**************************************************************************
  FUNCTION WewoBase::RT_WriteActiveErrorWarning

  Description: Write an activate error or warning reserved for Realtime tasks
              - Log error or warning message 
              - store error Id if it is the first one
              - Set error flag in object status
  
  Parameter:  ErrorWarningId  Internal Error or warning identifier
              Loglevel        Loglevel (warning, internal, application or critical)
              p_msg           Pointer to log message string

**************************************************************************)
FUNCTION WewoBase::RT_WriteActiveErrorWarning
	VAR_INPUT
		IntErrorWarningId 	: UDINT;
		LogLevel 	: gt_LogLevel;
		p_msg 	: ^CHAR;
	END_VAR

  VAR
  	lvl           : UDINT;
    ExtErrWarId   : UDINT; // Converted ErrorWarningId
  END_VAR


  // Update object error status 
  case LogLevel of
    LL_ERROR_APPLICATION:
      SetApplicationErrorFlag(SetValue:=TRUE);
      
    LL_ERROR_INTERNAL:
      SetInternalErrorFlag(SetValue:=TRUE);
      
    LL_ERROR_CRITICAL:
      SetCriticalErrorFlag(SetValue:=TRUE);
      
  end_case;


  if LogLevel >= LL_WARNING then
    // Id is Error or Warning
    
    // Combine group, level and internal Error or Warning id into an external Error or Warning Id
    ExtErrWarId := CONVERT_2_EXT_MSGLOG_ID(c_Group,LogLevel$UDINT,IntErrorWarningId);
    
    // Update FirstError
    if LogLevel > LL_WARNING then
      // Id is an Error 
      
      if (firstError = MSGID_NONE ) then
        // Store first error
        firstError := ExtErrWarId;
        
      end_if;

    end_if;

    lvl := GET_LEVEL(o_ErrorWarningStatus);
    // Update o_ErrorWarningStatus
    if (LogLevel > lvl $gt_LogLevel) then
      // Only write if equal or higher level    
      o_ErrorWarningStatus := ExtErrWarId;
    end_if;

    // Log message.
    WriteLogMessage(msgId:=ExtErrWarId,  LogLevel:=LogLevel, p_msg:=p_msg, rtCall:=TRUE);

  end_if;

END_FUNCTION



(**************************************************************************
  FUNCTION WewoBase::WriteLogMessage

  Description:Writes a log message.
              If Lasal logger is connected message will be written to LasalLogger
              If Lasal logger is not connected message will be written to screen
  
  Parameter:  MsgId 
              Loglevel
              Pointer to message
              rtCall  Indicates this message is writen by a Realtime task
              
  Note:       For LL_DEBUG_RT to log RT data use WriteLogRtData()
  
**************************************************************************)
FUNCTION WewoBase::WriteLogMessage
	VAR_INPUT
		msgId 	: UDINT;
		LogLevel 	: gt_LogLevel;
		p_msg 	: ^CHAR;
		rtCall 	: BOOL;
	END_VAR

  VAR
    LogData : gt_LogData;
    
  END_VAR

  if ObjectStatus.LogConnected then
     
    LogData.LogLevel  := LogLevel;
    LogData.Id        := msgId;
    LogData.p_ObjName := m_p_Name;
    LogData.p_Msg     := p_msg;
    LogData.rtCall    := rtCall;
    
    // Send message to connected logger
    op_LogData:= #LogData;
    op_LogData.Write(input:=op_LogData);

  else
    // No external logging connected. Send to debug trace.
    
    if rtCall = FALSE then
      // Not called by a RT-task
      TRACE(p_msg);
    
    // else Do nothing
      
    end_if;
    
  end_if;
  
END_FUNCTION

(**************************************************************************
  FUNCTION WewoBase::WriteLogRtData

  Description:Writes realtime log data to LasalLogger
              2 values are logged: Identifier + value
  
  Parameter:  Id        Identifier of logged data
              dValue    Data
              
  Note:       By modifing ObjectStatus.DebugRtLogEnabled by hand we can temporary
              enable realtime debug logging for this object. To enable 
              realtime debuglogging for all objects just uncomment define: 
              SF_DEBUG_RT_LOG_ENABLED above in this Wewo_Base file.
**************************************************************************)
FUNCTION GLOBAL WewoBase::WriteLogRtData
	VAR_INPUT
		Id 	: UDINT;
		Value 	: DINT;
	END_VAR
    
  VAR
    LogData   : gt_LogData;
    
  END_VAR
   
  if ( ObjectStatus.DebugRtLogEnabled ) then                             
    // Only log realtime debug data of this object if this option is enabled here
       
    LogData.LogLevel  := LL_DEBUG_RT;
    LogData.p_ObjName := m_p_Name;
    LogData.Id        := Id;
    LogData.dValue    := Value;
    
    // Send data to connected logger
    op_LogData:= #LogData;
    op_LogData.Write(input:=op_LogData);
      
  end_if;

END_FUNCTION

(*******************************************************
 * FUNCTION Wewo_Base::ModeEnable
 * FUNCTION Wewo_Base::ModeDisable
 * Enable/Disable object
 * 
 * Purpose to enable/disable temporary object 
 * Typically used by internal methodes 
 * 
 * See also ExtModeEnable / ExtModeDisable
 * For fixed setting see ConfigEnable/ConfigDisable
 *******************************************************)
FUNCTION VIRTUAL WewoBase::ModeEnable
  
  ObjectStatus.ModeEnable := 1;
  UpdateObjectStatusEnable();
  
END_FUNCTION

FUNCTION VIRTUAL WewoBase::ModeDisable
  
  ObjectStatus.ModeEnable := 0;
  UpdateObjectStatusEnable();

END_FUNCTION


(*******************************************************
 * FUNCTION Wewo_Base::ExtModeEnable
 * FUNCTION Wewo_Base::ExtModeDisable
 * Enable/Disable object from external instances
 * 
 * Purpose to enable/disable temporary object 
 * Typically used by External methodes 
 *
 * See also ModeEnable / ModeDisable
 * For fixed setting see ConfigEnable/ConfigDisable
 *******************************************************)
FUNCTION VIRTUAL GLOBAL WewoBase::ExtModeEnable
	VAR_OUTPUT
		ResultStatus 	: BOOL;
	END_VAR
  
  ObjectStatus.ExtModeEnable := 1;
  UpdateObjectStatusEnable();
  
  ResultStatus := TRUE;   // Methode is handled OK
END_FUNCTION


FUNCTION VIRTUAL GLOBAL WewoBase::ExtModeDisable
	VAR_OUTPUT
		ResultStatus 	: BOOL;
	END_VAR
  
  ObjectStatus.ExtModeEnable := 0;
  UpdateObjectStatusEnable();
  
  ResultStatus := TRUE;   // Methode is handled OK

END_FUNCTION

(*******************************************************
 * FUNCTION VIRTUAL GLOBAL WewoBase::ConfigEnable
 * FUNCTION VIRTUAL GLOBAL WewoBase::ConfigDisable
 * Configuration Enable/Disable object
 * 
 * Purpose Enable/Disable configuration setting is for fixed settings
 * For temporary setting see ModeEnable/ModeDisable and
 * ExtModeEnable/ExtModeDisable
 *******************************************************)
FUNCTION VIRTUAL GLOBAL WewoBase::ConfigEnable
  
  ObjectStatus.ConfigEnable := 1;
  UpdateObjectStatusEnable();
  
END_FUNCTION


FUNCTION VIRTUAL GLOBAL WewoBase::ConfigDisable
  
  ObjectStatus.ConfigEnable := 0;
  UpdateObjectStatusEnable();
  
END_FUNCTION


(*******************************************************
 * FUNCTION WewoBase::UpdateObjectStatusEnable
 *
 * Description: Update ObjectStatus enabled flag 
 * 
 * Used for: ExtModeEnable(), ModeEnable(), ConfigEnable()
 *******************************************************)
FUNCTION VIRTUAL WewoBase::UpdateObjectStatusEnable
  ObjectStatus.Enabled := (     ObjectStatus.ModeEnable 
                          L_AND ObjectStatus.ExtModeEnable 
                          L_AND ObjectStatus.ConfigEnable
                          );
  
END_FUNCTION



(*******************************************************
 * FUNCTION Wewo_Base::SetCriticalErrorFlag
 * Set / Reset critical error flag
 * 
 *******************************************************)
FUNCTION GLOBAL WewoBase::SetCriticalErrorFlag
	VAR_INPUT
		SetValue 	: BOOL;
	END_VAR

  ObjectStatus.CriticalError := (SetValue <> FALSE);
  UpdateObjectStatusError();

END_FUNCTION


(*******************************************************
 * FUNCTION Wewo_Base::SetApplicationErrorFlag
 * Set / Reset application error flag
 * 
 *******************************************************)
FUNCTION GLOBAL WewoBase::SetApplicationErrorFlag
	VAR_INPUT
		SetValue 	: BOOL;
	END_VAR
  
  ObjectStatus.ApplicationError := (SetValue <> FALSE);
  UpdateObjectStatusError();
    
END_FUNCTION


(*******************************************************
 * FUNCTION WewoBase::SetInternalErrorFlag
 * Set / Reset internal error flag
 * 
 *******************************************************)
FUNCTION WewoBase::SetInternalErrorFlag
	VAR_INPUT
		SetValue 	: BOOL;
	END_VAR
  
  ObjectStatus.InternalError := (SetValue <> FALSE);
  UpdateObjectStatusError();
    
END_FUNCTION




(*******************************************************
 * FUNCTION WewoBase::ResetError
 * 
 * Reset errors of this object
 *
 *******************************************************)
FUNCTION GLOBAL WewoBase::ResetError
	VAR_OUTPUT
		ErrorStatus 	: BOOL;
	END_VAR

  // ObjectStatus.CriticalError    := 0;  // Only cleared after restarting the whole application 
  
  ObjectStatus.ApplicationError := 0;
  ObjectStatus.InternalError    := 0;

  UpdateObjectStatusError();

  if ObjectStatus.Error = 0 then
    // No critical error active any more
    firstError                  := 0;
    o_ErrorWarningStatus        := 0;
    ErrorStatus                 := PASSED;
    
  else
    ErrorStatus                 := FAILED;

  end_if;
  
END_FUNCTION


(*******************************************************
 * FUNCTION Wewo_Base::UpdateObjectStatusError
 *
 * Description: Update ObjectStatus error flag 
 * 
 *******************************************************)
FUNCTION WewoBase::UpdateObjectStatusError
  ObjectStatus.Error := (      ObjectStatus.InternalError 
                          L_OR ObjectStatus.ApplicationError
                          L_OR ObjectStatus.CriticalError
                        );
  
END_FUNCTION


// C function declaration for Sigmatek function _GetObjectName
FUNCTION GLOBAL __CDECL _GetObjectName
  VAR_INPUT
    pO : ^Obj;
    pCh : ^void;
    pName : ^CHAR;
  END_VAR;



#define BASESTRING "_BASE\"
(********************************************************************
 * FUNCTION WewoBase::GetObjectName
 * Get name of a server or client.
 * Workarond methode for _GetObjectName() to remove "_BASE\" from 
 * name string.
 * Note:        pName should point to memory of 255 bytes
 ********************************************************************)
 
FUNCTION WewoBase::GetObjectName
	VAR_INPUT
		pO 	: ^Obj;
		pCh 	: ^void;
		pName 	: ^CHAR;
	END_VAR

  VAR
  	len   : UDINT;
    p_Str : ^CHAR;
  END_VAR

  _GetObjectName( pO, pCh, pName); // return string like "<ObjectName>.<Server>"
                                   // Maximum size is 255 bytes
  
  p_Str := pName;
  
  // Workaround to remove all "_BASE\" from server or client string in case of using derived 
  // complex classes.
  while p_Str <> NIL do
    p_Str := _ObjStr.StrStr(p_searchStr:=p_Str, p_lookforStr:=BASESTRING);
    len   := _ObjStr.StringLength(p_String:=BASESTRING);

    if p_Str <> NIL then
      
      // close string on location where BASESTRING was found
      p_Str^ := 0;                  
          
      // Last part of client/serverstring is moved to location where BASESTRING was found
      _ObjStr.StringCatLimited(p_Dest:=pName, p_Add:=p_Str+len, DestSize:=255);
    
    end_if;

  end_while;

END_FUNCTION

(********************************************************************
 * FUNCTION WewoBase::GetChannelName
 * Get name of a server or client.
 *
 * Parameter:  p_NameString:  Pointer to a 255 bytes string location
 *                            to store channel name
 *             p_Channel      Pointer to a server or client
 *              
 *             p_this         Pointer to object of requested server or client name
 * 
 *  Note 1:
 *  Object name is included in name string
 *
 *  Note 2:
 *  p_NameString should point to 255 byte allocated memory
 *  to store channelName string. (recommended)
 *  If allocated size is less then 255 
 *  you have to be sure string will not exceed that size.
 *
 *  return string examples
 *  "ObjectName.ServerName"
 *  "ObjectName.ClientName"
 ***********************************************************************)  
FUNCTION GLOBAL WewoBase::GetChannelName
	VAR_INPUT
		p_NameString 	: ^CHAR;
		p_Channel 	: ^void;
		p_this 	: ^void;
	END_VAR

  VAR
  	p_Object      : ^Obj;
		p_IntChannel 	: ^CltCh;
  END_VAR

  if (  (p_NameString <> NIL) 
     &  (p_Channel    <> NIL)
     &  (p_this       <> NIL)
     ) then
    p_Object  := LSL_GetHdr(p_this);
    
    p_IntChannel := GetInternalChannelPtr(p_Channel:=p_Channel);
    
    GetObjectName( p_Object, p_IntChannel, p_NameString); // return string like "<ObjectName>.<Server>"
                                                           //                or  "<ObjectName>.<client>"
  end_if;

END_FUNCTION

(***********************************************************
 * FUNCTION Wewo_Base::GetConnectedServerName
 *
 * Get name of server connected to the specified client.
 * Note: exclude object name 
 * Note: For some reason does not work for object channels !!!!!
 ***********************************************************)
FUNCTION GLOBAL WewoBase::GetConnectedServerName
	VAR_INPUT
		p_ClientChannel 	: ^void;
	END_VAR
	VAR_OUTPUT
		p_SrvName 	: ^CHAR;
	END_VAR

VAR
  ChnNr : UINT;            // Client Channel number.
  
  p_IntClient : ^CltCh;    // Internal Client pointer
  p_Obj       : ^Obj;      // Object header information
  
END_VAR

  p_IntClient := GetInternalChannelPtr(p_Channel:=p_ClientChannel);
  
  // Get obj-Pointer of object connected to "Client"
  p_Obj       := LSL_GetHdr(p_IntClient^.pCmd);
 

  // Calculate channel offset of class: (Channeladdress - Objectaddress) / SizeofChannel
  ChnNr       := TO_UINT( (p_IntClient^.pCh$UDINT - p_IntClient^.pCmd$UDINT) / sizeof(SvrCh) ); 
  // Get Name of connected server
  p_SrvName   := _GetChName(p_Obj^.pClsHdr, ChnNr);    

END_FUNCTION


(***********************************************************
FUNCTION Wewo_Base::GetConnectedObjectName

Description:  Get name of object connected to the specified client.
 
Parameter:    p_ClientChannel    Pointer to client

Return:       Pointer to object name string. (read only)
 
***********************************************************)
FUNCTION GLOBAL WewoBase::GetConnectedObjectName
	VAR_INPUT
		p_ClientChannel 	: ^void;
	END_VAR
	VAR_OUTPUT
		p_ObjName 	: ^CHAR;
	END_VAR

  VAR
    p_IntClient 	: ^CltCh;  	
    p_Obj       : ^Obj;      // Object header information
  END_VAR

  p_IntClient := GetInternalChannelPtr(p_Channel:=p_ClientChannel);
  p_Obj       := LSL_GetHdr(p_IntClient^.pCmd);

#pragma warning(disable:137)
  // Disable private access warnings
  p_ObjName   := #p_Obj^.pObjDsc^.SymName.Text[0];
#pragma warning(default:137)

END_FUNCTION


(**************************************************************************
FUNCTION Wewo_Base::GetInternalChannelPtr

 Convert a channel (client or server) pointer as it is used in application 
 to an internal channel pointer (The way it is used internal by LASAL)
 Methode is used as Workaround to solve mismatch in :
  #p_client^.items (accessed via pointer)
   client.items
  or
  #p_server^.items (accessed via pointer)
   Server.items

 for structure items see CltCh
**************************************************************************)

FUNCTION WewoBase::GetInternalChannelPtr
	VAR_INPUT
		p_Channel 	: ^void;
	END_VAR
	VAR_OUTPUT
		p_IntChannel 	: ^CltCh;
	END_VAR

VAR
  clientStruct  : CltCh;        
  p_Offset      : ^Void;
  ptr1          : ^Void;
  ptr2          : ^Void;
END_VAR

  // Note: Comparing the way the compiler is handling client or is handling 
  //       p_client^ (pointer to client) we see a different behaviour 
  //       when using the internal client structure items (type: CltCh)
  //       The reason is when getting the address of the client 
  //       we don't get the start of the structure but the compiler 
  //       gets the address of item dData (location to store client variable 
  //       value).
  //       Realy confusing !!!!!!
  //       Why didn't the LASAL designers start with dData in the structure???
  //
  //       This is also the case for servers

  // Work around, Calculate offset to find start of internal client structure.
  // Calculate offset in internal client structure to get start of internal client structure
  //
  // Note: Pointer calculations (adding offsets) in LASAL accepts only 
  //      (Pointer + udintVar) $ t_pointerDataType  or
  //      (Pointer + dintVar)  $ t_PointerDataType
  
  ptr1     := #clientStruct.dData;              // address where the client value is stored
                                                // in the internal client structure
  ptr2     := #clientStruct;                    // start of internal client structure
  p_Offset := (ptr1 - ptr2 $ udint)$^Void; 

  p_IntChannel := (p_Channel - p_offset $ udint)$^CltCh;

END_FUNCTION




(**************************************************************************
  FUNCTION Wewo_Base::GetObjectData

  Take a copy of objectdata and put it into a destination object
  
    ObjectData:  - Internal variables
                 - Server variables
                 - Client variables
  
  Parameter:  pointer destination object
              DestSize 
  
  Note:       If a data is copied from a child object to a parent object
              the size is limited to parent size
**************************************************************************)
FUNCTION GLOBAL WewoBase::GetObjectData
	VAR_INPUT
		p_DestObj 	: pVoid;
		DestSize 	: UDINT;
	END_VAR
	VAR_OUTPUT
		Result 	: BOOL;
	END_VAR

  VAR
    srcSize  : UDINT;      // Object header information this object
    
  END_VAR

  Result := FAILED;              // Default return failed

  if p_DestObj <> NIL then
  
    // ToDo Get sizes from objectHeaders. Waiting for input from Sigmatek
    // for now take over Destination size  !!!! No out of range check  at this moment!!!!!!!!!!
    srcSize := DestSize;
    
    if ( DestSize > srcSize) then
      // Parent data copied to a child object, Limit copy size to parent size
      DestSize := srcSize;
      
    end_if;

    _memcpy( ptr1 := p_DestObj, ptr2 := this, cntr := DestSize);

    Result := PASSED;

  else
    TRACE ("SW ERROR SFN_Base::GetObjectData: Invalid pointer parameter");
    
  end_if;

END_FUNCTION

#pragma warning (disable : 73)


FUNCTION VIRTUAL GLOBAL WewoBase::ConnectClientChannels
	VAR_INPUT
		ConnectionString 	: ^CHAR;
	END_VAR
	VAR_OUTPUT
		ConnectionValid 	: DINT;
	END_VAR
    
    VAR
    	Logdata : gt_LogData;
    END_VAR
    
    Logdata.LogLevel := LL_ERROR_APPLICATION;
    Logdata.p_ObjName := "WewoBase.connection";
    Logdata.p_Msg :=ConnectionString;

     ParseConectionLine(ConnectionString);


  //  op_LogData.Write(input:=Logdata);


END_FUNCTION


#pragma warning (default : 73)


(**************************************************************************
  FUNCTION Wewo_Base::ObjectStatus::Write

  Take over only the flags which may be changed outside this object.
  Other flags may only be modified by this object (directly).
  
  Parameter:  New ObjectStatus 
  
**************************************************************************)
FUNCTION VIRTUAL GLOBAL WewoBase::ObjectStatus::Write
	VAR_INPUT
		input (EAX) 	: gt_ObjectStatus;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: gt_ObjectStatus;
	END_VAR

  VAR
  	newStatus : gt_ObjectStatus;
  END_VAR

	newStatus := input;
  
  ObjectStatus.DebugRtLogEnabled :=  newStatus.DebugRtLogEnabled;
  
 	result := ObjectStatus;

END_FUNCTION


(**************************************************************************
  FUNCTION Wewo_Base::GetFirstError

  Get first error of this object.
  
  See also comment of internal variable firstError
**************************************************************************)
FUNCTION GLOBAL WewoBase::GetFirstError
	VAR_OUTPUT
		status 	: UDINT;
	END_VAR
  
  status := firstError;
  
END_FUNCTION


(**************************************************************************
  FUNCTION SFN_Base::GetActuelErrorWarning

  Get latest actual error/warning of this object.
  
  See also comment of server o_ErrorWarningStatus
**************************************************************************)
FUNCTION GLOBAL WewoBase::GetActuelErrorWarning
	VAR_OUTPUT
		status 	: UDINT;
	END_VAR

  status := o_ErrorWarningStatus;
END_FUNCTION


(**************************************************************************
  FUNCTION Wewo_Base::GetNextSfnObject

  Get next safan object in framework chain
  Used to get next object in framework chain of all safan objects

  ReturnValue: p_Object   pointer to next safanobject in framework chain

  Note
  Typically used for framework handling
**************************************************************************)
FUNCTION GLOBAL WewoBase::GetNextWewoObject
	VAR_OUTPUT
		p_Object 	: ^WewoBase;
	END_VAR

  p_Object := nextWewoObj$^WewoBase;
  
END_FUNCTION

(**************************************************************************
  FUNCTION Wewo_Base::SetNextSfnObject

  Add a Wewoobject in the framework chain
  Used to create a chain of all Wewo objects in framework chain

  Parameter: p_Object   

  Note:
  Chain is created if Wewo object is registrated to the WewoLogger during 
  startup application
  
**************************************************************************)
FUNCTION GLOBAL WewoBase::SetNextWewoObject
	VAR_INPUT
		p_Object 	: ^WewoBase;
	END_VAR

  nextWewoObj $pVoid := p_Object;
END_FUNCTION


(**************************************************************************
  FUNCTION Wewo_Base::GetGroupId
  
  Get group id. Can be used to find objects that is part of (a) group(s)
  Groups are defined in the application networks

  ReturnValue: group

  
**************************************************************************)
FUNCTION GLOBAL WewoBase::GetGroupId
	VAR_OUTPUT
		group 	: UDINT;
	END_VAR

  group := c_Group;
END_FUNCTION


#define TIME_VALUE_MASK  0x3FFFFFFF   // Bit mask for bit0 .. bit29

 
(**************************************************************************
  FUNCTION Wewo_Base::StartObjectTimer

  Start object timer 

  Parameter: p_StartTimer   Pointer to startTimer variable

  Note:
  StartTimer variable has to be allocated (add class variable) in the derived 
  class which is interfaced as pointer to this methode.
  
**************************************************************************)
FUNCTION WewoBase::StartObjectTimer
	VAR_INPUT
		p_StartTimer 	: ^UDINT;
	END_VAR

  if (p_StartTimer <> NIL) then
    p_StartTimer^ := ops.tAbsolute;
    p_StartTimer^ := p_StartTimer^ B_AND TIME_VALUE_MASK; // Remove upper bits 
  
  end_if;

END_FUNCTION


(**************************************************************************
  FUNCTION Wewo_Base::StartObjectTimer

  Check if timer has been elapsed

  Parameter:  p_StartTimer   Pointer to startTimer variable
              timeOut        Timeout duration 

  RetunValue: TRUE  if timeout time has been elapsed
              FALSE if not
  
  Note:
  Also valid in wrap around situations
  StartTimer variable has to be allocated (add class variable) in the derived 
  class.
    
**************************************************************************)
FUNCTION WewoBase::CheckObjectTimer
	VAR_INPUT
		p_StartTimer 	: ^UDINT;
		timeOut 	: UDINT;
	END_VAR
	VAR_OUTPUT
		timeOutStatus 	: BOOL;
	END_VAR

  VAR
    actTime        : UDINT;
    intStartTimer  : UDINT;
    
  END_VAR

  // Store for internal use. 
  // Starttimer could be updated meanwhile
  intStartTimer := p_StartTimer^; 
  
  actTime := ops.tAbsolute B_AND TIME_VALUE_MASK;       // Remove upper bits

  if (actTime < intStartTimer) then
    // Wrap around value detected
    actTime += (TIME_VALUE_MASK+1);                     // Add bit 30 to actual value
    
  end_if;

  // Check if timer has been elapsed
  timeOutStatus := ( (actTime - intStartTimer) >= timeOut );

END_FUNCTION


FUNCTION GLOBAL WewoBase::configStatus
	VAR_OUTPUT
		value 	: DINT;
	END_VAR
  value :=  ObjectStatus.ConfigEnable;
END_FUNCTION


FUNCTION WewoBase::ParseConectionLine
	VAR_INPUT
		ConnectionStr 	: ^CHAR;
	END_VAR
	VAR_OUTPUT
		RetValue 	: DINT;
	END_VAR
VAR
  after_equal   :dint;
  configtype    :dint;
  index         : Usint;
  counter       :dint;
  ClientChanel          :ARRAY[0..201] OF CHAR;
  ServerChannel       :ARRAY[0..201] OF CHAR;
  CurVal : char;
END_VAR
 
  after_equal := 0;
  counter     := 0;
  configtype  := 0;
  
  for index := 0 to 200 by 1 do
    ClientChanel[index]  := 0;
    ServerChannel[index] := 0;
  end_for;
  
  index       := 0;
  
  while  (ConnectionStr+index)^ <> 0 do
 CurVal  :=  (ConnectionStr+index)^  ;
    if  CurVal='<' | (CurVal= '>') then
      configtype := 1; // This is a connection line.  server <> client
 
    elsif  (CurVal> 31) & (CurVal < 123) then   // Filter all wrong Ascii characters from string
        if (CurVal = '=') then
            after_equal         := index;
            counter := 0;
      elsif (after_equal = 0) then
           ClientChanel[counter]      := CurVal;
           counter += 1;
      else
        ServerChannel[counter]  := CurVal;
        counter += 1;
      end_if;
    end_if;
    Index +=1;
  end_while;
 
  counter += 1;
  case configtype of

    1:// Connection   cl         client
     RetValue :=  ConnectCltSvr(#ClientChanel[0], #ServerChannel[0]);
         
     else
        RetValue := false;
     
   end_case;
END_FUNCTION
