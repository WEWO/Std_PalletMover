//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "RiwoParamAlarm"
	Revision           = "0.2"
	GUID               = "{562A72C7-7DD4-4C74-8DF7-935868C4CC63}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(450,660)">
	<Channels>
		<Server Name="GroupId" GUID="{4D0019DE-14A2-444C-BC47-8CBA0FF2D258}" Visualized="true" Initialize="true" WriteProtected="false" Retentive="false"/>
		<Server Name="Id" GUID="{0DA9938B-0374-4C54-A6B2-020775D392B8}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="Level" GUID="{4F0B1AE1-700A-4047-AF8B-CA7CB19C6268}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="SRam"/>
		<Server Name="Parameter1" GUID="{D7A3941F-5765-437F-8976-DF9D6E4A6E3F}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="Parameter2" GUID="{478EA574-590D-4F38-B293-7B0939E3B2A7}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="Parameter3" GUID="{E03FD72B-6C6A-4A24-B1D0-117076B847CB}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="Parameter4" GUID="{2E870527-367A-47BD-B245-956C2DA8EC1A}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="Report" GUID="{C5666BA7-5850-4229-8218-0A39EDE3FBFC}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="SRam"/>
		<Server Name="ResetReq" GUID="{0022BBF3-56AC-45C8-8558-379E7D9DD62C}" Visualized="false" Initialize="true" WriteProtected="false" Retentive="false"/>
		<Client Name="_Group" Required="true" Internal="true"/>
		<Client Name="_Id" Required="true" Internal="true"/>
		<Client Name="objNextRiwoParamAlarm" Required="false" Internal="false"/>
		<Client Name="objRiwoEventLogger" Required="false" Internal="false"/>
	</Channels>
	<Dependencies>
		<Files>
			<File Path=".\Class\RiwoDefine\RiwoDef.h" Include="false"/>
		</Files>
	</Dependencies>
	<RevDoku>
		<Owner Company="Riwo Engineering B.V." Author="Stefan Veltmaat (SVE)"/>
		<Dokumentation Revision="0.1" Date="2018-07-27" Author="Stefan Veltmaat (SVE)" Company="Riwo Engineering B.V." Description="initial setup of parmeter error"/>
		<Dokumentation Date="2018-07-27" Author="Stefan Veltmaat (SVE)" Company="Riwo Engineering B.V."/>
	</RevDoku>
	<Network Name="RiwoParamAlarm">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "_base"
				GUID       = "{27C80CA9-D9AC-4F86-AB7E-D3EE785C3523}"
				Class      = "_AlarmX3Para"
				Position   = "(534,120)"
				Visualized = "true"
				Remotely   = "true">
				<Channels>
					<Server Name="ClassSvr"/>
					<Client Name="Acknow"/>
					<Client Name="Config" Value="0"/>
					<Client Name="Group"/>
					<Client Name="Para1"/>
					<Client Name="Para2"/>
					<Client Name="Para3"/>
				</Channels>
			</Object>
			<Object
				Name       = "_Group"
				GUID       = "{778C6D46-8E9C-4D52-8A59-4934B69454EC}"
				Class      = "Ram"
				Position   = "(390,690)"
				Visualized = "true"
				Remotely   = "true">
				<Channels>
					<Server Name="Data"/>
				</Channels>
			</Object>
			<Object
				Name       = "_Id"
				GUID       = "{075EF87E-1F5C-4CAF-80DF-21DB25AB20C9}"
				Class      = "Ram"
				Position   = "(390,480)"
				Visualized = "true"
				Remotely   = "true">
				<Channels>
					<Server Name="Data"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.ClassSvr" Destination="_base.ClassSvr" Vertices="(1006,210),(834,210),"/>
			<Connection Source="this._Group" Destination="_Group.Data"/>
			<Connection Source="this.Id" Destination="_Id.Data" Vertices="(1006,270),(690,570),"/>
			<Connection Source="this.GroupId" Destination="_Group.Data" Vertices="(1006,330),(690,780),"/>
			<Connection Source="this._Id" Destination="_Id.Data"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
#pragma using _AlarmX3Para

RiwoParamAlarm : CLASS
: _AlarmX3Para
	TYPE
	  eAlarmLevel :  //! <Type Public="true" Name="eAlarmLevel"/>
	  (
	    eal_Error,
	    eal_Warning,
	    eal_Info
	  )$UDINT;
	  eAlarmReport :  //! <Type Public="true" Name="eAlarmReport"/>
	  (
	    ear_No,
	    ear_Yes
	  )$UDINT;
	END_TYPE
  //Servers:
	Id 	: SvrCh_DINT;
	GroupId 	: SvrCh_DINT;
	ResetReq 	: SvrCh_DINT;
	Level 	: SvrCh_eAlarmLevel_PTofCls_RiwoParamAlarm;
	Report 	: SvrCh_DINT;
	Parameter1 	: SvrCh_DINT;
	Parameter2 	: SvrCh_DINT;
	Parameter3 	: SvrCh_DINT;
	Parameter4 	: SvrCh_DINT;
  //Clients:
	objRiwoEventLogger 	: CltChCmd_RiwoEventLogger;
	objNextRiwoParamAlarm 	: CltChCmd_RiwoParamAlarm;
	_Id 	: CltChCmd_Ram;
	_Group 	: CltChCmd_Ram;
  //Variables:
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL Init;
	
	FUNCTION VIRTUAL GLOBAL GetParaVal
		VAR_INPUT
			ppara 	: ^DINT;
		END_VAR
		VAR_OUTPUT
			retcode 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL QuitAlarm;
	
	FUNCTION _HandleAlarms
		VAR_INPUT
			newState 	: DINT;
		END_VAR;
	
	FUNCTION GLOBAL SetActive;
	
	FUNCTION GLOBAL SetInActive;
	
	FUNCTION GLOBAL SetActiveSingleParamAlarm
		VAR_INPUT
			inparam1 	: DINT;
		END_VAR;
	
	FUNCTION GLOBAL SetActiveTwoParamsAlarm
		VAR_INPUT
			inparam1 	: DINT;
			inparam2 	: DINT;
		END_VAR;
	
	FUNCTION GLOBAL SetActiveThreeParamsAlarm
		VAR_INPUT
			inparam1 	: DINT;
			inparam2 	: DINT;
			inparam3 	: DINT;
		END_VAR;
	
	FUNCTION GLOBAL GetActiveErrors
		VAR_INPUT
			objNr 	: UDINT;
		END_VAR
		VAR_OUTPUT
			errorsState 	: BDINT;
		END_VAR;
	
	FUNCTION GLOBAL GetActiveWarnings
		VAR_INPUT
			objNr 	: UDINT;
		END_VAR
		VAR_OUTPUT
			warningsState 	: BDINT;
		END_VAR;
	
	FUNCTION GLOBAL GetReportConfigs
		VAR_INPUT
			objNr 	: UDINT;
		END_VAR
		VAR_OUTPUT
			reportConfigs 	: BDINT;
		END_VAR;
	
	FUNCTION GLOBAL SetAlarmIds
		VAR_INPUT
			startId 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Id::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Id::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL GroupId::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL GroupId::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL ResetReq::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL ResetReq::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma using Ram
#pragma usingLtd RiwoEventLogger


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB RiwoParamAlarm::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_RIWOPARAMALARM
0$UINT, 2$UINT, (SIZEOF(::RiwoParamAlarm))$UINT, 
9$UINT, 4$UINT, 0$UINT, 
TO_UDINT(1396228774), "RiwoParamAlarm", //Class
TO_UDINT(1746090780), "_AlarmX3Para", 0$UINT, 2$UINT, //Baseclass
//Servers:
(::RiwoParamAlarm.Id.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(299066170), "Id", 
(::RiwoParamAlarm.GroupId.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1195397640), "GroupId", 
(::RiwoParamAlarm.ResetReq.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3291374693), "ResetReq", 
(::RiwoParamAlarm.Level.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000001000$UINT, TO_UDINT(1841172131), "Level", 
(::RiwoParamAlarm.Report.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000001000$UINT, TO_UDINT(886550530), "Report", 
(::RiwoParamAlarm.Parameter1.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2930791861), "Parameter1", 
(::RiwoParamAlarm.Parameter2.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(934872079), "Parameter2", 
(::RiwoParamAlarm.Parameter3.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1086207129), "Parameter3", 
(::RiwoParamAlarm.Parameter4.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3738870074), "Parameter4", 
//Clients:
(::RiwoParamAlarm.objRiwoEventLogger.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000000$UINT, TO_UDINT(846826333), "objRiwoEventLogger", TO_UDINT(2650024474), "RiwoEventLogger", 2$UINT, 3$UINT, 
(::RiwoParamAlarm.objNextRiwoParamAlarm.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000000$UINT, TO_UDINT(29335576), "objNextRiwoParamAlarm", TO_UDINT(1396228774), "RiwoParamAlarm", 0$UINT, 2$UINT, 
(::RiwoParamAlarm._Id.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(3366699354), "_Id", TO_UDINT(1903583397), "Ram", 1$UINT, 3$UINT, 
(::RiwoParamAlarm._Group.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(279735017), "_Group", TO_UDINT(1903583397), "Ram", 1$UINT, 3$UINT, 
END_FUNCTION


#define USER_CNT_RiwoParamAlarm 5

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_RiwoParamAlarm] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION RiwoParamAlarm::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
		nCmdSize	: UINT;
	END_VAR

	ret_code	:= _AlarmX3Para::@STD();
	IF ret_code <> C_OK THEN
		RETURN;
	END_IF;
	nCmdSize		:= _AlarmX0Para::ClassSvr.pMeth^.nCmds$UINT*SIZEOF(pVoid) + CMDMETH.Init;

	_memcpy((#vmt.CmdTable)$^USINT, _AlarmX0Para::ClassSvr.pMeth, nCmdSize);
	vmt.CmdTable.nCmds		:= nSTDCMD + USER_CNT_RiwoParamAlarm;
	vmt.CmdTable.Init		:= #Init();
#pragma warning (disable : 74)
	vmt.UserFcts[1]		:= #GetParaVal();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[2]		:= #QuitAlarm();

#pragma warning (default : 74)
	_AlarmX0Para::ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF _AlarmX0Para::ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Id.pMeth			:= StoreMethod( #Id::Read(), #Id::Write() );
	IF Id.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	GroupId.pMeth			:= StoreMethod( #GroupId::Read(), #GroupId::Write() );
	IF GroupId.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	ResetReq.pMeth			:= StoreMethod( #ResetReq::Read(), #ResetReq::Write() );
	IF ResetReq.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Level.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF Level.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Report.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF Report.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Parameter1.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF Parameter1.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Parameter2.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF Parameter2.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Parameter3.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF Parameter3.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Parameter4.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF Parameter4.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION

FUNCTION VIRTUAL GLOBAL RiwoParamAlarm::Init  
  #if MAX_ALARMPARA >= 5
    #define ALARMPARA_NR_SUITABLE 1
  #endif
          
  #pragma warning(disable: 69);
  // compile error look into AlarmXBuffer.h and set MAX_ALARMPARA to 5
  if ALARMPARA_NR_SUITABLE then
    _AlarmX0Para::Init();
  end_if;
  #pragma warning(default: 69);

  
END_FUNCTION


FUNCTION GLOBAL RiwoParamAlarm::SetActive
  _HandleAlarms(1);
END_FUNCTION

FUNCTION GLOBAL RiwoParamAlarm::SetInActive
  _HandleAlarms(0);
END_FUNCTION

FUNCTION RiwoParamAlarm::_HandleAlarms
	VAR_INPUT
		newState 	: DINT;
	END_VAR

  if Level = eal_Warning & newState <> ClassSvr & newState = 1 then
    _RIWO_WARNING_MSG0("Alarm Id {0} activated", to_dint(Id));
    
    //write the new state to the ClassSvr so it is handled correct
    ClassSvr.Write(input:= newState);
  elsif Level = eal_Error  & newState <> ClassSvr & newState = 1 then
    _RIWO_ERROR_MSG0("Alarm Id {0} activated", to_dint(Id));
    
    //write the new state to the ClassSvr so it is handled correct
    ClassSvr.Write(input:= newState);
  elsif newState <> ClassSvr then
    _RIWO_INFO_MSG0("Alarm Id {0} de-activated", to_dint(Id));
    
    //write the new state to the ClassSvr so it is handled correct
    ClassSvr.Write(input:= newState);
  end_if;
   
  //all error updates must result in disabling the Reset request signal
  ResetReq := 0;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL RiwoParamAlarm::GetParaVal
	VAR_INPUT
		ppara 	: ^DINT;
	END_VAR
	VAR_OUTPUT
		retcode 	: UDINT;
	END_VAR
  
  //Param position 0 contains level and report now, first 8 bits are Level, second 8 bits are report.
  ppara^ := Level$DINT AND 255;
  ppara^ := ppara^ OR Report$DINT SHL 8;
  
  //catch acces exception when sigmatek define is set back to its default of 3 instead of the needed 5
  //otherwise we are writing outside memory
  
  #if MAX_ALARMPARA >= 5
    ppara += 4;
    ppara^ := Parameter1;
    ppara += 4;
    ppara^ := Parameter2;
    ppara += 4;
    ppara^ := Parameter3;
    ppara += 4;
    ppara^ := Parameter4;
  #endif

  retcode := 5;
END_FUNCTION

FUNCTION GLOBAL RiwoParamAlarm::SetActiveSingleParamAlarm
	VAR_INPUT
		inparam1 	: DINT;
	END_VAR
  
   Parameter1  := inparam1;
   Parameter2  := -1;
   Parameter3  := -1;
   Parameter4  := -1;
   _HandleAlarms(1);
END_FUNCTION


FUNCTION GLOBAL RiwoParamAlarm::SetActiveTwoParamsAlarm
	VAR_INPUT
		inparam1 	: DINT;
		inparam2 	: DINT;
	END_VAR
  
   Parameter1  := inparam1;
   Parameter2  := inparam2;
   Parameter3  := -1;
   Parameter4  := -1;
   _HandleAlarms(1);
END_FUNCTION


FUNCTION GLOBAL RiwoParamAlarm::SetActiveThreeParamsAlarm
	VAR_INPUT
		inparam1 	: DINT;
		inparam2 	: DINT;
		inparam3 	: DINT;
	END_VAR
  
   Parameter1  := inparam1;
   Parameter2  := inparam2;
   Parameter3  := inparam3;
   Parameter4  := -1;
   _HandleAlarms(1);

END_FUNCTION



FUNCTION GLOBAL RiwoParamAlarm::GetActiveErrors
	VAR_INPUT
		objNr 	: UDINT;
	END_VAR
	VAR_OUTPUT
		errorsState 	: BDINT := 0;
	END_VAR 
  
  if IsClientConnected(input:= #objNextRiwoParamAlarm) = true then
    errorsState := objNextRiwoParamAlarm.GetActiveErrors(objNr:= (objNr + 1));
  end_if;
  
  //set the coresponding error bit if the error is active
  if ClassSvr <> 0 & Level = eal_Error then
    errorsState := (errorsState or (1 shl objNr));
  end_if;
  
END_FUNCTION


FUNCTION GLOBAL RiwoParamAlarm::GetActiveWarnings
	VAR_INPUT
		objNr 	: UDINT;
	END_VAR
	VAR_OUTPUT
		warningsState 	: BDINT := 0;
	END_VAR
  
  if IsClientConnected(input:= #objNextRiwoParamAlarm) = true then
    warningsState := objNextRiwoParamAlarm.GetActiveWarnings(objNr:= (objNr + 1));
  end_if;
  
    //set the coresponding error bit if the error is active
  if ClassSvr <> 0 & Level = eal_Warning then
    warningsState := (warningsState or (1 shl objNr));
  end_if;

END_FUNCTION


FUNCTION GLOBAL RiwoParamAlarm::GetReportConfigs
	VAR_INPUT
		objNr 	: UDINT;
	END_VAR
	VAR_OUTPUT
		reportConfigs 	: BDINT := 0;
  END_VAR
  
  if IsClientConnected(input:= #objNextRiwoParamAlarm) = true then
    reportConfigs := objNextRiwoParamAlarm.GetReportConfigs(objNr:= (objNr + 1));
  end_if;
  
  //set the coresponding error bit if the error is active
  if Report <> 0 then
    reportConfigs := (reportConfigs or (1 shl objNr));
  end_if;


END_FUNCTION

//add aditional functionality to the QuitAlarm function
FUNCTION VIRTUAL GLOBAL RiwoParamAlarm::QuitAlarm
  _AlarmX0Para::QuitAlarm();
  if ClassSvr <> false then
    ResetReq.Write(input:= true);
  else
    ResetReq.Write(input:= false);
  end_if;
END_FUNCTION

FUNCTION GLOBAL RiwoParamAlarm::SetAlarmIds
	VAR_INPUT
		startId 	: DINT;
	END_VAR
  
  Id.Write(input:= startId);
  Config.Write(input:=startId);
  if IsClientConnected(input:= #objNextRiwoParamAlarm) = true then
    objNextRiwoParamAlarm.SetAlarmIds(startId:= (startId + 1));
  end_if;
  

END_FUNCTION

FUNCTION VIRTUAL GLOBAL RiwoParamAlarm::Id::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

	output := Id;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL RiwoParamAlarm::Id::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	Id := input;
	result := _Id.Data.Write(Id);

END_FUNCTION


FUNCTION VIRTUAL GLOBAL RiwoParamAlarm::GroupId::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

	output := _Group.Data.Read();

END_FUNCTION


FUNCTION VIRTUAL GLOBAL RiwoParamAlarm::GroupId::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	GroupId := input;
	result := _Group.Data.Write(GroupId);

END_FUNCTION


FUNCTION VIRTUAL GLOBAL RiwoParamAlarm::ResetReq::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

	output := ResetReq;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL RiwoParamAlarm::ResetReq::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	ResetReq := input;
	result := ResetReq;

END_FUNCTION