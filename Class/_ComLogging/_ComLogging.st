//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)

//{{LSL_DEFINES
#define COMMLOGGING_CATEGORY_MAX_LEN  255
//}}LSL_DEFINES

//{{LSL_DECLARATION

(*!
<Class
	Name               = "_ComLogging"
	Revision           = "1.3"
	GUID               = "{F9D1F557-AC0C-432D-9920-DDF22514303C}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "true"
	DefBackground      = "500 ms"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(762,120)"
	Comment            = "This class is derived from the _UserLogging Class. With this class the user can add events via a method which will be saved in a log file or the event journal and can be displayed in the debug trace window.">
	<Channels>
		<Server Name="Category" GUID="{66485B70-E4A4-4A80-B232-28025CC08333}" Class="String" Visualized="true" Initialize="true" WriteProtected="false" Retentive="false" Comment="This server displays the string object inside the class, that shows the catagory."/>
		<Client Name="CategoryString" Required="true" Internal="true"/>
	</Channels>
	<Dependencies>
		<Files>
			<File Path=".\Class\_ComLogging\_ComLogging_de.pdf"/>
			<File Path=".\Class\_ComLogging\_ComLogging_en.pdf"/>
		</Files>
	</Dependencies>
	<RevDoku>
		<Owner Company="Sigmatek"/>
		<Dokumentation Revision="1.4" Date="2021-03-17" Author="HubChr" Company="Sigmatek" Description="New version v1.6 of base class _UserLogging implemented."/>
		<Dokumentation Revision="1.3" Date="2021-03-09" Author="HubChr" Company="Sigmatek" Description="New version v1.5 of base class _UserLogging implemented."/>
		<Dokumentation Revision="1.2" Date="2020-04-21" Author="VelGer" Company="Sigmatek" Description="1. Special: The return value type of the method AddEntry() in the base (_UserLogging) changed type, this type change was implemented in the method _ComLogging::AddUserEntry() to ensure future compatibility."/>
		<Dokumentation Revision="1.1" Date="2019-05-08" Author="VelGer" Company="Sigmatek" Description="Client Name Correction."/>
		<Dokumentation Revision="1.0" Date="2019-03-07" Author="ZilSal" Company="Sigmatek"/>
	</RevDoku>
	<Network Name="_ComLogging">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "_base"
				GUID       = "{A12551FB-CCCF-4F14-B469-88096E899C34}"
				Class      = "_UserLogging"
				Position   = "(218,120)"
				Visualized = "true"
				Remotely   = "true">
				<Channels>
					<Server Name="DebugCnt"/>
					<Server Name="Env_EventLogLevelName"/>
					<Server Name="Env_EventLogLevelVal"/>
					<Server Name="Env_FileLogLevelName"/>
					<Server Name="Env_FileLogLevelVal"/>
					<Server Name="ErrorCnt"/>
					<Server Name="EventLogLevel"/>
					<Server Name="FileLogLevel"/>
					<Server Name="Flush"/>
					<Server Name="InfoCnt"/>
					<Server Name="InitOK"/>
					<Server Name="LogFileQuota" Value="USERLOGGING_DEFAULTLOGFILE_QUOTA"/>
					<Server Name="LogFlushInterval"/>
					<Server Name="WarningCnt"/>
					<Client Name="cActivateTrace"/>
					<Client Name="cEventLog"/>
					<Client Name="cLogBufferSize"/>
					<Client Name="cLogFileID"/>
					<Client Name="SigCLib"/>
					<Client Name="SysMsg"/>
				</Channels>
			</Object>
			<Object
				Name       = "CategoryString"
				GUID       = "{9DF4E849-BD89-4FE4-8251-43224A76DB6D}"
				Class      = "String"
				Position   = "(450,1290)"
				Visualized = "true"
				Remotely   = "true">
				<Channels>
					<Server Name="Data"/>
					<Client Name="SingleRealloc" Value="1"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
			<Comment Position="(1200,990)" Size="(360,240)" Text="_ComLogging Calls AddEntry in _UserLogging, adding the Initialised Category String"/>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.InitOK" Destination="_base.InitOK" Vertices="(1716,210),(744,210),"/>
			<Connection Source="this.FileLogLevel" Destination="_base.FileLogLevel" Vertices="(1716,390),(1020,390),(990,420),(960,420),(930,450),(744,450),"/>
			<Connection Source="this.EventLogLevel" Destination="_base.EventLogLevel" Vertices="(1716,510),(1020,510),(990,540),(990,720),(960,750),(744,750),"/>
			<Connection Source="this.ErrorCnt" Destination="_base.ErrorCnt" Vertices="(1716,750),(1140,750),(1110,780),(1110,1080),(1080,1110),(744,1110),"/>
			<Connection Source="this.DebugCnt" Destination="_base.DebugCnt" Vertices="(1716,810),(1170,810),(1140,840),(1140,1140),(1110,1170),(744,1170),"/>
			<Connection Source="this.InfoCnt" Destination="_base.InfoCnt" Vertices="(1716,630),(1080,630),(1050,660),(1050,960),(1020,990),(744,990),"/>
			<Connection Source="this.Flush" Destination="_base.Flush" Vertices="(1716,270),(744,270),"/>
			<Connection Source="this.Category" Destination="CategoryString.Data" Vertices="(1716,870),(1200,870),(1170,900),(1170,1350),(1140,1380),(1186,1380),"/>
			<Connection Source="_base.cEventLog" Destination="this.cEventLog" Vertices="(218,210),(38,210),"/>
			<Connection Source="this.Env_FileLogLevelName" Destination="_base.Env_FileLogLevelName" Vertices="(1716,450),(990,450),(960,480),(960,540),(930,570),(744,570),"/>
			<Connection Source="_base.cActivateTrace" Destination="this.cActivateTrace" Vertices="(218,450),(38,450),"/>
			<Connection Source="_base.cLogBufferSize" Destination="this.cLogBufferSize" Vertices="(218,390),(38,390),"/>
			<Connection Source="this.WarningCnt" Destination="_base.WarningCnt" Vertices="(1716,690),(1110,690),(1080,720),(1080,1020),(1050,1050),(744,1050),"/>
			<Connection Source="this.CategoryString" Destination="CategoryString.Data"/>
			<Connection Source="_base.cLogFileID" Destination="this.cLogFileID" Vertices="(218,510),(38,510),"/>
			<Connection Source="this.LogFlushInterval" Destination="_base.LogFlushInterval" Vertices="(1716,330),(744,330),"/>
			<Connection Source="this.Env_EventLogLevelName" Destination="_base.Env_EventLogLevelName" Vertices="(1716,570),(1050,570),(1020,600),(1020,780),(990,810),(744,810),"/>
			<Connection Source="_base.SysMsg" Destination="this.SysMsg" Vertices="(218,270),(38,270),"/>
			<Connection Source="_base.SigCLib" Destination="this.SigCLib" Vertices="(218,330),(38,330),"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
#pragma using _UserLogging

_ComLogging : CLASS
: _UserLogging
  //Servers:
	Category 	: SvrChCmd_UDINT;
  //Clients:
	CategoryString 	: CltChCmd_String;
  //Variables:
		aCategoryString : ARRAY [0..COMMLOGGING_CATEGORY_MAX_LEN] OF CHAR;

		bCategoryStringSet 	: BOOL;
  //Functions:
	
	FUNCTION GLOBAL SetCategoryString;
				//! <Function Comment="This method can save a event message to the log file or event journal and display the message in the debug trace window." Name="AddUserEntry"/>
	FUNCTION GLOBAL AddUserEntry
		VAR_INPUT
			Level 	: UDINT;			//! <Variable Comment="Level Nr of the event. USINT&#13;&#10;&#13;&#10;2#00001 = Info&#13;&#10;2#00100 = Warning&#13;&#10;2#01000 = Error&#13;&#10;2#10000 = Debug" Name="AddUserEntry.Level"/>
			MsgGroup 	: DINT;			//! <Variable Comment="Number of the Message Group. UDINT" Name="AddUserEntry.MsgGroup"/>
			MsgNbr 	: DINT;			//! <Variable Comment="Number of the message. UDINT" Name="AddUserEntry.MsgNbr"/>
			pMsg 	: ^CHAR;			//! <Variable Comment="Pointer to the event message text. Pointer of CHAR" Name="AddUserEntry.pMsg"/>
			pPara1 	: ^DINT;			//! <Variable Comment="Pointer to the first parameter (number). Pointer of UDINT" Name="AddUserEntry.pPara1"/>
			pPara2 	: ^DINT;			//! <Variable Comment="Pointer to the second parameter (number). Pointer of UDINT" Name="AddUserEntry.pPara2"/>
			pPara3 	: ^DINT;			//! <Variable Comment="Pointer to the third parameter (number). Pointer of UDINT" Name="AddUserEntry.pPara3"/>
			pPara4 	: ^DINT;			//! <Variable Comment="Pointer to the forth parameter (number). Pointer of UDINT" Name="AddUserEntry.pPara4"/>
		END_VAR
		VAR_OUTPUT
			Retcode 	: DINT;			//! <Variable Comment="Retcode 0: Sucess&#13;&#10;Retcode 1: Part of the message was too long." Name="AddUserEntry.Retcode"/>
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Category::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Category::Write
		VAR_INPUT
			input (EAX) 	: UDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: UDINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma using String


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB _ComLogging::@CT_
0$UINT,
2#0100000000000000$UINT, //TY__COMLOGGING
1$UINT, 3$UINT, (SIZEOF(::_ComLogging))$UINT, 
1$UINT, 1$UINT, 0$UINT, 
TO_UDINT(776174809), "_ComLogging", //Class
TO_UDINT(2236268114), "_UserLogging", 1$UINT, 6$UINT, //Baseclass
//Servers:
(::_ComLogging.Category.pMeth)$UINT, _CH_SVR_OBJ$UINT, 2#0000000001000000$UINT, TO_UDINT(3229582733), "Category", 
//Clients:
(::_ComLogging.CategoryString.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(396192577), "CategoryString", TO_UDINT(1850111279), "String", 1$UINT, 11$UINT, 
END_FUNCTION


#define USER_CNT__ComLogging 1

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT__ComLogging] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION _ComLogging::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
		nCmdSize	: UINT;
	END_VAR

	ret_code	:= _UserLogging::@STD();
	IF ret_code <> C_OK THEN
		RETURN;
	END_IF;
	nCmdSize		:= _UserLogging::InitOK.pMeth^.nCmds$UINT*SIZEOF(pVoid) + CMDMETH.Init;

	_memcpy((#vmt.CmdTable)$^USINT, _UserLogging::InitOK.pMeth, nCmdSize);
	vmt.CmdTable.nCmds		:= nSTDCMD + USER_CNT__ComLogging;
	_UserLogging::InitOK.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF _UserLogging::InitOK.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	_memcpy((#vmt.CmdTable)$^USINT, Category.pMeth, SIZEOF(CMDMETH));
	vmt.CmdTable.nCmds		:= nSTDCMD;
	vmt.CmdTable.Read		:= #Category::Read();
	vmt.CmdTable.Write		:= #Category::Write();
	Category.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF Category.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION


FUNCTION VIRTUAL GLOBAL _ComLogging::Category::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR

	Category := CategoryString.Data.Read();
	output := Category;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL _ComLogging::Category::Write
	VAR_INPUT
		input (EAX) 	: UDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: UDINT;
	END_VAR

	Category := input;
	result := (CategoryString.Data.Write(Category))$UDINT;

END_FUNCTION


FUNCTION GLOBAL _ComLogging::AddUserEntry
	VAR_INPUT
		Level 	  : UDINT;
		MsgGroup 	: DINT;
		MsgNbr 	  : DINT;
		pMsg 	    : ^CHAR;
		pPara1 	  : ^DINT;
		pPara2 	  : ^DINT;
		pPara3 	  : ^DINT;
		pPara4 	  : ^DINT;
	END_VAR
	VAR_OUTPUT
		Retcode 	: DINT;
	END_VAR  
  
  if bCategoryStringSet = FALSE then
    SetCategoryString();
    bCategoryStringSet := TRUE;
  end_if;
  
  Retcode := AddEntry(pCategory :=  #aCategoryString[0], 
                      Level     :=  Level, 
                      MsgGroup  :=  MsgGroup, 
                      MsgNbr    :=  MsgNbr, 
                      pMsg      :=  pMsg, 
                      pPara1    :=  pPara1, 
                      pPara2    :=  pPara2, 
                      pPara3    :=  pPara3, 
                      pPara4    :=  pPara4);
 
END_FUNCTION


FUNCTION GLOBAL _ComLogging::SetCategoryString
  
  //Clear the Category String
  SigCLib.MemSet( dst :=  #aCategoryString, 
                  c   :=  0x00, 
                  len :=  sizeof(aCategoryString));
                    
  //Read the String to local var
  CategoryString.ReadDataOff( udOff :=  0, 
                              pData :=  #aCategoryString[0], 
                              udMax :=  (sizeof(aCategoryString)-1));
  
END_FUNCTION
