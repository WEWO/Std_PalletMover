//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "MQTTClient_Interface_Config"
	Revision           = "1.1"
	GUID               = "{AECCFD0B-5BB8-4BA5-8549-CA058963FD9D}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(844,120)"
	Comment            = "This class is used to configure the MQTTClient_Interface Class in conjunction with or as opposed to using the XML Configuration.&#13;&#10;The MQTTClient_Interface class first reads the XML configuration if present and the the configuration specified by this class.&#13;&#10;Most common settings are possible on this derivation of the MQTTClient_Interface_ConfigBase Class.">
	<Channels>
		<Server Name="CAFileString" GUID="{EE134C28-A9B4-44F4-81BE-0327DFE4368D}" Class="StringRAM" Visualized="true" Initialize="true" WriteProtected="false" Retentive="false" Comment="Object channel to the StringRAM object on which the CA Filename string is to be specified.&#13;&#10;&#13;&#10;The File should be placed in &quot;C:/LSLSYS/SSL/&quot; and the filename should be specified in the string:&#13;&#10;&#13;&#10;Example:&#13;&#10;Full path to the file is: &quot;C:/LSLSYS/SSL/myFile.cert&quot;&#13;&#10;String should contain: &quot;myFile.cert&quot;"/>
		<Server Name="CertFileString" GUID="{9DC569DD-6821-4311-BF29-11FB522B0A14}" Class="StringRAM" Visualized="true" Initialize="true" WriteProtected="false" Retentive="false" Comment="Object channel to the StringRAM object on which the Cert Filename string is to be specified.&#13;&#10;&#13;&#10;The File should be placed in &quot;C:/LSLSYS/SSL/&quot; and the filename should be specified in the string:&#13;&#10;&#13;&#10;Example:&#13;&#10;Full path to the file is: &quot;C:/LSLSYS/SSL/myFile.cert&quot;&#13;&#10;String should contain: &quot;myFile.cert&quot;"/>
		<Server Name="ClientIDString" GUID="{C6C1E5EB-FD96-44A0-B4D8-3B1487C46346}" Class="StringRAM" Visualized="true" Initialize="true" WriteProtected="false" Retentive="false" Comment="Object channel to the StringRAM object on which the ClientID string is to be specified.&#13;&#10;&#13;&#10;If not specified the XML Value / CPU Serial number is used."/>
		<Server Name="Exponential" GUID="{C21CF3C9-EB07-4711-9C4F-BEF15A6ECD81}" Visualized="false" Initialize="true" DefValue="0" WriteProtected="false" Retentive="File" Comment="Whether the reconnection delay should increase exponentially should be specified on this server.&#13;&#10;0 = Linear Increase. (MinInterval must be &gt;= 1).&#13;&#10;1 = Exponential Increase. (MinInterval must be &gt;= 2).&#13;&#10;&#13;&#10;With MinInterval = 2 and MaxInterval = 30, Reconnection Intervals will be:&#13;&#10;0: 2,4,6,8,10,...,30,30,30,...&#13;&#10;1: 2,4,8,16,30,30,30,..."/>
		<Server Name="HostnameString" GUID="{9348E556-3619-4972-A1AD-1C5A6A5C8ADB}" Class="StringRAM" Visualized="true" Initialize="true" WriteProtected="false" Retentive="false" Comment="Object channel to the StringRAM object on which the Hostname string is to be specified."/>
		<Server Name="KeepAlive" GUID="{C438480E-F053-4990-9EDC-CE752CCCB534}" Visualized="false" Initialize="true" DefValue="60" WriteProtected="false" Retentive="File" Comment="KeepAlive time in seconds is to be specified on this server.&#13;&#10;&#13;&#10;Default = 60."/>
		<Server Name="KeyFilePassString" GUID="{13B19058-9B84-43F2-B0D1-00E1E8275063}" Class="StringRAM" Visualized="true" Initialize="true" WriteProtected="false" Retentive="false" Comment="Object channel to the StringRAM object on which the KeyFile Password string is to be specified."/>
		<Server Name="KeyFileString" GUID="{FFF39AAB-8652-455B-9850-DF147392EF5A}" Class="StringRAM" Visualized="true" Initialize="true" WriteProtected="false" Retentive="false" Comment="Object channel to the StringRAM object on which the Key Filename string is to be specified.&#13;&#10;&#13;&#10;The File should be placed in &quot;C:/LSLSYS/SSL/&quot; and the filename should be specified in the string:&#13;&#10;&#13;&#10;Example:&#13;&#10;Full path to the file is: &quot;C:/LSLSYS/SSL/myFile.cert&quot;&#13;&#10;String should contain: &quot;myFile.cert&quot;"/>
		<Server Name="MaxInflightMsgs" GUID="{4554DCCA-8D5A-4A87-911E-41BE42AFDF7E}" Visualized="false" Initialize="true" DefValue="20" WriteProtected="false" Retentive="File" Comment="Maximum number of inflight messages are to be specified on this server.&#13;&#10;In a standard application this value should not be changed.&#13;&#10;&#13;&#10;Default = 20."/>
		<Server Name="MaxInterval" GUID="{E9C4BF89-9C91-496D-A03A-92B697CBAFEC}" Visualized="false" Initialize="true" DefValue="30" WriteProtected="false" Retentive="File" Comment="Maximum delay interval to be used for the reconnection procedure, should be specified in seconds.&#13;&#10;&#13;&#10;Default = 30."/>
		<Server Name="MinInterval" GUID="{580D9478-EE1E-4D0A-B6CC-F771A6B38F89}" Visualized="false" Initialize="true" DefValue="2" WriteProtected="false" Retentive="File" Comment="Minimum delay interval to be used for the reconnection procedure, should be specified in seconds.&#13;&#10;&#13;&#10;Default = 2."/>
		<Server Name="PasswordString" GUID="{DF075976-B19A-464C-A223-348306029028}" Class="StringRAM" Visualized="true" Initialize="true" WriteProtected="false" Retentive="false" Comment="Object channel to the StringRAM object on which the Password string is to be specified."/>
		<Server Name="Port" GUID="{9A684056-B4C2-4E70-B24E-B6A1B9147CB1}" Visualized="false" Initialize="true" DefValue="1883" WriteProtected="false" Retentive="File" Comment="Connection port number is to be specified on this server, defaults are:&#13;&#10;&#13;&#10;Non-Encrypted: 1833&#13;&#10;Encrypted (No Client Cert): 8883&#13;&#10;Encrypted (With Client Cert): 8884&#13;&#10;&#13;&#10;Default = 1883."/>
		<Server Name="SetAuthenticationParameters" GUID="{CD50B691-CA23-426B-83D5-9ECCB36927C2}" Visualized="false" Initialize="true" DefValue="0" WriteProtected="false" Retentive="File" Comment="On this server the user must specify whether the Authentication Parameters are to be set or ignored during configuration, if ignored the default / XML configured values will be used by the MQTTClient_Interface instance.&#13;&#10;&#13;&#10;Default = 0."/>
		<Server Name="SetCAFile" GUID="{38CF49D3-0710-4236-9A94-F02C25121A41}" Visualized="false" Initialize="true" DefValue="0" WriteProtected="false" Retentive="File" Comment="On this server the user must specify whether the TLS - CA File is to be specified or ignored during configuration, if ignored the default / XML configured value will be used by the MQTTClient_Interface instance.&#13;&#10;&#13;&#10;Default = 0."/>
		<Server Name="SetCertFile" GUID="{13BED0C6-CE64-4380-A00A-D7AFF9CF6140}" Visualized="false" Initialize="true" DefValue="0" WriteProtected="false" Retentive="File" Comment="On this server the user must specify whether the TLS - Cert File is to be specified or ignored during configuration, if ignored the default / XML configured value will be used by the MQTTClient_Interface instance.&#13;&#10;&#13;&#10;Default = 0."/>
		<Server Name="SetClientID" GUID="{92DEE502-3E17-40C3-8A1B-4DFC5D66EB4E}" Visualized="false" Initialize="true" DefValue="0" WriteProtected="false" Retentive="File" Comment="On this server the user must specify whether the ClientID is to be set or ignored during configuration, if ignored the default / XML configured value will be used by the MQTTClient_Interface instance.&#13;&#10;&#13;&#10;Default = 0."/>
		<Server Name="SetConnectionParameters" GUID="{8BBADB84-4071-40E7-AF43-5C14C7A89742}" Visualized="false" Initialize="true" DefValue="0" WriteProtected="false" Retentive="File" Comment="On this server the user must specify whether the Connection Parameters are to be set or ignored during configuration, if ignored the default / XML configured values will be used by the MQTTClient_Interface instance.&#13;&#10;&#13;&#10;Default = 0."/>
		<Server Name="SetKeyFile" GUID="{FE839D6D-B38C-4687-9C66-D71E7FF8543B}" Visualized="false" Initialize="true" DefValue="0" WriteProtected="false" Retentive="File" Comment="On this server the user must specify whether the TLS - Key File is to be specified or ignored during configuration, if ignored the default / XML configured value will be used by the MQTTClient_Interface instance.&#13;&#10;&#13;&#10;Default = 0."/>
		<Server Name="SetKeyFilePass" GUID="{E8C3F84A-F37B-419E-8117-33F661D54128}" Visualized="false" Initialize="true" DefValue="0" WriteProtected="false" Retentive="File" Comment="On this server the user must specify whether the TLS - Key File Password is to be specified or ignored during configuration, if ignored the default / XML configured value will be used by the MQTTClient_Interface instance.&#13;&#10;&#13;&#10;Default = 0."/>
		<Server Name="SetMaxInflightMsgs" GUID="{E479CC90-2959-4CF3-8BEF-FE8F4C19EA1B}" Visualized="false" Initialize="true" DefValue="0" WriteProtected="false" Retentive="File" Comment="On this server the user must specify whether the Max Inflight Messages value is to be set or ignored during configuration, if ignored the default / XML configured value will be used by the MQTTClient_Interface instance.&#13;&#10;&#13;&#10;Default = 0."/>
		<Server Name="SetReconnectionParameters" GUID="{C1A5051C-D5DB-4C83-A96F-5EA8AEF333DA}" Visualized="false" Initialize="true" DefValue="0" WriteProtected="false" Retentive="File" Comment="On this server the user must specify whether the Reconnection Parameters are to be set or ignored during configuration, if ignored the default / XML configured values will be used by the MQTTClient_Interface instance.&#13;&#10;&#13;&#10;Default = 0."/>
		<Server Name="SetWillParameters" GUID="{BFA2D469-A0F0-486F-BED4-7826A6EF265C}" Visualized="false" Initialize="true" DefValue="0" WriteProtected="false" Retentive="File" Comment="On this server the user must specify whether the Will Parameters are to be set or ignored during configuration, if ignored the default / XML configured values will be used by the MQTTClient_Interface instance.&#13;&#10;&#13;&#10;Default = 0."/>
		<Server Name="UsernameString" GUID="{C4EDCA1A-EBD3-46DD-BBC6-57912EA54E6C}" Class="StringRAM" Visualized="true" Initialize="true" WriteProtected="false" Retentive="false" Comment="Object channel to the StringRAM object on which the Username string is to be specified."/>
		<Server Name="WillQoS" GUID="{14841FDC-A9BA-4B7C-BACA-915CD4D7188A}" Visualized="false" Initialize="true" DefValue="0" WriteProtected="false" Retentive="File" Comment="Quality of Service (QoS) to be used for the Will Message delivery.&#13;&#10;&#13;&#10;Possible Values = 0,1,2.&#13;&#10;Default = 0."/>
		<Server Name="WillRetained" GUID="{BF097679-ED9C-4654-90A1-84BC75EE69FA}" Visualized="false" Initialize="true" WriteProtected="false" Retentive="File" Comment="Whether the Will Message is to be retained on the broker for new clients to receive when connecting after this will has been published.&#13;&#10;&#13;&#10;0 = Not Retained.&#13;&#10;1 = Retained.&#13;&#10;&#13;&#10;Default = 0."/>
		<Server Name="WillText" GUID="{D98F79C7-F8A5-44EF-8A22-01FA6026E425}" Class="StringRAM" Visualized="true" Initialize="true" WriteProtected="false" Retentive="false" Comment="Object channel to the StringRAM object on which the Will Text string is to be specified."/>
		<Server Name="WillTopic" GUID="{30E630A5-32DB-4D83-B081-E7412DDB7033}" Class="StringRAM" Visualized="true" Initialize="true" WriteProtected="false" Retentive="false" Comment="Object channel to the StringRAM object on which the Will Topic string is to be specified."/>
		<Client Name="CAFilePathStringObject" Required="true" Internal="true"/>
		<Client Name="CertFilePathStringObject" Required="true" Internal="true"/>
		<Client Name="ClientIDStringObject" Required="true" Internal="true"/>
		<Client Name="HostnameStringObject" Required="true" Internal="true"/>
		<Client Name="KeyFilePathStringObject" Required="true" Internal="true"/>
		<Client Name="PasswordStringObject" Required="true" Internal="true"/>
		<Client Name="SigCLib" Required="false" Internal="false" Comment="Object Channel to the SigCLib Client Interface, should not be connected by the user."/>
		<Client Name="TLSPasswordStringObject" Required="true" Internal="true"/>
		<Client Name="UsernameStringObject" Required="true" Internal="true"/>
		<Client Name="WillTextStringObject" Required="true" Internal="true"/>
		<Client Name="WillTopicStringObject" Required="true" Internal="true"/>
	</Channels>
	<Separators>
		<Servers>
			<SepChn Position="3"/>
			<SepChn Position="0"/>
			<SepChn Position="8"/>
			<SepChn Position="11"/>
			<SepChn Position="16"/>
			<SepChn Position="22"/>
			<SepChn Position="26"/>
		</Servers>
	</Separators>
	<Dependencies>
		<Files>
			<File Path=".\Class\MQTTClient_Interface_Config\MQTTClient_Interface_Config_de.pdf"/>
			<File Path=".\Class\MQTTClient_Interface_Config\MQTTClient_Interface_Config_en.pdf"/>
		</Files>
	</Dependencies>
	<RevDoku>
		<Owner Company="Sigmatek" Author="VelGer"/>
		<Dokumentation Revision="1.1" Date="2019-06-12" Author="VelGer" Company="Sigmatek" Description="Server Comments Corrected."/>
		<Dokumentation Revision="1.0" Date="2019-05-08" Author="VelGer" Company="Sigmatek" Description="Initial Creation."/>
	</RevDoku>
	<Network Name="MQTTClient_Interface_Config">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "_base"
				GUID       = "{A9EB2A8A-AADD-44E7-A45B-FB4D1944B74C}"
				Class      = "MQTTClient_Interface_ConfigBase"
				Position   = "(218,120)"
				Visualized = "false">
				<Channels>
					<Server Name="LoginOK"/>
					<Client Name="MQTTClient_Interface"/>
				</Channels>
			</Object>
			<Object
				Name       = "CAFilePathStringObject"
				GUID       = "{5E285E2A-F5BB-4FF7-A6FD-6A765B3019F4}"
				Class      = "StringRAM"
				Position   = "(120,2070)"
				Visualized = "true"
				Remotely   = "true">
				<Channels>
					<Server Name="Data"/>
					<Client Name="SingleRealloc" Value="1"/>
					<Client Name="UseFile"/>
				</Channels>
			</Object>
			<Object
				Name       = "CertFilePathStringObject"
				GUID       = "{F48DA786-5135-414E-BB0E-B7C8D26F7D9B}"
				Class      = "StringRAM"
				Position   = "(120,2340)"
				Visualized = "true"
				Remotely   = "true">
				<Channels>
					<Server Name="Data"/>
					<Client Name="SingleRealloc" Value="1"/>
					<Client Name="UseFile"/>
				</Channels>
			</Object>
			<Object
				Name       = "ClientIDStringObject"
				GUID       = "{4BBA38DA-2917-4B7D-832F-C3998BDB5E83}"
				Class      = "StringRAM"
				Position   = "(120,420)"
				Visualized = "true"
				Remotely   = "true">
				<Channels>
					<Server Name="Data"/>
					<Client Name="SingleRealloc" Value="1"/>
					<Client Name="UseFile" Value="1"/>
				</Channels>
			</Object>
			<Object
				Name       = "HostnameStringObject"
				GUID       = "{828C33FD-0CE1-4058-9091-739F568235B3}"
				Class      = "StringRAM"
				Position   = "(120,720)"
				Visualized = "true"
				Remotely   = "true">
				<Channels>
					<Server Name="Data"/>
					<Client Name="SingleRealloc" Value="1"/>
					<Client Name="UseFile" Value="1"/>
				</Channels>
			</Object>
			<Object
				Name       = "KeyFilePathStringObject"
				GUID       = "{05E71A78-CDD0-4C0B-9E09-F691FAC9AD47}"
				Class      = "StringRAM"
				Position   = "(120,2610)"
				Visualized = "true"
				Remotely   = "true">
				<Channels>
					<Server Name="Data"/>
					<Client Name="SingleRealloc" Value="1"/>
					<Client Name="UseFile"/>
				</Channels>
			</Object>
			<Object
				Name       = "PasswordStringObject"
				GUID       = "{EB9148AA-6BAB-467C-BC14-74AF237F0E58}"
				Class      = "StringRAM"
				Position   = "(120,1800)"
				Visualized = "true"
				Remotely   = "true">
				<Channels>
					<Server Name="Data"/>
					<Client Name="SingleRealloc" Value="1"/>
					<Client Name="UseFile" Value="1"/>
				</Channels>
			</Object>
			<Object
				Name       = "TLSPasswordStringObject"
				GUID       = "{16DDC0BD-D52E-4E9A-B6DC-82212B29B18B}"
				Class      = "StringRAM"
				Position   = "(120,2880)"
				Visualized = "true"
				Remotely   = "true">
				<Channels>
					<Server Name="Data"/>
					<Client Name="SingleRealloc" Value="1"/>
					<Client Name="UseFile"/>
				</Channels>
			</Object>
			<Object
				Name       = "UsernameStringObject"
				GUID       = "{3246CB25-249A-4445-9EBD-CA76A373CD50}"
				Class      = "StringRAM"
				Position   = "(120,1530)"
				Visualized = "true"
				Remotely   = "true">
				<Channels>
					<Server Name="Data"/>
					<Client Name="SingleRealloc" Value="1"/>
					<Client Name="UseFile" Value="1"/>
				</Channels>
			</Object>
			<Object
				Name       = "WillTextStringObject"
				GUID       = "{590F5C55-973D-4836-A202-58C2EA26A446}"
				Class      = "StringRAM"
				Position   = "(120,1260)"
				Visualized = "true"
				Remotely   = "true">
				<Channels>
					<Server Name="Data"/>
					<Client Name="SingleRealloc" Value="1"/>
					<Client Name="UseFile" Value="1"/>
				</Channels>
			</Object>
			<Object
				Name       = "WillTopicStringObject"
				GUID       = "{444D91F9-DFA1-4C16-B230-574B23E88431}"
				Class      = "StringRAM"
				Position   = "(120,990)"
				Visualized = "true"
				Remotely   = "true">
				<Channels>
					<Server Name="Data"/>
					<Client Name="SingleRealloc" Value="1"/>
					<Client Name="UseFile" Value="1"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
			<Comment Position="(900,2130)" Size="(180,150)" Text="Use property window to enter text."/>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.LoginOK" Destination="_base.LoginOK" Vertices="(1236,210),(518,210),"/>
			<Connection Source="_base.MQTTClient_Interface" Destination="this.MQTTClient_Interface" Vertices="(218,210),(38,210),"/>
			<Connection Source="this.ClientIDStringObject" Destination="ClientIDStringObject.Data"/>
			<Connection Source="this.ClientIDString" Destination="ClientIDStringObject.Data" Vertices="(1236,330),(660,330),(630,360),(630,480),(600,510),(706,510),"/>
			<Connection Source="this.HostnameStringObject" Destination="HostnameStringObject.Data"/>
			<Connection Source="this.HostnameString" Destination="HostnameStringObject.Data" Vertices="(1236,450),(720,450),(690,480),(690,780),(660,810),(706,810),"/>
			<Connection Source="this.WillTopicStringObject" Destination="WillTopicStringObject.Data"/>
			<Connection Source="this.WillTextStringObject" Destination="WillTextStringObject.Data"/>
			<Connection Source="this.WillTopic" Destination="WillTopicStringObject.Data" Vertices="(1236,1050),(630,1050),(600,1080),(706,1080),"/>
			<Connection Source="this.WillText" Destination="WillTextStringObject.Data" Vertices="(1236,1110),(660,1110),(630,1140),(630,1320),(600,1350),(706,1350),"/>
			<Connection Source="this.UsernameStringObject" Destination="UsernameStringObject.Data"/>
			<Connection Source="this.UsernameString" Destination="UsernameStringObject.Data" Vertices="(1236,1350),(660,1350),(630,1380),(630,1590),(600,1620),(706,1620),"/>
			<Connection Source="this.PasswordStringObject" Destination="PasswordStringObject.Data"/>
			<Connection Source="this.PasswordString" Destination="PasswordStringObject.Data" Vertices="(1236,1410),(690,1410),(660,1440),(660,1860),(630,1890),(706,1890),"/>
			<Connection Source="this.CAFilePathStringObject" Destination="CAFilePathStringObject.Data"/>
			<Connection Source="this.CertFilePathStringObject" Destination="CertFilePathStringObject.Data"/>
			<Connection Source="this.KeyFilePathStringObject" Destination="KeyFilePathStringObject.Data"/>
			<Connection Source="this.TLSPasswordStringObject" Destination="TLSPasswordStringObject.Data"/>
			<Connection Source="this.CAFileString" Destination="CAFilePathStringObject.Data" Vertices="(1236,1530),(720,1530),(690,1560),(690,2130),(660,2160),(706,2160),"/>
			<Connection Source="this.CertFileString" Destination="CertFilePathStringObject.Data" Vertices="(1236,1650),(750,1650),(720,1680),(720,2400),(690,2430),(706,2430),"/>
			<Connection Source="this.KeyFileString" Destination="KeyFilePathStringObject.Data" Vertices="(1236,1770),(780,1770),(750,1800),(750,2670),(720,2700),(706,2700),"/>
			<Connection Source="this.KeyFilePassString" Destination="TLSPasswordStringObject.Data" Vertices="(1236,1890),(810,1890),(780,1920),(780,2940),(750,2970),(706,2970),"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
#pragma using MQTTClient_Interface_ConfigBase

MQTTClient_Interface_Config : CLASS
: MQTTClient_Interface_ConfigBase
  //Servers:
	SetClientID 	: SvrCh_DINT;
	ClientIDString 	: SvrChCmd_UDINT;
	SetConnectionParameters 	: SvrCh_DINT;
	HostnameString 	: SvrChCmd_UDINT;
	KeepAlive 	: SvrCh_DINT;
	Port 	: SvrCh_DINT;
	SetMaxInflightMsgs 	: SvrCh_DINT;
	MaxInflightMsgs 	: SvrCh_DINT;
	SetReconnectionParameters 	: SvrCh_DINT;
	MinInterval 	: SvrCh_DINT;
	MaxInterval 	: SvrCh_DINT;
	Exponential 	: SvrCh_DINT;
	SetWillParameters 	: SvrCh_DINT;
	WillTopic 	: SvrChCmd_UDINT;
	WillText 	: SvrChCmd_UDINT;
	WillQoS 	: SvrCh_DINT;
	WillRetained 	: SvrCh_DINT;
	SetAuthenticationParameters 	: SvrCh_DINT;
	UsernameString 	: SvrChCmd_UDINT;
	PasswordString 	: SvrChCmd_UDINT;
	SetCAFile 	: SvrCh_DINT;
	CAFileString 	: SvrChCmd_UDINT;
	SetCertFile 	: SvrCh_DINT;
	CertFileString 	: SvrChCmd_UDINT;
	SetKeyFile 	: SvrCh_DINT;
	KeyFileString 	: SvrChCmd_UDINT;
	SetKeyFilePass 	: SvrCh_DINT;
	KeyFilePassString 	: SvrChCmd_UDINT;
  //Clients:
	SigCLib 	: CltChCmd_SigCLib;
	ClientIDStringObject 	: CltChCmd_StringRAM;
	HostnameStringObject 	: CltChCmd_StringRAM;
	WillTopicStringObject 	: CltChCmd_StringRAM;
	WillTextStringObject 	: CltChCmd_StringRAM;
	UsernameStringObject 	: CltChCmd_StringRAM;
	PasswordStringObject 	: CltChCmd_StringRAM;
	TLSPasswordStringObject 	: CltChCmd_StringRAM;
	CAFilePathStringObject 	: CltChCmd_StringRAM;
	CertFilePathStringObject 	: CltChCmd_StringRAM;
	KeyFilePathStringObject 	: CltChCmd_StringRAM;
  //Variables:
		aClientID : ARRAY [0..MQTT_PROT_MAX_CLIENTID_NAME_LEN] OF UINT;

		aHostname : ARRAY [0..MQTTCLIENT_HOSTNAME_MAX_LEN] OF UINT;

		iPort 	: INT;
		iKeepAlive 	: INT;
		iMaxInflight 	: INT;
		aUsername : ARRAY [0..MQTTCLIENTINTERFACE_CONNECT_USERNAME_MAX_LEN] OF UINT;

		aPassword : ARRAY [0..MQTTCLIENTINTERFACE_CONNECT_PASSWORD_MAX_LEN] OF UINT;

		aWillTopic : ARRAY [0..MQTTCLIENTINTERFACE_WILL_TOPIC_MAX_LEN] OF UINT;

		aWillMessage : ARRAY [0..MQTTCLIENTINTERFACE_WILL_PAYLOAD_MAX_LEN] OF CHAR;

		iWillQoS 	: INT;
		bWillRetain 	: BOOL;
		iReconnMin 	: INT;
		iReconnMax 	: INT;
		bReconnExp 	: BOOL;
		aCAFile : ARRAY [0..MQTTCLIENTINTERFACE_TLS_CAFILE_MAX_LEN] OF CHAR;

		aCertFile : ARRAY [0..MQTTCLIENTINTERFACE_TLS_CERTFILE_MAX_LEN] OF CHAR;

		aKeyFile : ARRAY [0..MQTTCLIENTINTERFACE_TLS_KEYFILE_MAX_LEN] OF CHAR;

		aTLSPassword : ARRAY [0..MQTTCLIENTINTERFACE_TLS_PASSWORD_MAX_LEN] OF CHAR;

  //Functions:
	
	FUNCTION VIRTUAL GLOBAL ClientID
		VAR_OUTPUT
			Data 	: t_s_ClientID;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL ConnectionParameters
		VAR_OUTPUT
			Data 	: t_s_ConnectionParameters;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL MaxInflightMessages
		VAR_OUTPUT
			Data 	: t_s_MaxInflightMessages;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL ReconnectionParameters
		VAR_OUTPUT
			Data 	: t_s_ReconnectionParameters;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Will
		VAR_OUTPUT
			Data 	: t_s_Will;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL AuthenticationParameters
		VAR_OUTPUT
			Data 	: t_s_Authentication;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL TLS
		VAR_OUTPUT
			Data 	: t_s_TLS;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL ClientIDString::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL ClientIDString::Write
		VAR_INPUT
			input (EAX) 	: UDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL HostnameString::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL HostnameString::Write
		VAR_INPUT
			input (EAX) 	: UDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL WillTopic::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL WillTopic::Write
		VAR_INPUT
			input (EAX) 	: UDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL WillText::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL WillText::Write
		VAR_INPUT
			input (EAX) 	: UDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL UsernameString::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL UsernameString::Write
		VAR_INPUT
			input (EAX) 	: UDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL PasswordString::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL PasswordString::Write
		VAR_INPUT
			input (EAX) 	: UDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL CAFileString::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL CAFileString::Write
		VAR_INPUT
			input (EAX) 	: UDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL CertFileString::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL CertFileString::Write
		VAR_INPUT
			input (EAX) 	: UDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL KeyFileString::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL KeyFileString::Write
		VAR_INPUT
			input (EAX) 	: UDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL KeyFilePassString::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL KeyFilePassString::Write
		VAR_INPUT
			input (EAX) 	: UDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: UDINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma using StringRAM
#pragma usingLtd SigCLib


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB MQTTClient_Interface_Config::@CT_
0$UINT,
2#0100000000000000$UINT, //TY_MQTTCLIENT_INTERFACE_CONFIG
1$UINT, 1$UINT, (SIZEOF(::MQTTClient_Interface_Config))$UINT, 
28$UINT, 11$UINT, 0$UINT, 
TO_UDINT(23675622), "MQTTClient_Interface_Config", //Class
TO_UDINT(3037967591), "MQTTClient_Interface_ConfigBase", 1$UINT, 1$UINT, //Baseclass
//Servers:
(::MQTTClient_Interface_Config.SetClientID.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(25122926), "SetClientID", 
(::MQTTClient_Interface_Config.ClientIDString.pMeth)$UINT, _CH_SVR_OBJ$UINT, 2#0000000001000000$UINT, TO_UDINT(928956472), "ClientIDString", 
(::MQTTClient_Interface_Config.SetConnectionParameters.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(2761140199), "SetConnectionParameters", 
(::MQTTClient_Interface_Config.HostnameString.pMeth)$UINT, _CH_SVR_OBJ$UINT, 2#0000000001000000$UINT, TO_UDINT(2291239933), "HostnameString", 
(::MQTTClient_Interface_Config.KeepAlive.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(3762518058), "KeepAlive", 
(::MQTTClient_Interface_Config.Port.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(1963241592), "Port", 
(::MQTTClient_Interface_Config.SetMaxInflightMsgs.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(1144474340), "SetMaxInflightMsgs", 
(::MQTTClient_Interface_Config.MaxInflightMsgs.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(1071086287), "MaxInflightMsgs", 
(::MQTTClient_Interface_Config.SetReconnectionParameters.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(1232993272), "SetReconnectionParameters", 
(::MQTTClient_Interface_Config.MinInterval.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(3094592789), "MinInterval", 
(::MQTTClient_Interface_Config.MaxInterval.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(1954465306), "MaxInterval", 
(::MQTTClient_Interface_Config.Exponential.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(3858398556), "Exponential", 
(::MQTTClient_Interface_Config.SetWillParameters.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(4290988797), "SetWillParameters", 
(::MQTTClient_Interface_Config.WillTopic.pMeth)$UINT, _CH_SVR_OBJ$UINT, 2#0000000001000000$UINT, TO_UDINT(2448416635), "WillTopic", 
(::MQTTClient_Interface_Config.WillText.pMeth)$UINT, _CH_SVR_OBJ$UINT, 2#0000000001000000$UINT, TO_UDINT(579993388), "WillText", 
(::MQTTClient_Interface_Config.WillQoS.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(4151645741), "WillQoS", 
(::MQTTClient_Interface_Config.WillRetained.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(2970114418), "WillRetained", 
(::MQTTClient_Interface_Config.SetAuthenticationParameters.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(2931794425), "SetAuthenticationParameters", 
(::MQTTClient_Interface_Config.UsernameString.pMeth)$UINT, _CH_SVR_OBJ$UINT, 2#0000000001000000$UINT, TO_UDINT(2096388788), "UsernameString", 
(::MQTTClient_Interface_Config.PasswordString.pMeth)$UINT, _CH_SVR_OBJ$UINT, 2#0000000001000000$UINT, TO_UDINT(506652951), "PasswordString", 
(::MQTTClient_Interface_Config.SetCAFile.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(1814062515), "SetCAFile", 
(::MQTTClient_Interface_Config.CAFileString.pMeth)$UINT, _CH_SVR_OBJ$UINT, 2#0000000001000000$UINT, TO_UDINT(2113863179), "CAFileString", 
(::MQTTClient_Interface_Config.SetCertFile.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(2068614600), "SetCertFile", 
(::MQTTClient_Interface_Config.CertFileString.pMeth)$UINT, _CH_SVR_OBJ$UINT, 2#0000000001000000$UINT, TO_UDINT(49707051), "CertFileString", 
(::MQTTClient_Interface_Config.SetKeyFile.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(1125448983), "SetKeyFile", 
(::MQTTClient_Interface_Config.KeyFileString.pMeth)$UINT, _CH_SVR_OBJ$UINT, 2#0000000001000000$UINT, TO_UDINT(2819870848), "KeyFileString", 
(::MQTTClient_Interface_Config.SetKeyFilePass.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(1229746506), "SetKeyFilePass", 
(::MQTTClient_Interface_Config.KeyFilePassString.pMeth)$UINT, _CH_SVR_OBJ$UINT, 2#0000000001000000$UINT, TO_UDINT(4195840693), "KeyFilePassString", 
//Clients:
(::MQTTClient_Interface_Config.SigCLib.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000000$UINT, TO_UDINT(77440046), "SigCLib", TO_UDINT(77440046), "SigCLib", 0$UINT, 38$UINT, 
(::MQTTClient_Interface_Config.ClientIDStringObject.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(1402964725), "ClientIDStringObject", TO_UDINT(2408581120), "StringRAM", 1$UINT, 10$UINT, 
(::MQTTClient_Interface_Config.HostnameStringObject.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(3719637975), "HostnameStringObject", TO_UDINT(2408581120), "StringRAM", 1$UINT, 10$UINT, 
(::MQTTClient_Interface_Config.WillTopicStringObject.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(2983423227), "WillTopicStringObject", TO_UDINT(2408581120), "StringRAM", 1$UINT, 10$UINT, 
(::MQTTClient_Interface_Config.WillTextStringObject.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(3871676892), "WillTextStringObject", TO_UDINT(2408581120), "StringRAM", 1$UINT, 10$UINT, 
(::MQTTClient_Interface_Config.UsernameStringObject.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(4282579623), "UsernameStringObject", TO_UDINT(2408581120), "StringRAM", 1$UINT, 10$UINT, 
(::MQTTClient_Interface_Config.PasswordStringObject.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(802702775), "PasswordStringObject", TO_UDINT(2408581120), "StringRAM", 1$UINT, 10$UINT, 
(::MQTTClient_Interface_Config.TLSPasswordStringObject.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(3187576744), "TLSPasswordStringObject", TO_UDINT(2408581120), "StringRAM", 1$UINT, 10$UINT, 
(::MQTTClient_Interface_Config.CAFilePathStringObject.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(1730592783), "CAFilePathStringObject", TO_UDINT(2408581120), "StringRAM", 1$UINT, 10$UINT, 
(::MQTTClient_Interface_Config.CertFilePathStringObject.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(4109435245), "CertFilePathStringObject", TO_UDINT(2408581120), "StringRAM", 1$UINT, 10$UINT, 
(::MQTTClient_Interface_Config.KeyFilePathStringObject.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(3537794970), "KeyFilePathStringObject", TO_UDINT(2408581120), "StringRAM", 1$UINT, 10$UINT, 
END_FUNCTION


#define USER_CNT_MQTTClient_Interface_Config 7

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_MQTTClient_Interface_Config] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION MQTTClient_Interface_Config::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
		nCmdSize	: UINT;
	END_VAR

	ret_code	:= MQTTClient_Interface_ConfigBase::@STD();
	IF ret_code <> C_OK THEN
		RETURN;
	END_IF;
	nCmdSize		:= MQTTClient_Interface_ConfigBase::LoginOK.pMeth^.nCmds$UINT*SIZEOF(pVoid) + CMDMETH.Init;

	_memcpy((#vmt.CmdTable)$^USINT, MQTTClient_Interface_ConfigBase::LoginOK.pMeth, nCmdSize);
	vmt.CmdTable.nCmds		:= nSTDCMD + USER_CNT_MQTTClient_Interface_Config;
#pragma warning (disable : 74)
	vmt.UserFcts[0]		:= #ClientID();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[1]		:= #ConnectionParameters();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[2]		:= #MaxInflightMessages();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[3]		:= #ReconnectionParameters();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[4]		:= #Will();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[5]		:= #AuthenticationParameters();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[6]		:= #TLS();

#pragma warning (default : 74)
	MQTTClient_Interface_ConfigBase::LoginOK.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF MQTTClient_Interface_ConfigBase::LoginOK.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	SetClientID.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF SetClientID.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	_memcpy((#vmt.CmdTable)$^USINT, ClientIDString.pMeth, SIZEOF(CMDMETH));
	vmt.CmdTable.nCmds		:= nSTDCMD;
	vmt.CmdTable.Read		:= #ClientIDString::Read();
	vmt.CmdTable.Write		:= #ClientIDString::Write();
	ClientIDString.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClientIDString.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	SetConnectionParameters.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF SetConnectionParameters.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	_memcpy((#vmt.CmdTable)$^USINT, HostnameString.pMeth, SIZEOF(CMDMETH));
	vmt.CmdTable.nCmds		:= nSTDCMD;
	vmt.CmdTable.Read		:= #HostnameString::Read();
	vmt.CmdTable.Write		:= #HostnameString::Write();
	HostnameString.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF HostnameString.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	KeepAlive.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF KeepAlive.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Port.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF Port.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	SetMaxInflightMsgs.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF SetMaxInflightMsgs.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	MaxInflightMsgs.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF MaxInflightMsgs.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	SetReconnectionParameters.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF SetReconnectionParameters.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	MinInterval.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF MinInterval.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	MaxInterval.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF MaxInterval.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Exponential.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF Exponential.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	SetWillParameters.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF SetWillParameters.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	_memcpy((#vmt.CmdTable)$^USINT, WillTopic.pMeth, SIZEOF(CMDMETH));
	vmt.CmdTable.nCmds		:= nSTDCMD;
	vmt.CmdTable.Read		:= #WillTopic::Read();
	vmt.CmdTable.Write		:= #WillTopic::Write();
	WillTopic.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF WillTopic.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	_memcpy((#vmt.CmdTable)$^USINT, WillText.pMeth, SIZEOF(CMDMETH));
	vmt.CmdTable.nCmds		:= nSTDCMD;
	vmt.CmdTable.Read		:= #WillText::Read();
	vmt.CmdTable.Write		:= #WillText::Write();
	WillText.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF WillText.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	WillQoS.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF WillQoS.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	WillRetained.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF WillRetained.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	SetAuthenticationParameters.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF SetAuthenticationParameters.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	_memcpy((#vmt.CmdTable)$^USINT, UsernameString.pMeth, SIZEOF(CMDMETH));
	vmt.CmdTable.nCmds		:= nSTDCMD;
	vmt.CmdTable.Read		:= #UsernameString::Read();
	vmt.CmdTable.Write		:= #UsernameString::Write();
	UsernameString.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF UsernameString.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	_memcpy((#vmt.CmdTable)$^USINT, PasswordString.pMeth, SIZEOF(CMDMETH));
	vmt.CmdTable.nCmds		:= nSTDCMD;
	vmt.CmdTable.Read		:= #PasswordString::Read();
	vmt.CmdTable.Write		:= #PasswordString::Write();
	PasswordString.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF PasswordString.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	SetCAFile.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF SetCAFile.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	_memcpy((#vmt.CmdTable)$^USINT, CAFileString.pMeth, SIZEOF(CMDMETH));
	vmt.CmdTable.nCmds		:= nSTDCMD;
	vmt.CmdTable.Read		:= #CAFileString::Read();
	vmt.CmdTable.Write		:= #CAFileString::Write();
	CAFileString.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF CAFileString.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	SetCertFile.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF SetCertFile.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	_memcpy((#vmt.CmdTable)$^USINT, CertFileString.pMeth, SIZEOF(CMDMETH));
	vmt.CmdTable.nCmds		:= nSTDCMD;
	vmt.CmdTable.Read		:= #CertFileString::Read();
	vmt.CmdTable.Write		:= #CertFileString::Write();
	CertFileString.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF CertFileString.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	SetKeyFile.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF SetKeyFile.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	_memcpy((#vmt.CmdTable)$^USINT, KeyFileString.pMeth, SIZEOF(CMDMETH));
	vmt.CmdTable.nCmds		:= nSTDCMD;
	vmt.CmdTable.Read		:= #KeyFileString::Read();
	vmt.CmdTable.Write		:= #KeyFileString::Write();
	KeyFileString.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF KeyFileString.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	SetKeyFilePass.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF SetKeyFilePass.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	_memcpy((#vmt.CmdTable)$^USINT, KeyFilePassString.pMeth, SIZEOF(CMDMETH));
	vmt.CmdTable.nCmds		:= nSTDCMD;
	vmt.CmdTable.Read		:= #KeyFilePassString::Read();
	vmt.CmdTable.Write		:= #KeyFilePassString::Write();
	KeyFilePassString.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF KeyFilePassString.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION


FUNCTION VIRTUAL GLOBAL MQTTClient_Interface_Config::ClientID
	VAR_OUTPUT
		Data 	: t_s_ClientID;
	END_VAR
  
  //Set the ClientID if active, else return defaults
  if SetClientID = 1 then
    
    //==================================CLIENT ID
    //Clear out ClientID
    SigCLib.MemSet(dst  :=  #aClientID, 
                   c    :=  0x00, 
                   len  :=  sizeof(aClientID));
    
    //Read the string object into the local buffer
    ClientIDStringObject.ToUniCode();
    ClientIDStringObject.TxtGet(pdst    :=  #aClientID[0], 
                                dstsize :=  sizeof(aClientID));
    
    //Set the Return Pointer
    Data.ClientID := #aClientID[0];
    
    
  else
    
    Data := MQTTClient_Interface_ConfigBase::ClientID();
    
  end_if;

  
  
END_FUNCTION


FUNCTION VIRTUAL GLOBAL MQTTClient_Interface_Config::ConnectionParameters
	VAR_OUTPUT
		Data 	: t_s_ConnectionParameters;
	END_VAR
  
  //Set the Connection Parameters if active, else return defaults.
  if SetConnectionParameters = 1 then
    
    //==================================HOSTNAME
    //Clear out Hostname
    SigCLib.MemSet(dst  :=  #aHostname, 
                   c    :=  0x00, 
                   len  :=  sizeof(aHostname));
    
    //Read the string object into the local buffer
    HostnameStringObject.ToUniCode();
    HostnameStringObject.TxtGet(pdst    :=  #aHostname[0], 
                                dstsize :=  sizeof(aHostname));
    
    //Set the Return Pointer
    Data.hostname := #aHostname[0];

    //==================================PORT
    
    Data.keepalive := to_int(KeepAlive);
    
    //==================================KEEPALIVE

    Data.port := to_int(Port);
    
  else
    
    Data := MQTTClient_Interface_ConfigBase::ConnectionParameters();
    
  end_if;
  
END_FUNCTION


FUNCTION VIRTUAL GLOBAL MQTTClient_Interface_Config::ClientIDString::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR

	ClientIDString := ClientIDStringObject.Data.Read();
	output := ClientIDString;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL MQTTClient_Interface_Config::ClientIDString::Write
	VAR_INPUT
		input (EAX) 	: UDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: UDINT;
	END_VAR

	ClientIDString := input;
	result := (ClientIDStringObject.Data.Write(ClientIDString))$UDINT;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL MQTTClient_Interface_Config::HostnameString::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR

	HostnameString := HostnameStringObject.Data.Read();
	output := HostnameString;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL MQTTClient_Interface_Config::HostnameString::Write
	VAR_INPUT
		input (EAX) 	: UDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: UDINT;
	END_VAR

	HostnameString := input;
	result := (HostnameStringObject.Data.Write(HostnameString))$UDINT;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL MQTTClient_Interface_Config::MaxInflightMessages
	VAR_OUTPUT
		Data 	: t_s_MaxInflightMessages;
	END_VAR
  
  //Set the Max Inflight Messages if active, else return defaults.
  if SetMaxInflightMsgs = 1 then
    
    Data.max_inflight_messages := to_int(MaxInflightMsgs);
    
  else
    
    Data := MQTTClient_Interface_ConfigBase::MaxInflightMessages();
    
  end_if;
  
END_FUNCTION


FUNCTION VIRTUAL GLOBAL MQTTClient_Interface_Config::ReconnectionParameters
	VAR_OUTPUT
		Data 	: t_s_ReconnectionParameters;
	END_VAR
  
  //Set the Reconnection paramters if active, else return defaults.
  if SetReconnectionParameters = 1 then
    
    Data.min_interval       := to_int(MinInterval);
    Data.max_interval       := to_int(MaxInterval);
    Data.exponential_scale  := to_bool(Exponential);
    
  else
    
    Data := MQTTClient_Interface_ConfigBase::Reconnectionparameters();
    
  end_if;
  
END_FUNCTION


FUNCTION VIRTUAL GLOBAL MQTTClient_Interface_Config::WillTopic::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR

	WillTopic := WillTopicStringObject.Data.Read();
	output := WillTopic;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL MQTTClient_Interface_Config::WillTopic::Write
	VAR_INPUT
		input (EAX) 	: UDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: UDINT;
	END_VAR

	WillTopic := input;
	result := (WillTopicStringObject.Data.Write(WillTopic))$UDINT;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL MQTTClient_Interface_Config::WillText::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR

	WillText := WillTextStringObject.Data.Read();
	output := WillText;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL MQTTClient_Interface_Config::WillText::Write
	VAR_INPUT
		input (EAX) 	: UDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: UDINT;
	END_VAR

	WillText := input;
	result := (WillTextStringObject.Data.Write(WillText))$UDINT;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL MQTTClient_Interface_Config::Will
	VAR_OUTPUT
		Data 	: t_s_Will;
	END_VAR
  
  //Set the Will paramters if active, else return defaults.
  if SetWillParameters = 1 then
    
    //==================================TOPIC
    //Clear out Topic
    SigCLib.MemSet(dst  :=  #aWillTopic, 
                   c    :=  0x00, 
                   len  :=  sizeof(aWillTopic));
    
    //Read the string object into the local buffer
    WillTopicStringObject.ToUniCode();
    WillTopicStringObject.TxtGet(pdst    :=  #aWillTopic[0], 
                                 dstsize :=  sizeof(aWillTopic));
    
    //Set the Return Pointer
    Data.topic := #aWillTopic[0];
    
    //==================================PAYLOAD
    //Clear out Payload
    SigCLib.MemSet(dst  :=  #aWillMessage, 
                   c    :=  0x00, 
                   len  :=  sizeof(aWillMessage));
    
    //Read the string object into the local buffer
    WillTextStringObject.TxtGet(pdst    :=  #aWillMessage[0], 
                                dstsize :=  sizeof(aWillMessage));
    
    //Set the Return Pointer
    Data.payloadtext := #aWillMessage[0];
    
    //==================================QoS
    
    Data.qos := to_int(WillQoS);
    
    //==================================Retain
    
    Data.bRetain := to_bool(WillRetained);
    
  else
    
    Data := MQTTClient_Interface_ConfigBase::Will();
    
  end_if;
  
END_FUNCTION


FUNCTION VIRTUAL GLOBAL MQTTClient_Interface_Config::AuthenticationParameters
	VAR_OUTPUT
		Data 	: t_s_Authentication;
	END_VAR
  
  //Set the Authentication parameters if active, else return defaults.
  if SetAuthenticationParameters = 1 then
    
    //==================================USERNAME
    //Clear out Topic
    SigCLib.MemSet(dst  :=  #aUsername, 
                   c    :=  0x00, 
                   len  :=  sizeof(aUsername));
    
    //Read the string object into the local buffer
    UsernameStringObject.ToUniCode();
    UsernameStringObject.TxtGet(pdst    :=  #aUsername[0], 
                                dstsize :=  sizeof(aUsername));
    
    //Set the Return Pointer
    Data.username := #aUsername[0];
    
    //==================================PASSWORD
    //Clear out Password
    SigCLib.MemSet(dst  :=  #aPassword, 
                   c    :=  0x00, 
                   len  :=  sizeof(aPassword));
    
    //Read the string object into the local buffer
    PasswordStringObject.ToUniCode();
    PasswordStringObject.TxtGet(pdst    :=  #aPassword[0], 
                                dstsize :=  sizeof(aPassword));
    
    //Set the Return Pointer
    Data.password := #aPassword[0];
    
  else
    
    Data := MQTTClient_Interface_ConfigBase::AuthenticationParameters();
    
  end_if;
  
END_FUNCTION


FUNCTION VIRTUAL GLOBAL MQTTClient_Interface_Config::UsernameString::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR

	UsernameString := UsernameStringObject.Data.Read();
	output := UsernameString;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL MQTTClient_Interface_Config::UsernameString::Write
	VAR_INPUT
		input (EAX) 	: UDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: UDINT;
	END_VAR

	UsernameString := input;
	result := (UsernameStringObject.Data.Write(UsernameString))$UDINT;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL MQTTClient_Interface_Config::PasswordString::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR

	PasswordString := PasswordStringObject.Data.Read();
	output := PasswordString;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL MQTTClient_Interface_Config::PasswordString::Write
	VAR_INPUT
		input (EAX) 	: UDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: UDINT;
	END_VAR

	PasswordString := input;
	result := (PasswordStringObject.Data.Write(PasswordString))$UDINT;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL MQTTClient_Interface_Config::TLS
	VAR_OUTPUT
		Data 	: t_s_TLS;
	END_VAR
    
  //Set the TLS parameters if active, else return defaults.
  if SetCAFile      = 1 |
     SetCertFile    = 1 |
     SetKeyFile     = 1 |
     SetKeyFilePass = 1 then
    
    //Clear out pointers
    Data.cafile   := NIL;
    Data.certfile := NIL;
    Data.keyfile  := NIL;
    Data.pw       := NIL;
    
    //If the CAFile must be used, set the value
    if SetCAFile = 1 then
      
      SigCLib.MemSet( dst :=  #aCAFile, 
                      c   :=  0x00, 
                      len :=  sizeof(aCAFile));
      
      CAFilePathStringObject.TxtGet(pdst    :=  #aCAFile[0], 
                                    dstsize :=  sizeof(aCAFile));
      
      Data.cafile := #aCAFile[0];
      
    end_if;
    
    //If the CertFile must be used, set the value
    if SetCertFile = 1 then
      
      SigCLib.MemSet( dst :=  #aCertFile, 
                      c   :=  0x00, 
                      len :=  sizeof(aCertFile));
      
      CertFilePathStringObject.TxtGet(pdst    :=  #aCertFile[0], 
                                      dstsize :=  sizeof(aCertFile));
      
      Data.certfile := #aCertFile[0];
      
    end_if;
    
    //If the KeyFile must be used, set the value
    if SetKeyFile = 1 then
      
      SigCLib.MemSet( dst :=  #aKeyFile, 
                      c   :=  0x00, 
                      len :=  sizeof(aKeyFile));
      
      KeyFilePathStringObject.TxtGet( pdst    :=  #aKeyFile[0], 
                                      dstsize :=  sizeof(aKeyFile));
      
      Data.keyfile := #aKeyFile[0];
      
    end_if;
    
    //If the Password must be used, set the value
    if SetKeyFilePass = 1 then
      
      SigCLib.MemSet( dst :=  #aTLSPassword, 
                      c   :=  0x00, 
                      len :=  sizeof(aTLSPassword));
      
      TLSPasswordStringObject.TxtGet( pdst    :=  #aTLSPassword[0], 
                                      dstsize :=  sizeof(aTLSPassword));
      
      Data.pw := #aTLSPassword[0];
      
    end_if;
    
  else
    
    Data := MQTTClient_Interface_ConfigBase::TLS();
    
  end_if;

  
END_FUNCTION


FUNCTION VIRTUAL GLOBAL MQTTClient_Interface_Config::CAFileString::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR

	CAFileString := CAFilePathStringObject.Data.Read();
	output := CAFileString;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL MQTTClient_Interface_Config::CAFileString::Write
	VAR_INPUT
		input (EAX) 	: UDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: UDINT;
	END_VAR

	CAFileString := input;
	result := (CAFilePathStringObject.Data.Write(CAFileString))$UDINT;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL MQTTClient_Interface_Config::CertFileString::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR

	CertFileString := CertFilePathStringObject.Data.Read();
	output := CertFileString;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL MQTTClient_Interface_Config::CertFileString::Write
	VAR_INPUT
		input (EAX) 	: UDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: UDINT;
	END_VAR

	CertFileString := input;
	result := (CertFilePathStringObject.Data.Write(CertFileString))$UDINT;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL MQTTClient_Interface_Config::KeyFileString::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR

	KeyFileString := KeyFilePathStringObject.Data.Read();
	output := KeyFileString;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL MQTTClient_Interface_Config::KeyFileString::Write
	VAR_INPUT
		input (EAX) 	: UDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: UDINT;
	END_VAR

	KeyFileString := input;
	result := (KeyFilePathStringObject.Data.Write(KeyFileString))$UDINT;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL MQTTClient_Interface_Config::KeyFilePassString::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR

	KeyFilePassString := TLSPasswordStringObject.Data.Read();
	output := KeyFilePassString;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL MQTTClient_Interface_Config::KeyFilePassString::Write
	VAR_INPUT
		input (EAX) 	: UDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: UDINT;
	END_VAR

	KeyFilePassString := input;
	result := (TLSPasswordStringObject.Data.Write(KeyFilePassString))$UDINT;

END_FUNCTION
