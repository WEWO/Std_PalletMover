//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "EncoderpulsesToDegrees"
	Revision           = "0.0"
	GUID               = "{2B46FA63-B136-4723-A51D-32108C2568F9}"
	RealtimeTask       = "false"
	CyclicTask         = "true"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(512,120)">
	<Channels>
		<Server Name="ClassSvr" GUID="{842181A3-63B0-44D3-843C-A6A507C87D13}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="Degrees" GUID="{97D61E85-C154-405A-ADC8-1CEFFA474392}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="GearRatio" GUID="{BBF8F8FA-9594-42E9-84AD-43562F2EB87E}" Visualized="false" Initialize="true" WriteProtected="false" Retentive="false"/>
		<Server Name="PulsesPerRound" GUID="{23E63835-FECA-424D-A33A-FCEEB75C74DE}" Visualized="false" Initialize="true" WriteProtected="false" Retentive="false"/>
		<Client Name="EncoderPulses" Required="false" Internal="false"/>
	</Channels>
</Class>
*)
EncoderpulsesToDegrees : CLASS
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
	PulsesPerRound 	: SvrCh_REAL;
	GearRatio 	: SvrCh_REAL;
	Degrees 	: SvrCh_REAL;
  //Clients:
	EncoderPulses 	: CltCh_DINT;
  //Variables:
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL CyWork
		VAR_INPUT
			EAX 	: UDINT;
		END_VAR
		VAR_OUTPUT
			state (EAX) 	: UDINT := READY;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Degrees::Read
		VAR_OUTPUT
			output (EAX) 	: REAL;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB EncoderpulsesToDegrees::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_ENCODERPULSESTODEGREES
0$UINT, 0$UINT, (SIZEOF(::EncoderpulsesToDegrees))$UINT, 
4$UINT, 1$UINT, 0$UINT, 
TO_UDINT(3419776214), "EncoderpulsesToDegrees", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::EncoderpulsesToDegrees.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
(::EncoderpulsesToDegrees.PulsesPerRound.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(4087814470), "PulsesPerRound", 
(::EncoderpulsesToDegrees.GearRatio.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1403776010), "GearRatio", 
(::EncoderpulsesToDegrees.Degrees.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(4032275102), "Degrees", 
//Clients:
(::EncoderpulsesToDegrees.EncoderPulses.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(1023394085), "EncoderPulses", 
END_FUNCTION


#define USER_CNT_EncoderpulsesToDegrees 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_EncoderpulsesToDegrees] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION EncoderpulsesToDegrees::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_EncoderpulsesToDegrees, pCmd := #vmt.CmdTable);
	vmt.CmdTable.CyWork		:= #CyWork();
	ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	PulsesPerRound.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF PulsesPerRound.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	GearRatio.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF GearRatio.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Degrees.pMeth			:= StoreMethod( #Degrees::Read(), #M_NO_F() );
	IF Degrees.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION


FUNCTION VIRTUAL GLOBAL EncoderpulsesToDegrees::Degrees::Read
	VAR_OUTPUT
		output (EAX) 	: REAL;
	END_VAR
  VAR
  	realEncoderPulses : REAL;
    tmpDeg            : DINT;    
  END_VAR

  
  EncoderPulses := EncoderPulses.Read();
  realEncoderPulses := to_real(EncoderPulses) - 33236;
  tmpDeg := to_dint(100*realEncoderPulses/GearRatio * (360/PulsesPerRound));
  Degrees := to_real(tmpDeg mod 36000)/100;  
	output := Degrees;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL EncoderpulsesToDegrees::CyWork
	VAR_INPUT
		EAX 	: UDINT;
	END_VAR
	VAR_OUTPUT
		state (EAX) 	: UDINT;(* := READY *)
	END_VAR
  VAR
  	realEncoderPulses : REAL;
    tmpDeg            : DINT;
  END_VAR  

  EncoderPulses := EncoderPulses.Read();
  realEncoderPulses := to_real(EncoderPulses) - 33236;
  tmpDeg := to_dint(100*realEncoderPulses/GearRatio * (360/PulsesPerRound));
  Degrees := to_real(tmpDeg mod 36000)/100;

END_FUNCTION
