//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)

//{{LSL_DEFINES
#DEFINE MaxDragDelayCycles 20
//}}LSL_DEFINES

//{{LSL_DECLARATION

(*!
<Class
	Name               = "Controller"
	Revision           = "1.44"
	GUID               = "{2EE15EB7-1F89-11D5-90C4-006063018AE8}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(284,120)"
	Comment            = "Base class for the different types of the controller">
	<Channels>
		<Server Name="Signal_Input" GUID="{2EE15EB8-1F89-11D5-90C4-006063018AE8}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="This server shows the actual internal control variable and is &#13;&#10;connected to the _LMCAxis or CNC class."/>
	</Channels>
	<RevDoku>
		<Owner Company="Sigmatek"/>
		<Dokumentation Revision="1.44" Date="2022-04-25" Author="MarTho" Company="Sigmatek" Description="Improvement: A SetParameter() method was added."/>
		<Dokumentation Revision="1.43" Date="2020-09-30" Author="MarTho&#13;&#10;StePhi" Company="Sigmatek" Description="Improvement: Added method declaration of ReadHWDiagnosisDriveAxis to read HW Diagnisos Data from a connected DriveAxis object.&#13;&#10;Bugfix: The definition &quot;MaxDragDelayCycles&quot; caused an identical redefinition warning when compiling. Therefore the definition was moved into the base class &quot;Controller&quot;."/>
		<Dokumentation Revision="1.42" Date="2018-06-26" Author="SatChr" Company="Sigmatek" Description="Bugfix: All virtual methods, which should be overridden, do not return an uninitialzed return value."/>
		<Dokumentation Revision="1.41" Date="2015-03-06" Author="SatChr" Company="Sigmatek" Description="Improvement: New methodes: ControlLongReal, CheckHwReady, ReadActPosition, ReadPDO, IsReadyToSwitchOn (for future use)"/>
		<Dokumentation Revision="1.40" Date="2013-07-18" Author="SliMic" Company="Sigmatek" Description="1. Add some comments to the methodes and variables"/>
		<Dokumentation Revision="1.30" Date="2012-09-27" Author="RauAnd" Company="Sigmatek" Description="Modified for use with the _LMCAxis class."/>
		<Dokumentation Revision="1.20" Date="2011-05-02" Author="FuchsH" Company="Sigmatek" Description="Comments newly formatted."/>
		<Dokumentation Revision="1.10" Date="08.04.2010" Author="RauAnd" Company="Sigmatek" Description="Updating of the clients, server and methods documentation"/>
		<Dokumentation Revision="1.2" Date="22.01.2010" Author="RauAnd" Company="Sigmatek" Description="Updating of the clients, server and methods documentation"/>
		<Dokumentation Revision="1.1" Date="05.05.2008" Author="Rauand" Company="Sigmatek" Description="Improvement to use the position control in the drive"/>
		<Dokumentation Revision="1.0" Company="Sigmatek" Description="Creation"/>
	</RevDoku>
</Class>
*)
Controller : CLASS
	TYPE
	  _AXISCLASS :
	  (
	    _AXIS_CNC,
	    _AXIS_LMCAXIS,
	    _AXIS_CNC_NO_HW,
	    _AXIS_LMCAXIS_NO_HW,
	    _AXIS_CNC_OPT_HWCLASS_v1,
	    _AXIS_LMCAXIS_OPT_HWCLASS_v1
	  )$UDINT;
	  _LMCCONTROLLER_SETPARAMETER :  //! <Type Public="true" Comment="Parameter-ID" Name="_LMCCONTROLLER_SETPARAMETER"/>
	  (
	    _LMCCONTROLLER_PAR_SET_CYCLIC_DRIVE_ENABLED_CHECK  //! <Type Comment="Parameter to deactivate/activate the cyclic read check of client &quot;DriveEnabled&quot;.&#13;&#10;Value = &#13;&#10;0 ... deactivate the cyclic check&#13;&#10;1 ... activate the cyclic check (default)" Name="_LMCCONTROLLER_SETPARAMETER._LMCCONTROLLER_PAR_SET_CYCLIC_DRIVE_ENABLED_CHECK"/>
	  )$UDINT;
	END_TYPE
  //Servers:
	Signal_Input 	: SvrChCmd_DINT;
  //Clients:
  //Variables:
		AxisType 	: _AXISCLASS;
  //Functions:
				//! <Function Comment="Receives as input from the CNC/_LMCAxis, the Actual Position and the Internal Position." Name="control"/>
	FUNCTION VIRTUAL GLOBAL control
		VAR_INPUT
			ActPos 	: DINT;
			IntPos 	: DINT;
		END_VAR
		VAR_OUTPUT
			Result 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL ControlLongReal
		VAR_INPUT
			ActPos 	: LREAL;
			IntPos 	: LREAL;
			IntSpeed 	: LREAL;
		END_VAR;
				//! <Function Comment="Updates the CNC StateFlags and the CNC ControlFlags" Name="StatePtr"/>
	FUNCTION VIRTUAL GLOBAL StatePtr
		VAR_INPUT
			StatePtr 	: ^CncFlags;
			CncstatePtr 	: ^CntrFlgs;
		END_VAR
		VAR_OUTPUT
			Result 	: DINT;
		END_VAR;
				//! <Function Comment="Adopts the addresses of the Servers: AxisStatus, AxisError and the Bitfield:AxisControl&#13;&#10;around this for reading and updating" Name="SetAxisFlgs"/>
	FUNCTION VIRTUAL GLOBAL SetAxisFlgs
		VAR_INPUT
			pAxisStatus 	: ^_LMCAXIS_STATUS;
			pAxisError 	: ^_LMCAXIS_ERROR;
			pAxisControl 	: ^_LMCAXIS_CONTROLBITS;
		END_VAR
		VAR_OUTPUT
			Result 	: _LMCCONTROLLERTYPE;
		END_VAR;
				//! <Function Comment="Function to test if we have a controller connected to the CNC/_LMCAxis" Name="WriteConstant"/>
	FUNCTION VIRTUAL GLOBAL WriteConstant
		VAR_INPUT
			Resolution 	: DINT;
			Timebase 	: DINT;
			Accel 	: DINT;
			ptrCNCIntStruct 	: ^CNCInternalStruct;
		END_VAR
		VAR_OUTPUT
			StartSpeed 	: DINT;
		END_VAR;
				//! <Function Comment="Function used for transmitting the Speed value from the CNC/_LMCAxis to the controller" Name="Speed"/>
	FUNCTION VIRTUAL GLOBAL Speed
		VAR_INPUT
			ActSpeed 	: DINT;
		END_VAR;
				//! <Function Comment="set Client values" Name="SetClients"/>
	FUNCTION VIRTUAL GLOBAL SetClients
		VAR_INPUT
			No 	: DINT;			//! <Variable Comment="The parameter number of the client that should be changed." Name="SetClients.No"/>
			Value 	: DINT;			//! <Variable Comment="The value to which the client should be changed." Name="SetClients.Value"/>
		END_VAR
		VAR_OUTPUT
			State 	: DINT;			//! <Variable Comment="0 =&gt; Error : The number entered was invalid or controller is active&#13;&#10;1 =&gt; Ok" Name="SetClients.State"/>
		END_VAR;
				//! <Function Comment="checks if the drive is enabled or not" Name="PowerIsOn"/>
	FUNCTION VIRTUAL GLOBAL PowerIsOn
		VAR_OUTPUT
			RetCode 	: BOOL;			//! <Variable Comment="true ... Drive is enabled" Name="PowerIsOn.RetCode"/>
		END_VAR;
				//! <Function Comment="checks if a Hardware Error is activ" Name="CheckHWError"/>
	FUNCTION VIRTUAL GLOBAL CheckHWError
		VAR_OUTPUT
			Retcode 	: BOOL;
		END_VAR;
				//! <Function Comment="Check wether the hardware is ready for communication." Name="CheckHwReady"/>
	FUNCTION VIRTUAL GLOBAL CheckHwReady
		VAR_OUTPUT
			IsReady 	: BOOL;
		END_VAR;
				//! <Function Comment="Controller parameters can be set with this method. " Name="SetParameter"/>
	FUNCTION VIRTUAL GLOBAL SetParameter
		VAR_INPUT
			ParNr 	: _LMCCONTROLLER_SETPARAMETER;			//! <Variable Comment="Parameter number" Name="SetParameter.ParNr"/>
			Value 	: DINT;			//! <Variable Comment="New value" Name="SetParameter.Value"/>
		END_VAR
		VAR_OUTPUT
			RetCode 	: DINT;			//! <Variable Comment="Return code of the method call.&#13;&#10;In the case of a value smaller than 0, the set parameter call failed." Name="SetParameter.RetCode"/>
		END_VAR;
				//! <Function Comment="Read Controller specific parameters" Name="ReadParameter"/>
	FUNCTION VIRTUAL GLOBAL ReadParameter
		VAR_INPUT
			No 	: DINT;			//! <Variable Comment="Parameter number" Name="ReadParameter.No"/>
		END_VAR
		VAR_OUTPUT
			Value 	: DINT;
		END_VAR;
				//! <Function Comment="Read the actual encoder position from the drive&#13;&#10;for DrivePosControl and _LMCSigControl only." Name="ReadActPosition"/>
	FUNCTION VIRTUAL GLOBAL ReadActPosition
		VAR_OUTPUT
			BinPos 	: DINT;			//! <Variable Comment="actual position in external units" Name="ReadActPosition.BinPos"/>
		END_VAR;
				//! <Function Comment="This methode is called at the beginig of each realtime cycle by the _LMCAxis object. DrivePosControl and _LMCSigControl use this interface to get all information from the hardware class _DriveAxis" Name="ReadPDO"/>
	FUNCTION VIRTUAL GLOBAL ReadPDO;
				//! <Function Comment="function to quit a hardware error" Name="QuitHWError"/>
	FUNCTION VIRTUAL GLOBAL QuitHWError;
				//! <Function Comment="Check whether the hardware is ready for switch on." Name="IsReadyToSwitchOn"/>
	FUNCTION VIRTUAL GLOBAL IsReadyToSwitchOn
		VAR_OUTPUT
			IsReady 	: DINT;
		END_VAR;
				//! <Function Comment="Method declaration to read the HW Diagnosis data of a connected DriveAxis object. &#13;&#10;Must be overwritten." Name="ReadHWDiagnosisDriveAxis"/>
	FUNCTION VIRTUAL GLOBAL ReadHWDiagnosisDriveAxis
		VAR_OUTPUT
			pHWDiagnosis 	: ^DINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB Controller::@CT_
0$UINT,
2#0100000000000000$UINT, //TY_CONTROLLER
1$UINT, 44$UINT, (SIZEOF(::Controller))$UINT, 
1$UINT, 0$UINT, 0$UINT, 
TO_UDINT(1198357413), "Controller", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::Controller.Signal_Input.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(2233060755), "Signal_Input", 
//Clients:
END_FUNCTION


#define USER_CNT_Controller 17

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_Controller] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION Controller::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_Controller, pCmd := #vmt.CmdTable);
	vmt.CmdTable.Write		:= #M_WR_DIRECT();
#pragma warning (disable : 74)
	vmt.UserFcts[0]		:= #control();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[1]		:= #ControlLongReal();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[2]		:= #StatePtr();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[3]		:= #SetAxisFlgs();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[4]		:= #WriteConstant();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[5]		:= #Speed();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[6]		:= #SetClients();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[7]		:= #PowerIsOn();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[8]		:= #CheckHWError();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[9]		:= #CheckHwReady();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[10]		:= #SetParameter();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[11]		:= #ReadParameter();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[12]		:= #ReadActPosition();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[13]		:= #ReadPDO();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[14]		:= #QuitHWError();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[15]		:= #IsReadyToSwitchOn();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[16]		:= #ReadHWDiagnosisDriveAxis();

#pragma warning (default : 74)
	Signal_Input.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF Signal_Input.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION
//{{LSL_ENCRYPTION 16#800
790C1C4CF342212FF2412A957A14F995FA214D796842D9A28AB39F8D077E5A6322CC48DC776231E8CF80CFF01688FBD4C574D366A9E1D14677021CC067E8A7B86DAE5C0AD33C7FD882E53079139B723D29AE97AFC60BD3B60262E9BD62587AC5ADA4B423
0A009A0942C6C5D0565F5C3EBC7E31BD2742848FB38D70535C9966E473FC28E4295118319D2E1EB4955FC03F67224BACDBA9DE46DB05C2FAABA519F8CD02541050440CB7DAA9FD124CBDD63DEC66D4F5D10ED7B6973B212E68C5B6C463598D7D3B6F64E6
228A6D014ADDF41F22A1C20090790E42F94FF01F170746F1DBBE8AE92D5E770378463C38FCA91D9F0FFF05F87C5FA714DAC197DE64116C04F7677E1B41BD7EE824EA4A330A2BF145B3A4EAABDCAE19ED56233C0BED90C86E67293EA33BAF2B7DB5377B4A
00EA24E18B0CC97C5060C17DF1EA859041F16909A6975EFC97E0320E3208EECDF7789F000E7D2FA85A01BB0306A6A46F2559EB6E17A6ED8FD2ACCC9CE0034A660892EBE546352403626AFE54A10D1345C508E00391FA3C3655BD0898E3F6B4D60297E143
1C00839AE513095FDC2E03EC09627C997518B3A50EC7CC3FC129D51765C14D5D057456DDC84BE64C1C2E1C983D3ADCC2B7433F5EA0AD49779C2CAF3A7B2A53FD4BC886F008510F5DAB10B55E50C816D8027D40A884368489FDD0339494C917BA2A820D2F
9FC84CEC874BCD36CBA498F670281BEE651C1B95503FDA7B8AD2D3CB5630A36667C49CA3DBB8765194B6A2644EB400A3D7950B2619900C89FA532DFC3211C62769478D23B54F2F4990C95C6100080AE12F4546327C0B17BAB92AD341F12606CEA480BFE2
518AEE3D6B6B82E86232B8BBCE8F2A39B6C6C7AA33EABB51B4BB558F62E327E98A8B17C6B44F27986A9ABB70457E0E43B13A48A876A167AF2458387472BD6C15744B011217AC8DFFB0DE159085FA358DE4918A8E82ACCC6F00818C14989078E08B4877C7
3C83171B358ED44F202542AB9802BC5C40190F5DA1C74471465E24854A2F063B7ADBA88BF1886F4A5B081C35E0A30CB4C6C218A04B8DB555CAEBA713261690C7E0FCC60602C5C4E64E0B9A17D416E4CCAD1A323DF0DDA16A5C9F5CE0D19FB031B92AC795
433322C8793AA4E4DCEFA0F0C91904D592F960C8701FD550610402903A2CC7BB28C7F58F8544513DC4D9D11D98ED649A0A5E0E1488D54922AB8B9A5990C7A5104C737A427DE6309F7DE594D9567BF5348274C8AD9740DD68025CF292A22988146D291F66
AD4CC083C3AF426B61CCC112FAB675C5FE88562E4968BD7795DB1C532EC51FA232EC532C22711014A7A5E7679C3146C2B76C7797182CE98BA80178C03112FC316F1442E54F0987D5EB4233DDB8148CFF66807C89A30760D67D8AA61BE961B338A3457D3D
C4C4EF7460C1BD8454C2377AC3C780D6D3E059306EA644AA1A561D1CD84B19017D33BB1C14D2AED2407C62490D7D8188FC5F8D8848AF4E4E1BBAE98A19FAEDA12138D82B7DBC55B68AEFF0DDAEF1A97423B624B92B2A474AC2D05ADAD7B9A86DE031624F
72EE018AAA60DFBA08963AC5D34E8EB7C3EB5BDF1D08A83446EE4304FC14D47EAC97A7CF08A9B2C236AE673A9C734EE6C100A9CAE3DC07E1286CAD276F1D0DF6C2B9091EECC9048326C3411EEE5DC8A25FC9AC9E7DF1E3B0ADCC5ED0AE0C8CB9FDEC78E5
8820BDA54D088204A04B5264E6E126EBB01F5A7B2AD4C467B6E54C594FDD9E5AF083E288D327A3A288034E31BE8298C7A80632524307FF0EA4C14095BFFE8E8FCD91C8070489B6740B77F3251BF8177084C77C137C6FDF173FAB31426CD16792A1F75815
0306448F39E7237E962FB5B1021CBFBD3376685419858C8BFC5070043FCCF04D94D881FADC9596428268C38DB00385505B189BFF9C3E72DB1F7EB0DFC8DBEB903CB2F24A4F25A9828E3FE8E8B8F43B2CB0B1DBC056C92AB366EE4E192F6B237F96B0A86B
748D49DCA81A1206FE76DA99A5B2379E07A8DCB782DF993597A2854F6A594781B15F58E1E422DA5E7F7158043B915189AD5E4B877CE9CD0712D7D6A741216E6F3C650DD75A8045E6A00FD69FAEF99FF72F8A49B577973C2541A2610E071DB44B700E7BC9
ADD0DCDD29E3134D706D71E0A6153EDBF86D631DC5621C9C0D3E64A445B1232D881CFFAA76794C2A07F96FCC56B116F8AC8AE77B383971A7F89C9C62B6698D5FA1115C4C7D43F52576ACE8160854DADF53E71EAF051AE88C15D597B79FC2C238D9323D5C
40AC2D8A20676AF264B3E1A5252891DE49CB4EA9C3A0000B44D62073EB39D3B93A870A534FF8600DCEC442325FCBC618BEE709394044CED2C9B6E33FAD2535140358E161E78AAABA7C548B869E4ECA4F6ECC3A98B7181B06FBDB29EB9CDA941E0F8D2943
F31C7DE25D5927F24F13C704CA4FBC236DD4ABD4A35DD4F73CD63D766F2945302F05E70E180EC957CE67D8ABC8A456A8FB129458CFBDAF512DEE7263741E96652BA6581C213F3F5911230250DE5CCF3CF84337A54FC1495435D4F6321D06FE8C8A00D8C1
F3B3A74F85D9E36D00F6AF4E70CFF259F502643597A4A296EDAE65602D2D8B687DEF006A4ABC5ECC1AC218CF0F07E4835DC2BA07DD65F9E95A33BCB0753BC9C2241D6E70FD4B58EBD91847306F87839F5398B0E3EAE8D8699AA1FAB5A8E7D21DCF2FBA08
F241DC74167F1C088C914D8A6FC85EC74339BC4A8132E972F44D486C2E0C40DAD89DC738F6A00ED58F16395AE900CB6BD40F58A2027A97DE6199F6B068106ED969EA99ADBD340B897B522A39EAA2A5195D0D7F37381405DD98DE94F18E83D8CE6BA5374B
A8BE29B9955A34426FD75BD7256C048595DADF702726F25659D0E99502DDA5E8B28B82509343703FE3FAEA33E6D4CDE728810F47A86E904AE2B2A63E32831D86F209793F76046853F00C48B267876B51F6E0982A122CED128495D2698E64AA4898BB94A1
FEBB229C567B92A989A3A94AEE942455B38D210CE993E99314D4896953EF48DB758322BDA8D0BE79EF68B886451375E7F8DAAAFC45F4F79D1C0D1EA70503DFD80C5FBCDE6D62237419F2CB7194203475DA17BC0ADAF152D2F275F4C6050750D914724271
519EFF9201D1ACA00018CD4CD358348A68CCC903863B4484A088053E8F0B67C47DBFC1F948F0FF07983C34F74ECFB92401398595BAEA595FD7622B986DF2FAEFC599AC5FFE15357B6411847F1DCF6BE182447253E3AAF437E4A5BE2E3AF420CFF291D515
91C4E661C310EF4008BC8F3550EB9E6735DEDEB79AC20FDDEBF41033D0411087324A92927E21FC8152E0CA522EBAC75C87574F564FA685E45060B8BE8CA9234A02E6F507354707156A8EEE66070E6854CAF9D5C9C1C7675041F9A077F34FC10AD090D0E1
CD934A6F72CAA85B92BFFAD588FE3EC29E037ECA798FB0AFDDFA2696AF4520B1FCF72490FE9CD60BE098C25532B5D5E3DE8DD640F5FF865AC9AA18D8B4C410F62DE1D2474808084B0359073B2F893CF081D299E14B618875631A70F532154D7AD78F4751
AE0A742617B9662AAD1BAEF4CBA96FFBB29C0A54D995399738B636C676504A99ED9EB7FBA004D1BED478D4895DD7CA1C4BC1D2F78FD9111C2E485598878BFD68E56E7E85FB65860E6DF234769D0980C79DECE9FD9C87AE0A1CB4DB133F2107C9FF45EDA3
F04CEEF1FAEEE0642DD4BF3D292DE8B846D8E46F9E0F5920ED757C0FAB79C9E05EAC7DE901AC38DFB24F10A2D22D378C4BD673DB6BB769B57902B1FFEA442590ECEED394F1F29E2DFD6C4D62B4F7A4B8E81855C21D007D234CC012AD1DF6CA2196C312DE
E0DBCE7E0951DC50600B913D6037A8E851FD318164729DC802EFFBA371023D56C7DFCAB16608F29C700BF8A69E1B4CD24A09FE63A7686748B0DED41FF195D01F6C8726F16874B3F171CA94CA641E466791BEDE5A8005787C6E33CF40A2E4DFCD90A129F4
46F68C16ADAF82EC9EC3B2C516D742F0F71A7064E3476747772AD547C685CEDCAF81C2A03EB4845A819ED1E677863A4EDFDD16876B298F5962EC7163E53D074C55664403FDC2E504D9E7AF62C31AFAEA6F11C318EE149D74B3D460429DC92AF1BC584CE3
54EC987A3D62D7575B976A03BDE81124F949D33A91E9D5BD3384D0E9FC4CB74AFD69069D781DC7A8164BB28A91A7A3512BED5ABB908E6EB29BF216D95A93040549A517C7CC3901722EC1C72C3021412BFCA90B6E498EFE584EC73C737738FD8D1640CC08
48543C85E9F8C82C748821C4DCB6B3AC5F2F8FCF8BD4457F4487C66D265F9EAFF8943EB3AC84B74E244754A65F70720EB4F2B77D190CCB4F9866CAAD913649644CDD1AA49C05FC296F9F74D36A2D2C544CA60FB56C7DD91B206D20880EB15604D420A55E
075CE8A30119D0C6ACB2188DD014C5EC682E5EE5A4FA011F63202BC0F97E81A3997E94CD125CCDC29B645857DA579345F5DF1ABBC98A836F42A80D5282E74B2EA7C372842DDD749AB85D1026CBBAF02588D99F21909C013E2D8A4BAEFE5ECA3028A967F5
7367605D126F94D0029FF3E67E4601783003C8DBB81B0C94B11FB11E46BBDF8A638758D263C1D6B10A3EE6FB30581B67DDDAF26C1A80BF03C8FCBDB1AE5CFADD0B9A218104B3B1D22062D736321DFA64D75F536E5FC3D1096E16AA9B59ADAB1829AB4D6F
70CA79146A3CA331FFC545A68E80C88DA360CD89556D647072B0207B