//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "MainLedControl"
	Revision           = "0.0"
	GUID               = "{24C304C1-B22C-49E2-8EC3-7D2F1F86CE69}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(1020,240)">
	<Channels>
		<Server Name="SetLeds" GUID="{E3EC6C87-9CF1-4DD7-B18F-7A301A71BC5A}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Client Name="AgvConfig" Required="true" Internal="false"/>
		<Client Name="AgvSettings" Required="true" Internal="false"/>
		<Client Name="I_LedControl" Required="true" Internal="true"/>
		<Client Name="ToLedModule" Required="false" Internal="false"/>
	</Channels>
	<Network Name="MainLedControl">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "_base"
				GUID       = "{3A33BB9A-EFAA-433F-AA9A-FD824E3AF719}"
				Class      = "PeripheralsBase"
				Position   = "(218,120)"
				Visualized = "false">
				<Channels>
					<Server Name="ObjectStatus"/>
					<Server Name="ToObject"/>
					<Client Name="op_LogData"/>
					<Client Name="p_NextObject"/>
				</Channels>
			</Object>
			<Object
				Name       = "I_LedControl"
				GUID       = "{95E876FB-33CE-4870-8121-09BBF30796AE}"
				Class      = "I_LedControl"
				Position   = "(210,360)"
				Visualized = "false">
				<Channels>
					<Server Name="ClassSvr"/>
					<Server Name="SetLeds"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.ToObject" Destination="_base.ToObject" Vertices="(976,210),(804,210),"/>
			<Connection Source="_base.op_LogData" Destination="this.op_LogData" Vertices="(218,210),(38,210),"/>
			<Connection Source="_base.p_NextObject" Destination="this.p_NextObject" Vertices="(218,270),(38,270),"/>
			<Connection Source="this.I_LedControl" Destination="I_LedControl.ClassSvr"/>
			<Connection Source="this.ObjectStatus" Destination="_base.ObjectStatus" Vertices="(976,270),(804,270),"/>
			<Connection Source="this.SetLeds" Destination="I_LedControl.SetLeds" Vertices="(976,330),(796,510),"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
#pragma using PeripheralsBase

MainLedControl : CLASS
: PeripheralsBase
  //Servers:
	SetLeds 	: SvrCh_LedState_PTofCls_I_LedControl;
  //Clients:
	ToLedModule 	: CltChCmd_PL221;
	I_LedControl 	: CltChCmd_I_LedControl;
	AgvConfig 	: CltChCmd_AgvConfig;
	AgvSettings 	: CltChCmd_AgvSettings;
  //Variables:
		SetCurrendEndLedState 	: DINT;
		ConfigStepper 	: DINT;
		StartUpStepper 	: DINT;
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL HandleOperational
		VAR_OUTPUT
			RetValue 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Handleconfiguration
		VAR_OUTPUT
			RetValue 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL HandleStartUp
		VAR_OUTPUT
			RetValue 	: DINT;
		END_VAR;
	
	FUNCTION GetConfig;
	
	FUNCTION GetSettings;
	
	FUNCTION VIRTUAL GLOBAL SetLeds::Read
		VAR_OUTPUT
			output (EAX) 	: I_LedControl::LedState;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL SetLeds::Write
		VAR_INPUT
			input (EAX) 	: I_LedControl::LedState;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: I_LedControl::LedState;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma using I_LedControl
#pragma usingLtd AgvConfig
#pragma usingLtd AgvSettings
#pragma usingLtd PL221


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB MainLedControl::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_MAINLEDCONTROL
0$UINT, 0$UINT, (SIZEOF(::MainLedControl))$UINT, 
1$UINT, 4$UINT, 0$UINT, 
TO_UDINT(2628872597), "MainLedControl", //Class
TO_UDINT(480875673), "PeripheralsBase", 0$UINT, 0$UINT, //Baseclass
//Servers:
(::MainLedControl.SetLeds.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3702783073), "SetLeds", 
//Clients:
(::MainLedControl.ToLedModule.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000000$UINT, TO_UDINT(1758490266), "ToLedModule", TO_UDINT(3031612134), "PL221", 1$UINT, 5$UINT, 
(::MainLedControl.I_LedControl.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(3489596082), "I_LedControl", TO_UDINT(3489596082), "I_LedControl", 0$UINT, 0$UINT, 
(::MainLedControl.AgvConfig.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(3641531850), "AgvConfig", TO_UDINT(3641531850), "AgvConfig", 0$UINT, 0$UINT, 
(::MainLedControl.AgvSettings.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(1195094022), "AgvSettings", TO_UDINT(1195094022), "AgvSettings", 0$UINT, 0$UINT, 
END_FUNCTION


#define USER_CNT_MainLedControl 19

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_MainLedControl] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION MainLedControl::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
		nCmdSize	: UINT;
	END_VAR

	ret_code	:= PeripheralsBase::@STD();
	IF ret_code <> C_OK THEN
		RETURN;
	END_IF;
	nCmdSize		:= WewoBase::ToObject.pMeth^.nCmds$UINT*SIZEOF(pVoid) + CMDMETH.Init;

	_memcpy((#vmt.CmdTable)$^USINT, WewoBase::ToObject.pMeth, nCmdSize);
	vmt.CmdTable.nCmds		:= nSTDCMD + USER_CNT_MainLedControl;
#pragma warning (disable : 74)
	vmt.UserFcts[15]		:= #HandleOperational();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[16]		:= #Handleconfiguration();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[18]		:= #HandleStartUp();

#pragma warning (default : 74)
	WewoBase::ToObject.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF WewoBase::ToObject.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	SetLeds.pMeth			:= StoreMethod( #SetLeds::Read(), #SetLeds::Write() );
	IF SetLeds.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION


FUNCTION VIRTUAL GLOBAL MainLedControl::SetLeds::Read
	VAR_OUTPUT
		output (EAX) 	: I_LedControl::LedState;
	END_VAR

	SetLeds := I_LedControl.SetLeds.Read();
	output := SetLeds;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL MainLedControl::SetLeds::Write
	VAR_INPUT
		input (EAX) 	: I_LedControl::LedState;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: I_LedControl::LedState;
	END_VAR


    SetLeds := input;
    result := SetLeds;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL MainLedControl::Handleconfiguration
	VAR_OUTPUT
		RetValue 	: DINT;
	END_VAR
    
    
    case ConfigStepper of
        
        0:
                GetConfig();
                ConfigStepper += 1;
        1:
                      
               RetValue := true;
      end_case;

    

END_FUNCTION


FUNCTION MainLedControl::GetConfig
// Use sensor and make connection with hardware


if AgvConfig.GetBooleanValue(Path:="AGV.Peripherals.BasicLedPl221.Connection.EnableObj") = true then
    ConnectClientChannels(AgvConfig.GetStringValue(Path:="AGV.Peripherals.BasicLedPl221.Connection.ToPlModule"));
    
    
    
end_if;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL MainLedControl::HandleStartUp
	VAR_OUTPUT
		RetValue 	: DINT;
	END_VAR

    case StartUpStepper of

        0:
            GetSettings();
            StartUpStepper += 1;
         1:   
            
            StartUpStepper += 1;
         2:
            RetValue := true;   
            
      end_case;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL MainLedControl::HandleOperational
	VAR_OUTPUT
		RetValue 	: DINT;
	END_VAR
    
    
    
    case  I_LedControl.SetLeds of

        I_LedControl::LedState::LedAllOff:
        
        I_LedControl::LedState::LedRed:
        
        I_LedControl::LedState::LedRedLeft:
        
        I_LedControl::LedState::LedRedRight:
        
        I_LedControl::LedState::LedGreen:
        
        I_LedControl::LedState::LedGreenLeft:
        
        I_LedControl::LedState::LedGreenRight:
        
        I_LedControl::LedState::LedBlue:
        
        I_LedControl::LedState::LedBlueLeft:
        
        I_LedControl::LedState::LedBlueRight:
        
      end_case;
      
      
END_FUNCTION


FUNCTION MainLedControl::GetSettings



END_FUNCTION
