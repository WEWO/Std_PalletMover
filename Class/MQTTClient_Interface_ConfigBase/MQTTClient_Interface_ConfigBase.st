//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "MQTTClient_Interface_ConfigBase"
	Revision           = "1.1"
	GUID               = "{3AE025F2-2690-4397-9AB3-D20ED98F4B0A}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	IconPath           = ".\Class\MQTTClient_Interface\mqtt.ico"
	SharedCommandTable = "true"
	Objectsize         = "(284,120)"
	Comment            = "This class is used to configure the MQTTClient_Interface Class in conjunction with or as opposed to using the XML Configuration.&#13;&#10;The MQTTClient_Interface class first reads the XML configuration if present and the the configuration specified by this class.&#13;&#10;&#13;&#10;This base class must be derived and the relative methods overwritten.">
	<Channels>
		<Server Name="LoginOK" GUID="{6D58A0C7-0D63-4C1B-91E0-F7B5910A6B16}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false" Comment="This server specifies whether the class is logged in to the connected MQTTClient_Interface instance.&#13;&#10;Only one Config class per MQTTClient_Interface instance is allowed, if more than one class is connected only the first will login OK."/>
		<Client Name="MQTTClient_Interface" Required="true" Internal="false" Comment="Object channel to the MQTTClient_Interface instance to be configured by this class."/>
	</Channels>
	<Dependencies>
		<Files>
			<File Path=".\Class\MQTTClient_Interface_ConfigBase\MQTTClient_Interface_Config_de.pdf"/>
			<File Path=".\Class\MQTTClient_Interface_ConfigBase\MQTTClient_Interface_Config_en.pdf"/>
		</Files>
	</Dependencies>
	<RevDoku>
		<Owner Company="Sigmatek" Author="VelGer"/>
		<Dokumentation Revision="1.1" Date="2020-04-21" Author="VelGer" Company="Sigmatek" Description="1. BugFix: The Authentication parameters were always interpreted by the MQTTClient_Interface, even though they were not set. This has been corrected."/>
		<Dokumentation Revision="1.0" Date="2019-05-08" Author="VelGer" Company="Sigmatek" Description="Initial Creation."/>
	</RevDoku>
</Class>
*)
MQTTClient_Interface_ConfigBase : CLASS
	TYPE
#pragma pack(push, 1)
	  t_s_Authentication : STRUCT  //! <Type Public="true" Name="t_s_Authentication"/>
	    username : ^UINT;
	    password : ^UINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  t_s_ClientID : STRUCT  //! <Type Public="true" Name="t_s_ClientID"/>
	    ClientID : ^UINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  t_s_ConnectionParameters : STRUCT  //! <Type Public="true" Name="t_s_ConnectionParameters"/>
	    hostname : ^UINT;
	    port : INT;
	    keepalive : INT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  t_s_MaxInflightMessages : STRUCT  //! <Type Public="true" Name="t_s_MaxInflightMessages"/>
	    max_inflight_messages : INT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  t_s_ReconnectionParameters : STRUCT  //! <Type Public="true" Name="t_s_ReconnectionParameters"/>
	    min_interval : INT;
	    max_interval : INT;
	    exponential_scale : BOOL;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  t_s_TLS : STRUCT  //! <Type Public="true" Name="t_s_TLS"/>
	    cafile : ^CHAR;
	    certfile : ^CHAR;
	    keyfile : ^CHAR;
	    pw : ^CHAR;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  t_s_Will : STRUCT  //! <Type Public="true" Name="t_s_Will"/>
	    topic : ^UINT;
	    payloadtext : ^CHAR;
	    qos : INT;
	    bRetain : BOOL;
	  END_STRUCT;
#pragma pack(pop)
	END_TYPE
  //Servers:
	LoginOK 	: SvrChCmd_DINT;
  //Clients:
	MQTTClient_Interface 	: CltChCmd_MQTTClient_Interface;
  //Variables:
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL Init;
				//! <Function Comment="This method is to be overwritten to pass the ClientID details to the connected MQTTClient_Interface on request." Name="ClientID"/>
	FUNCTION VIRTUAL GLOBAL ClientID
		VAR_OUTPUT
			Data 	: t_s_ClientID;
		END_VAR;
				//! <Function Comment="This method is to be overwritten to pass the Connection Parameter details to the connected MQTTClient_Interface on request." Name="ConnectionParameters"/>
	FUNCTION VIRTUAL GLOBAL ConnectionParameters
		VAR_OUTPUT
			Data 	: t_s_ConnectionParameters;
		END_VAR;
				//! <Function Comment="This method is to be overwritten to pass the Max Inflight Messages to the connected MQTTClient_Interface on request." Name="MaxInflightMessages"/>
	FUNCTION VIRTUAL GLOBAL MaxInflightMessages
		VAR_OUTPUT
			Data 	: t_s_MaxInflightMessages;
		END_VAR;
				//! <Function Comment="This method is to be overwritten to pass the Reconnection Parameter details to the connected MQTTClient_Interface on request." Name="ReconnectionParameters"/>
	FUNCTION VIRTUAL GLOBAL ReconnectionParameters
		VAR_OUTPUT
			Data 	: t_s_ReconnectionParameters;
		END_VAR;
				//! <Function Comment="This method is to be overwritten to pass the Will details to the connected MQTTClient_Interface on request." Name="Will"/>
	FUNCTION VIRTUAL GLOBAL Will
		VAR_OUTPUT
			Data 	: t_s_Will;
		END_VAR;
				//! <Function Comment="This method is to be overwritten to pass the Authentication details to the connected MQTTClient_Interface on request." Name="AuthenticationParameters"/>
	FUNCTION VIRTUAL GLOBAL AuthenticationParameters
		VAR_OUTPUT
			Data 	: t_s_Authentication;
		END_VAR;
				//! <Function Comment="This method is to be overwritten to pass the TLS details to the connected MQTTClient_Interface on request." Name="TLS"/>
	FUNCTION VIRTUAL GLOBAL TLS
		VAR_OUTPUT
			Data 	: t_s_TLS;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma usingLtd MQTTClient_Interface


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB MQTTClient_Interface_ConfigBase::@CT_
0$UINT,
2#0100000000000000$UINT, //TY_MQTTCLIENT_INTERFACE_CONFIGBASE
1$UINT, 1$UINT, (SIZEOF(::MQTTClient_Interface_ConfigBase))$UINT, 
1$UINT, 1$UINT, 0$UINT, 
TO_UDINT(3037967591), "MQTTClient_Interface_ConfigBase", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::MQTTClient_Interface_ConfigBase.LoginOK.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(15564860), "LoginOK", 
//Clients:
(::MQTTClient_Interface_ConfigBase.MQTTClient_Interface.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(2880242173), "MQTTClient_Interface", TO_UDINT(2880242173), "MQTTClient_Interface", 1$UINT, 16$UINT, 
END_FUNCTION


#define USER_CNT_MQTTClient_Interface_ConfigBase 7

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_MQTTClient_Interface_ConfigBase] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION MQTTClient_Interface_ConfigBase::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_MQTTClient_Interface_ConfigBase, pCmd := #vmt.CmdTable);
	vmt.CmdTable.Init		:= #Init();
#pragma warning (disable : 74)
	vmt.UserFcts[0]		:= #ClientID();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[1]		:= #ConnectionParameters();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[2]		:= #MaxInflightMessages();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[3]		:= #ReconnectionParameters();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[4]		:= #Will();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[5]		:= #AuthenticationParameters();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[6]		:= #TLS();

#pragma warning (default : 74)
	LoginOK.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF LoginOK.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION


FUNCTION VIRTUAL GLOBAL MQTTClient_Interface_ConfigBase::Init
  
  //If Firstscan, login to the MQTTClient_Interface
  if _FirstScan then
    
    LoginOK := to_dint(MQTTClient_Interface.Config_Login(pThis:=this));
    
  end_if;

  
END_FUNCTION


FUNCTION VIRTUAL GLOBAL MQTTClient_Interface_ConfigBase::ConnectionParameters
	VAR_OUTPUT
		Data 	: t_s_ConnectionParameters;
	END_VAR
  
  //Prepare ret:
  Data.hostname  := ACCESS_DENIED$^UINT;
  Data.port      := 0;
  Data.keepalive := -1;
  
END_FUNCTION


FUNCTION VIRTUAL GLOBAL MQTTClient_Interface_ConfigBase::ClientID
	VAR_OUTPUT
		Data 	: t_s_ClientID;
	END_VAR
  
  //Init Ret:
  Data.ClientID := ACCESS_DENIED$^UINT;
  
END_FUNCTION


FUNCTION VIRTUAL GLOBAL MQTTClient_Interface_ConfigBase::MaxInflightMessages
	VAR_OUTPUT
		Data 	: t_s_MaxInflightMessages;
	END_VAR
  
  //Init Ret:
  Data.max_inflight_messages := -1;
  
END_FUNCTION


FUNCTION VIRTUAL GLOBAL MQTTClient_Interface_ConfigBase::ReconnectionParameters
	VAR_OUTPUT
		Data 	: t_s_ReconnectionParameters;
	END_VAR
  
  //Init Ret:
  Data.min_interval      := -1;
  Data.max_interval      := -1;
  Data.exponential_scale := FALSE;
  
END_FUNCTION


FUNCTION VIRTUAL GLOBAL MQTTClient_Interface_ConfigBase::Will
	VAR_OUTPUT
		Data 	: t_s_Will;
	END_VAR
  
  //Init Ret
  Data.topic       := ACCESS_DENIED$^UINT;
  Data.payloadtext := NIL;
  Data.qos         := -1;
  Data.bRetain     := FALSE;
  
END_FUNCTION


FUNCTION VIRTUAL GLOBAL MQTTClient_Interface_ConfigBase::AuthenticationParameters
	VAR_OUTPUT
		Data 	: t_s_Authentication;
	END_VAR
  
  //Init Ret
  Data.username := ACCESS_DENIED$^UINT;
  Data.password := NIL;
  
END_FUNCTION


FUNCTION VIRTUAL GLOBAL MQTTClient_Interface_ConfigBase::TLS
	VAR_OUTPUT
		Data 	: t_s_TLS;
	END_VAR
  
  //Init Ret
  Data.cafile     := ACCESS_DENIED$^CHAR;
  Data.certfile   := NIL;
  Data.keyfile    := NIL;
  Data.pw         := NIL;
  
END_FUNCTION
