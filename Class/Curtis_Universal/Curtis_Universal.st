//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)

//{{LSL_DEFINES
//#Define cNoNmtIfOk
#Define cCommTo                   1000    // 1000
#Define cHeartBeat                150     // 1000 Every 1 Sec.
#define COMM_TIMEOUT              1000    // ms before timeout
#define PDO1_SEND_INTERVAL        40      // 100 ms
#define TIMEOUTDELAY              15000    // Delay before checking for a communication timeout.
#define REFERENCETIMEOUT          30 SEC  // 
#define FUSE_BAD_TIME             4 SEC
#define MAX_TIME_DRIVE_MODE_REQ   150 //ms
//}}LSL_DEFINES

//{{LSL_DECLARATION

(*!
<Class
	Name               = "Curtis_Universal"
	Revision           = "0.0"
	GUID               = "{F018A3EB-9CD3-4E2C-AD49-D6107BD1252F}"
	RealtimeTask       = "false"
	CyclicTask         = "true"
	DefCyclictime      = "5 ms"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	IconPath           = ".\Class\Curtis_1232E_FR\curtis.ico"
	SharedCommandTable = "true"
	Objectsize         = "(614,120)"
	Comment            = "CAN Message for Curtis Drives">
	<Channels>
		<Server Name="Active" GUID="{BA5E0750-69A3-4D2A-BF3C-8BDB4E8877F6}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="AI_BrakePot" GUID="{F2FA4B48-218B-4141-94AB-4583BDAF0337}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="AI_ThrottlePot" GUID="{4B03D2FB-B9E1-4BC0-89AF-41B88C89971E}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="AutoAccelTime" GUID="{E4A7E5F7-B083-4B59-A0F5-AD921FE86CE8}" Visualized="true" Initialize="true" DefValue="100" WriteProtected="false" Retentive="false" Comment="0,1 second acceleration time"/>
		<Server Name="AutoAct" GUID="{6F9DCD4F-A9A8-4CC5-B3E3-32E1F88F067E}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="AutoDecelTime" GUID="{725A2BAF-EF93-48BC-A236-718831768053}" Visualized="true" Initialize="true" DefValue="10" WriteProtected="false" Retentive="false" Comment="0,1 second acceleration time"/>
		<Server Name="AutomaticSetpoint" GUID="{2A816FDC-B76E-492E-AA4D-A901A54A4FFC}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="AutoSetp" GUID="{EB81A111-7B0A-4CBA-8F3E-7751D2C1EC47}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="BDI" GUID="{F894E56B-31F6-4B3A-AD1D-C0E52DB61D4F}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="BrakePotSigned" GUID="{2AAF3288-4EFA-4C56-871C-9D3056F9A46F}" Visualized="true" Initialize="true" WriteProtected="false" Retentive="File"/>
		<Server Name="Capacitor_Voltage" GUID="{AE9278DA-FF0E-40BE-A2FA-D0AE8A711CA4}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="ClassSvr" GUID="{72A1C90B-B4C5-4D2E-9A9D-3323BCA9B0FB}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="CommunicationOk" GUID="{E330C5D1-1DFB-4FDB-8C06-7BB67B4E224F}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="CurtisModel" GUID="{36CE4A48-A2CF-4D0D-907A-7F34711BF8B2}" Visualized="true" Initialize="true" DefValue="Curtis_Universal::Model_1232e" WriteProtected="false" Retentive="File"/>
		<Server Name="DriveMode" GUID="{71D5BB6D-8188-4F7B-A6A4-726550B313D9}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="DriveModeRequest" GUID="{11F6D85F-6B71-4D24-A5ED-206A16E90A7E}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="EmStopOk" GUID="{B3B9DB98-7ED4-43BE-ABED-0F192B4CE299}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="Enabled" GUID="{A64AB792-9043-4BC0-BA3E-BCFF3E166A89}" Visualized="true" Initialize="true" DefValue="1" WriteProtected="false" Retentive="File"/>
		<Server Name="I_DigitalOut6" GUID="{A8B51A5C-754A-461A-968F-019D8A10E4D0}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Sw_14"/>
		<Server Name="I_DigitalOut7" GUID="{C5B3A9AC-F277-4F3F-A937-3F78B2E18CD2}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Sw_15"/>
		<Server Name="I_Driver1" GUID="{A1ADC006-69DE-4BA7-AF5F-F1ACD74ACB25}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Sw_9&#13;&#10;Auger_1 - bI_SP_HighLow"/>
		<Server Name="I_Driver2" GUID="{C44ADA6E-9889-4C4F-80C9-BF12FC16C4E0}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Sw_10&#13;&#10;Auger_1 - bI_AugerOnOff"/>
		<Server Name="I_Driver3" GUID="{9582F671-8A75-42AD-A387-EB32932163D2}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Sw_11&#13;&#10;Auger_1 - bSP_HighLow"/>
		<Server Name="I_Driver4" GUID="{EE2BE869-054B-4207-A8F9-F3B55D4FADCA}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Sw_12&#13;&#10;Auger_1 - bAugerOnOff"/>
		<Server Name="I_PropDriver" GUID="{781568E3-D59A-4DB1-B005-785095D54039}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Sw_13&#13;&#10;Pin 2"/>
		<Server Name="I_Switch1" GUID="{C25FF9D8-3E3A-428E-8756-3E10AADFB884}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Pin 24 - Switch 1"/>
		<Server Name="I_Switch16" GUID="{7C0666FD-DC33-4907-B8D6-C67E3CB7A4E2}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Pin 14 - Switch 16"/>
		<Server Name="I_Switch2" GUID="{53E2B6A9-6BEA-45A6-8AF0-CA608D0F213F}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Pin 8 - Switch 2"/>
		<Server Name="I_Switch3" GUID="{526D4F4C-CEE3-4B17-BDA6-ABD68FF0ABA9}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Pin 9 - Switch 3"/>
		<Server Name="I_Switch4" GUID="{714FEB06-D9E2-444D-A1E3-2D3CA6B27B5E}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Pin 10 - Switch 4"/>
		<Server Name="I_Switch5" GUID="{D94F12B7-C31B-4F94-B645-54BCEE8DFA47}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Pin 11 - Switch 5"/>
		<Server Name="I_Switch6" GUID="{0698F259-0444-4A4A-AC4C-17EB35A338CF}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Pin 12 - Switch 6"/>
		<Server Name="I_Switch7" GUID="{B8193EDA-650C-4C6B-8A9A-416F4FD7139B}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Pin 22 - Switch 7"/>
		<Server Name="I_Switch8" GUID="{2AECC0AD-31EE-4F0E-ACD9-1E84499B84FF}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Pin 33 - Switch 8"/>
		<Server Name="InterlockExternal1" GUID="{6F666038-089D-4EAE-AEF2-9F0F5C5AF463}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="InterlockExternal2" GUID="{B8EEBF21-9677-4003-B64A-740E38C17E83}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="InterlockFeedback" GUID="{9CD7930E-DF19-44D4-820F-8920DA27CA6A}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="MotorCurrent" GUID="{FDAA0027-E054-4021-B83A-749F38F31B59}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="MotorRPM" GUID="{0CC3409D-EFC6-48F4-9670-85B210CBBF8F}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false" Comment="Speed of Motor"/>
		<Server Name="MotorTemperature" GUID="{8B9D2F51-417A-4368-AB18-87F77EC48412}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="QD_DigitalOut6" GUID="{CAF5A5CD-5C93-4F9E-8E34-234AF754ECB6}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="Auger_1 - Horn"/>
		<Server Name="QD_DigitalOut7" GUID="{1E0A1445-4F6F-414D-B7EA-72303284865C}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="Auger_1 - bDrive_OnOff"/>
		<Server Name="QD_Driver1" GUID="{80A176FD-83C2-4D14-83E0-5F8AEC97320B}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="Auger_1 - Pin 6 - bQ_Actu_L_In"/>
		<Server Name="QD_Driver2" GUID="{D839B763-12A9-4C2B-A07B-BD3FB6B1837F}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="Auger_1 - Pin 5 - bQ_Actu_L_Out"/>
		<Server Name="QD_Driver3" GUID="{82204ACF-A6D0-4C5C-A83C-076F0797073C}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="Auger_1 - Pin 4 - bQ_Actu_R_In"/>
		<Server Name="QD_Driver4" GUID="{DB22F7BD-62AE-4C8C-BECE-152C2B3DB9B4}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="Auger_1 - Pin 3 - bQ_Actu_R_Out"/>
		<Server Name="QD_PropDriver" GUID="{5BECF250-80BF-40CF-8840-B18DD667DB4A}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="Referenced" GUID="{D367B9E9-0317-42DA-B558-44A4F04BAE30}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="ThrottlePotSigned" GUID="{1C78885B-B69D-418C-8D12-5AB7443CB47C}" Visualized="true" Initialize="true" WriteProtected="false" Retentive="File"/>
		<Client Name="AlarmStartId" Required="true" Internal="false"/>
		<Client Name="Curtis_1232E" Required="true" Internal="true"/>
		<Client Name="Curtis_AC2F" Required="true" Internal="true"/>
		<Client Name="Curtis_AC2F_IO1" Required="true" Internal="true"/>
		<Client Name="NodeId" Required="true" Internal="false"/>
		<Client Name="objDriver" Required="false" Internal="false"/>
	</Channels>
	<Separators>
		<Servers>
			<SepChn Position="36"/>
			<SepChn Position="40"/>
			<SepChn Position="2"/>
			<SepChn Position="52"/>
		</Servers>
	</Separators>
	<RevDoku>
		<Owner Company="RIWO Engineering BV" Author="P vd Voort"/>
		<Dokumentation Revision="0.0" Date="2022-08-29" Author="P vd Voort" Company="RIWO Engineering BV" Description="First Build Up"/>
	</RevDoku>
	<Network Name="Curtis_Universal">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "Curtis_1232E"
				GUID       = "{246591C1-7028-4BB8-A7CD-1E9023F526F9}"
				Class      = "Curtis_1232E"
				Position   = "(990,300)"
				Visualized = "true">
				<Channels>
					<Server Name="Active"/>
					<Server Name="AI_BrakePot"/>
					<Server Name="AI_ThrottlePot"/>
					<Server Name="AutoAccelTime" Value="100"/>
					<Server Name="AutoAct"/>
					<Server Name="AutoDecelTime" Value="10"/>
					<Server Name="AutomaticSetpoint"/>
					<Server Name="AutoSetp"/>
					<Server Name="BDI"/>
					<Server Name="BrakePotSigned"/>
					<Server Name="Capacitor_Voltage"/>
					<Server Name="ClassSvr"/>
					<Server Name="CommunicationOk"/>
					<Server Name="DriveMode"/>
					<Server Name="DriveModeRequest"/>
					<Server Name="EmStopOk"/>
					<Server Name="Enabled" Value="1"/>
					<Server Name="I_DigitalOut6"/>
					<Server Name="I_DigitalOut7"/>
					<Server Name="I_Driver1"/>
					<Server Name="I_Driver2"/>
					<Server Name="I_Driver3"/>
					<Server Name="I_Driver4"/>
					<Server Name="I_PropDriver"/>
					<Server Name="I_Switch1"/>
					<Server Name="I_Switch16"/>
					<Server Name="I_Switch2"/>
					<Server Name="I_Switch3"/>
					<Server Name="I_Switch4"/>
					<Server Name="I_Switch5"/>
					<Server Name="I_Switch6"/>
					<Server Name="I_Switch7"/>
					<Server Name="I_Switch8"/>
					<Server Name="InterlockExternal1"/>
					<Server Name="InterlockExternal2"/>
					<Server Name="InterlockFeedback"/>
					<Server Name="MotorCurrent"/>
					<Server Name="MotorRPM"/>
					<Server Name="MotorTemperature"/>
					<Server Name="QD_DigitalOut6"/>
					<Server Name="QD_DigitalOut7"/>
					<Server Name="QD_Driver1"/>
					<Server Name="QD_Driver2"/>
					<Server Name="QD_Driver3"/>
					<Server Name="QD_Driver4"/>
					<Server Name="QD_PropDriver"/>
					<Server Name="Referenced"/>
					<Server Name="ThrottlePotSigned"/>
					<Client Name="AlarmStartId"/>
					<Client Name="NodeId"/>
					<Client Name="objDriver"/>
				</Channels>
			</Object>
			<Object
				Name       = "Curtis_AC2F"
				GUID       = "{FD7A1CFC-89D0-44AE-B42E-93AC0C31CD14}"
				Class      = "Curtis_AC2F"
				Position   = "(1140,3630)"
				Visualized = "true">
				<Channels>
					<Server Name="Active"/>
					<Server Name="AI_BrakePot"/>
					<Server Name="AI_ThrottlePot"/>
					<Server Name="AutoAccelTime" Value="100"/>
					<Server Name="AutoAct"/>
					<Server Name="AutoDecelTime" Value="10"/>
					<Server Name="AutomaticSetpoint"/>
					<Server Name="AutoSetp"/>
					<Server Name="BDI"/>
					<Server Name="BrakePotSigned"/>
					<Server Name="BusyReferencing"/>
					<Server Name="Capacitor_Voltage"/>
					<Server Name="ClassSvr"/>
					<Server Name="CommunicationOk"/>
					<Server Name="DriveMode"/>
					<Server Name="DriveModeRequest"/>
					<Server Name="EMStop_DiagCode"/>
					<Server Name="EmStopOk"/>
					<Server Name="Enabled" Value="1"/>
					<Server Name="EncoderValue"/>
					<Server Name="Eq_DiagCode"/>
					<Server Name="Fault"/>
					<Server Name="FaultCode"/>
					<Server Name="I_DigitalOut6"/>
					<Server Name="I_DigitalOut7"/>
					<Server Name="I_Driver1"/>
					<Server Name="I_Driver2"/>
					<Server Name="I_Driver3"/>
					<Server Name="I_Driver4"/>
					<Server Name="I_PropDriver"/>
					<Server Name="I_Switch1"/>
					<Server Name="I_Switch16"/>
					<Server Name="I_Switch2"/>
					<Server Name="I_Switch3"/>
					<Server Name="I_Switch4"/>
					<Server Name="I_Switch5"/>
					<Server Name="I_Switch6"/>
					<Server Name="I_Switch7"/>
					<Server Name="I_Switch8"/>
					<Server Name="InterlockExternal1"/>
					<Server Name="InterlockExternal2"/>
					<Server Name="InterlockFeedback"/>
					<Server Name="MonitorValue"/>
					<Server Name="MotorCurrent"/>
					<Server Name="MotorRPM"/>
					<Server Name="MotorTemperature"/>
					<Server Name="ParameterMonitorCase"/>
					<Server Name="ParameterValue"/>
					<Server Name="QD_DigitalOut6"/>
					<Server Name="QD_DigitalOut7"/>
					<Server Name="QD_Driver1"/>
					<Server Name="QD_Driver2"/>
					<Server Name="QD_Driver3"/>
					<Server Name="QD_Driver4"/>
					<Server Name="QD_PropDriver"/>
					<Server Name="Referenced"/>
					<Server Name="ReleaseBrake"/>
					<Server Name="ThrottlePotSigned"/>
					<Client Name="AlarmStartId"/>
					<Client Name="Interlock"/>
					<Client Name="NodeId"/>
					<Client Name="objCurtis_AC2F_IO"/>
					<Client Name="objDriver"/>
					<Client Name="ReleaseBrakesRequest"/>
				</Channels>
			</Object>
			<Object
				Name       = "Curtis_AC2F_IO1"
				GUID       = "{B33EB298-CCDB-43BB-8A47-C441D5AC267E}"
				Class      = "Curtis_AC2F_IO"
				Position   = "(180,3930)"
				Visualized = "true">
				<Channels>
					<Server Name="ClassSvr"/>
					<Server Name="In11_Enc1_c"/>
					<Server Name="In12"/>
					<Server Name="In13"/>
					<Server Name="In14_An14"/>
					<Server Name="In1_An1"/>
					<Server Name="In2_An2_Temp"/>
					<Server Name="In5_An5"/>
					<Server Name="In6_An6"/>
					<Server Name="In7_An7"/>
					<Server Name="In8_An8"/>
					<Server Name="Out1_In21"/>
					<Server Name="Out2_In22"/>
					<Server Name="Out3_In23"/>
					<Server Name="Out4_In24"/>
					<Server Name="Out5_In25"/>
					<Server Name="Out_ResetEm"/>
					<Server Name="xIn21"/>
					<Server Name="xIn22"/>
					<Server Name="xIn23"/>
					<Server Name="xIn24"/>
					<Server Name="xIn25"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
			<Comment Position="(630,3390)" Size="(1560,90)" Text="IO Curtis AC2F&#13;&#10;"/>
			<Comment Position="(390,180)" Size="(1560,90)" Text="IO Curtis 1232E&#13;&#10;"/>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.Curtis_1232E" Destination="Curtis_1232E.ClassSvr"/>
			<Connection Source="this.Curtis_AC2F" Destination="Curtis_AC2F.ClassSvr"/>
			<Connection Source="Curtis_AC2F.AlarmStartId" Destination="this.AlarmStartId" Vertices="(1140,3720),(360,3720),(360,210),(38,210),"/>
			<Connection Source="this.Curtis_AC2F_IO1" Destination="Curtis_AC2F_IO1.ClassSvr"/>
			<Connection Source="Curtis_1232E.AlarmStartId" Destination="this.AlarmStartId" Vertices="(990,390),(360,390),(360,210),(30,210),(38,210),"/>
			<Connection Source="Curtis_AC2F.NodeId" Destination="this.NodeId" Vertices="(1140,3780),(330,3780),(330,270),(38,270),"/>
			<Connection Source="Curtis_1232E.NodeId" Destination="this.NodeId" Vertices="(990,450),(330,450),(330,270),(38,270),"/>
			<Connection Source="Curtis_1232E.objDriver" Destination="this.objDriver" Vertices="(990,510),(270,510),(270,330),(38,330),"/>
			<Connection Source="Curtis_AC2F.objDriver" Destination="this.objDriver" Vertices="(1140,3840),(270,3840),(270,330),(38,330),"/>
			<Connection Source="Curtis_AC2F.objCurtis_AC2F_IO" Destination="Curtis_AC2F_IO1.ClassSvr" Vertices="(1140,3900),(1140,3960),(810,3960),(706,4020),"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
Curtis_Universal : CLASS
	TYPE
#pragma pack(push, 1)
	  CurtisMessageConfig : STRUCT
	    Byte0 : BSINT
	    [
	      1 Q1,
	      2 Q1not,
	      3 Q2,
	      4 Q2not,
	      5 Bit4,
	      6 Bit5,
	      7 Bit6,
	      8 Bit7,
	    ];
	    Byte1 : BSINT
	    [
	      1 InputState_A,
	      2 InputState_B,
	      3 InputState_C,
	      4 InputState_D,
	      5 Bit4,
	      6 Bit5,
	      7 Bit6,
	      8 InputState_StandBy,
	    ];
	    Byte2 : BSINT
	    [
	      1 Bit0_SwFldQ1,
	      2 Bit1_SwFldQ1,
	      3 Bit2_SwFldQ1,
	      4 Bit3_SwFldQ1,
	      5 Bit4_SwFldQ1,
	      6 Bit5,
	      7 Bit6,
	      8 Bit7,
	    ];
	    Byte3 : BSINT
	    [
	      1 Bit0_SwFldQ2,
	      2 Bit1_SwFldQ2,
	      3 Bit2_SwFldQ2,
	      4 Bit3_SwFldQ2,
	      5 Bit4_SwFldQ2,
	      6 Bit5,
	      7 Bit6,
	      8 Bit7,
	    ];
	    Byte4 : BSINT
	    [
	      1 Bit0_DeviceStatus,
	      2 Bit1_DeviceStatus,
	      3 Bit2_DeviceStatus,
	      4 Bit3_DeviceStatus,
	      5 Bit4,
	      6 Bit5,
	      7 Bit6,
	      8 Bit7,
	    ];
	    Byte5 : SINT;
	    Byte6and7 : INT;
	  END_STRUCT;
#pragma pack(pop)
	  CurtisSendConfig : BSINT
	  [
	    1 VirtInp_A,
	    2 VirtInp_B,
	    3 VirtInp_C,
	    4 VirtInp_D,
	    5 Bit4,
	    6 Bit5,
	    7 Bit6,
	    8 VirtInp_Standby,
	  ];
	  eCurtisAlarms :
	  (
	    ca_MainContactor_Welded:=1,
	    ca_MainContactor_NotClosed:=2,
	    ca_PotLow:=3,
	    ca_ThrottleLow:=4,
	    ca_ThrottleHigh:=5,
	    ca_Pot2Low:=6,
	    ca_Pot2High:=7,
	    ca_EepromFail:=8,
	    ca_SequenceFault:=9,
	    ca_UnderVoltage:=10,
	    ca_OverVoltage:=11,
	    ca_UnderVoltage_CutBack:=12,
	    ca_OverVoltage_CutBack:=13,
	    ca_FuseBad:=14,
	    ca_ControllerTemp_CutBack:=15,
	    ca_Controller_UnderTemp:=16,
	    ca_Controller_OverTemp:=17,
	    ca_Coil1_Short:=18,
	    ca_Coil2_Short:=19,
	    ca_Coil3_Short:=20,
	    ca_Coil4_Short:=21,
	    ca_PD_Short:=22,
	    ca_Main_Short:=23,
	    ca_EmBrake_Short:=24,
	    ca_PreCharge_Failed:=25,
	    ca_Digital6_OverCurrent:=26,
	    ca_Digital7_OverCurrent:=27,
	    ca_Controller_OverCurrent:=28,
	    ca_CurrentSensor_Fault:=29,
	    ca_MotorTemp_CutBack:=30,
	    ca_ParameterChange_Fault:=31,
	    ca_Motor_Open:=32,
	    ca_ExtSupply_OutofRange:=33,
	    ca_MotorTemp_SensorFault:=34,
	    ca_VC1_RunTime:=35,
	    ca_5vSupply_Failure:=36,
	    ca_OSGeneral:=37,
	    ca_PDO_Timeout:=38,
	    ca_Encoder_Fault:=39,
	    ca_StallDetected:=40,
	    ca_Com_Timeout:=41,
	    ca_NotRef:=42,
	    ca_RevHpd:=43,
	    ca_NotEnabled:=44,
	    ca_MotorType_Fault:=45,
	    ca_SuperVision:=46,
	    ca_MotorCharacter:=47,
	    ca_PumpHardware:=48,
	    ca_NotDefined_1:=49,
	    ca_VCL_Mismatch:=50,
	    ca_EmBrake_Failed:=51,
	    ca_Encoder_Lose:=52,
	    ca_Rev_Timeout:=53,
	    ca_Dual_Fault:=54,
	    ca_TractionController_Fault:=55,
	    ca_Illegal_ModelNumber:=56,
	    ca_PumpOverCurrent:=57,
	    ca_PumpBdi:=58,
	    ca_PumpHpd:=59,
	    ca_DualMotor_Par_MisMatch:=60,
	    ca_NotDefined_2:=61,
	    ca_NotDefined_3:=62,
	    ca_NotDefined_4:=63,
	    ca_EncoderPulse:=64
	  )$UDINT;
	  eCurtisDriveMode :  //! <Type Public="true" Name="eCurtisDriveMode"/>
	  (
	    cdm_Idle,
	    cdm_TimeOut,
	    cdm_EmergencyStop,
	    cdm_Referencing,
	    cdm_Manual,
	    cdm_Auto,
	    cdm_DriveReset,
	    cdm_ExtInterlockReset
	  )$UDINT;
	  eCurtisDriveModel :  //! <Type Public="true" Name="eCurtisDriveModel"/>
	  (
	    Model_1232e:=1,
	    Model_AC2F:=2
	  )$UDINT;
	  eCurtisDriveModeRequest :  //! <Type Public="true" Name="eCurtisDriveModeRequest"/>
	  (
	    cdmr_NoReq:=4294967295,
	    cdmr_Idle,
	    cdmr_Reference,
	    cdmr_Automatic,
	    cdmr_ResetDrive,
	    cdmr_ResetExtInterlock
	  )$DINT;
#pragma pack(push, 1)
	  Errors : STRUCT
	    Error1 : DINT;
	    Error2 : DINT;
	    Error3 : DINT;
	    Error4 : DINT;
	    Error5 : DINT;
	    Error6 : DINT;
	    Error7 : DINT;
	    NumberOfErrors : DINT;
	  END_STRUCT;
#pragma pack(pop)
	  FuncComm :
	  (
	    _StandBy,
	    _Read,
	    _Write,
	    _Busy
	  )$UDINT;
#pragma pack(push, 1)
	  PdoSplit : STRUCT
	    Val1 : HSINT;
	    Val2 : HSINT;
	    Val3 : HSINT;
	    Val4 : HSINT;
	    Val5 : HSINT;
	    Val6 : HSINT;
	    Val7 : HSINT;
	    Val8 : HSINT;
	  END_STRUCT;
#pragma pack(pop)
	END_TYPE
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
	CurtisModel 	: SvrCh_eCurtisDriveModel_PTofCls_Curtis_Universal;
	Active 	: SvrCh_DINT;
	CommunicationOk 	: SvrCh_DINT;
	DriveMode 	: SvrCh_eCurtisDriveMode_PTofCls_Curtis_Base;
	EmStopOk 	: SvrCh_DINT;
	Referenced 	: SvrCh_DINT;
	InterlockFeedback 	: SvrCh_DINT;
	InterlockExternal1 	: SvrCh_DINT;
	InterlockExternal2 	: SvrCh_DINT;
	AutoAct 	: SvrCh_DINT;
	AutoSetp 	: SvrCh_DINT;
	MotorCurrent 	: SvrCh_DINT;
	BDI 	: SvrCh_DINT;
	Capacitor_Voltage 	: SvrCh_DINT;
	MotorTemperature 	: SvrCh_DINT;
	AI_ThrottlePot 	: SvrCh_DINT;
	AI_BrakePot 	: SvrCh_DINT;
	I_Switch1 	: SvrCh_DINT;
	I_Switch2 	: SvrCh_DINT;
	I_Switch3 	: SvrCh_DINT;
	I_Switch4 	: SvrCh_DINT;
	I_Switch5 	: SvrCh_DINT;
	I_Switch6 	: SvrCh_DINT;
	I_Switch7 	: SvrCh_DINT;
	I_Switch8 	: SvrCh_DINT;
	I_Driver1 	: SvrCh_DINT;
	I_Driver2 	: SvrCh_DINT;
	I_Driver3 	: SvrCh_DINT;
	I_Driver4 	: SvrCh_DINT;
	I_PropDriver 	: SvrCh_DINT;
	I_DigitalOut6 	: SvrCh_DINT;
	I_DigitalOut7 	: SvrCh_DINT;
	I_Switch16 	: SvrCh_DINT;
	MotorRPM 	: SvrCh_DINT;
	Enabled 	: SvrCh_DINT;
	ThrottlePotSigned 	: SvrCh_DINT;
	BrakePotSigned 	: SvrCh_DINT;
	DriveModeRequest 	: SvrCh_eCurtisDriveModeRequest_PTofCls_Curtis_Base;
	AutomaticSetpoint 	: SvrCh_DINT;
	AutoAccelTime 	: SvrCh_DINT;
	AutoDecelTime 	: SvrCh_DINT;
	QD_Driver1 	: SvrCh_DINT;
	QD_Driver2 	: SvrCh_DINT;
	QD_Driver3 	: SvrCh_DINT;
	QD_Driver4 	: SvrCh_DINT;
	QD_PropDriver 	: SvrCh_DINT;
	QD_DigitalOut6 	: SvrCh_DINT;
	QD_DigitalOut7 	: SvrCh_DINT;
  //Clients:
	AlarmStartId 	: CltCh_DINT;
	NodeId 	: CltCh_DINT;
	objDriver 	: CltChCmd_CanDriverBase;
	Curtis_AC2F_IO1 	: CltChCmd_Curtis_AC2F_IO;
	Curtis_1232E 	: CltChCmd_Curtis_1232E;
	Curtis_AC2F 	: CltChCmd_Curtis_AC2F;
  //Variables:
		_curtisModel 	: DINT;
		_initCntr 	: DINT;
		_pCurtisObject 	: ^void;
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL Init;
	
	FUNCTION VIRTUAL GLOBAL CyWork
		VAR_INPUT
			EAX 	: UDINT;
		END_VAR
		VAR_OUTPUT
			state (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION GLOBAL _handleAlarmStates;
	
	FUNCTION GLOBAL _setAlarm
		VAR_INPUT
			alarmType 	: DINT;
		END_VAR;
	
	FUNCTION _initAlarms;
	
	FUNCTION _checkCurtisModel;
	
	FUNCTION VIRTUAL GLOBAL CurtisModel::Write
		VAR_INPUT
			input (EAX) 	: Curtis_Universal::eCurtisDriveModel;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: Curtis_Universal::eCurtisDriveModel;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Active::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL CommunicationOk::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL DriveMode::Read
		VAR_OUTPUT
			output (EAX) 	: Curtis_Base::eCurtisDriveMode;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL EmStopOk::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Referenced::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL InterlockFeedback::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL InterlockExternal1::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL InterlockExternal2::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL AutoAct::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL AutoSetp::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL MotorCurrent::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL BDI::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Capacitor_Voltage::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL MotorTemperature::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL AI_ThrottlePot::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL AI_BrakePot::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL I_Switch1::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL I_Switch2::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL I_Switch3::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL I_Switch4::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL I_Switch5::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL I_Switch6::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL I_Switch7::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL I_Switch8::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL I_Driver1::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL I_Driver2::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL I_Driver3::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL I_Driver4::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL I_PropDriver::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL I_DigitalOut6::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL I_DigitalOut7::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL I_Switch16::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL MotorRPM::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Enabled::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Enabled::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL ThrottlePotSigned::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL ThrottlePotSigned::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL BrakePotSigned::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL BrakePotSigned::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL DriveModeRequest::Read
		VAR_OUTPUT
			output (EAX) 	: Curtis_Base::eCurtisDriveModeRequest;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL DriveModeRequest::Write
		VAR_INPUT
			input (EAX) 	: Curtis_Base::eCurtisDriveModeRequest;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: Curtis_Base::eCurtisDriveModeRequest;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL AutomaticSetpoint::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL AutomaticSetpoint::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL AutoAccelTime::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL AutoAccelTime::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL AutoDecelTime::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL AutoDecelTime::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL QD_Driver1::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL QD_Driver1::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL QD_Driver2::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL QD_Driver2::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL QD_Driver3::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL QD_Driver3::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL QD_Driver4::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL QD_Driver4::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL QD_PropDriver::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL QD_PropDriver::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL QD_DigitalOut6::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL QD_DigitalOut6::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL QD_DigitalOut7::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL QD_DigitalOut7::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma using Curtis_1232E
#pragma using Curtis_AC2F
#pragma using Curtis_AC2F_IO
#pragma usingLtd CanDriverBase


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB Curtis_Universal::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_CURTIS_UNIVERSAL
0$UINT, 0$UINT, (SIZEOF(::Curtis_Universal))$UINT, 
49$UINT, 6$UINT, 0$UINT, 
TO_UDINT(1539249682), "Curtis_Universal", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::Curtis_Universal.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
(::Curtis_Universal.CurtisModel.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(1269963333), "CurtisModel", 
(::Curtis_Universal.Active.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3152427908), "Active", 
(::Curtis_Universal.CommunicationOk.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(481299823), "CommunicationOk", 
(::Curtis_Universal.DriveMode.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1765329764), "DriveMode", 
(::Curtis_Universal.EmStopOk.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1596897538), "EmStopOk", 
(::Curtis_Universal.Referenced.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(391296356), "Referenced", 
(::Curtis_Universal.InterlockFeedback.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2070002542), "InterlockFeedback", 
(::Curtis_Universal.InterlockExternal1.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2301451214), "InterlockExternal1", 
(::Curtis_Universal.InterlockExternal2.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(270797428), "InterlockExternal2", 
(::Curtis_Universal.AutoAct.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3955062603), "AutoAct", 
(::Curtis_Universal.AutoSetp.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2786162864), "AutoSetp", 
(::Curtis_Universal.MotorCurrent.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1218745960), "MotorCurrent", 
(::Curtis_Universal.BDI.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(390787977), "BDI", 
(::Curtis_Universal.Capacitor_Voltage.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1614975653), "Capacitor_Voltage", 
(::Curtis_Universal.MotorTemperature.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2032962293), "MotorTemperature", 
(::Curtis_Universal.AI_ThrottlePot.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2533233576), "AI_ThrottlePot", 
(::Curtis_Universal.AI_BrakePot.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1547769865), "AI_BrakePot", 
(::Curtis_Universal.I_Switch1.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(296148894), "I_Switch1", 
(::Curtis_Universal.I_Switch2.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2293206564), "I_Switch2", 
(::Curtis_Universal.I_Switch3.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(4289248946), "I_Switch3", 
(::Curtis_Universal.I_Switch4.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1640770321), "I_Switch4", 
(::Curtis_Universal.I_Switch5.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(382409607), "I_Switch5", 
(::Curtis_Universal.I_Switch6.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2411874877), "I_Switch6", 
(::Curtis_Universal.I_Switch7.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(4173691563), "I_Switch7", 
(::Curtis_Universal.I_Switch8.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1752852282), "I_Switch8", 
(::Curtis_Universal.I_Driver1.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(4256932495), "I_Driver1", 
(::Curtis_Universal.I_Driver2.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1689449269), "I_Driver2", 
(::Curtis_Universal.I_Driver3.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(330679203), "I_Driver3", 
(::Curtis_Universal.I_Driver4.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2379306496), "I_Driver4", 
(::Curtis_Universal.I_PropDriver.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1541254750), "I_PropDriver", 
(::Curtis_Universal.I_DigitalOut6.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3312247151), "I_DigitalOut6", 
(::Curtis_Universal.I_DigitalOut7.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2993410553), "I_DigitalOut7", 
(::Curtis_Universal.I_Switch16.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(169763464), "I_Switch16", 
(::Curtis_Universal.MotorRPM.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2494551346), "MotorRPM", 
(::Curtis_Universal.Enabled.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(1874609566), "Enabled", 
(::Curtis_Universal.ThrottlePotSigned.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(3302280391), "ThrottlePotSigned", 
(::Curtis_Universal.BrakePotSigned.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(879919876), "BrakePotSigned", 
(::Curtis_Universal.DriveModeRequest.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3615210698), "DriveModeRequest", 
(::Curtis_Universal.AutomaticSetpoint.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1914772985), "AutomaticSetpoint", 
(::Curtis_Universal.AutoAccelTime.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3450530031), "AutoAccelTime", 
(::Curtis_Universal.AutoDecelTime.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1095935015), "AutoDecelTime", 
(::Curtis_Universal.QD_Driver1.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1604441206), "QD_Driver1", 
(::Curtis_Universal.QD_Driver2.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3332933068), "QD_Driver2", 
(::Curtis_Universal.QD_Driver3.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2981082458), "QD_Driver3", 
(::Curtis_Universal.QD_Driver4.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(801841401), "QD_Driver4", 
(::Curtis_Universal.QD_PropDriver.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1708114345), "QD_PropDriver", 
(::Curtis_Universal.QD_DigitalOut6.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3867907263), "QD_DigitalOut6", 
(::Curtis_Universal.QD_DigitalOut7.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2441913385), "QD_DigitalOut7", 
//Clients:
(::Curtis_Universal.AlarmStartId.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000110$UINT, TO_UDINT(688888888), "AlarmStartId", 
(::Curtis_Universal.NodeId.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000110$UINT, TO_UDINT(1813968035), "NodeId", 
(::Curtis_Universal.objDriver.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000100$UINT, TO_UDINT(1019030819), "objDriver", TO_UDINT(1472885325), "CanDriverBase", 0$UINT, 7$UINT, 
(::Curtis_Universal.Curtis_AC2F_IO1.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(1867816015), "Curtis_AC2F_IO1", TO_UDINT(3951156929), "Curtis_AC2F_IO", 0$UINT, 0$UINT, 
(::Curtis_Universal.Curtis_1232E.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(1965105011), "Curtis_1232E", TO_UDINT(1965105011), "Curtis_1232E", 0$UINT, 0$UINT, 
(::Curtis_Universal.Curtis_AC2F.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(883538238), "Curtis_AC2F", TO_UDINT(883538238), "Curtis_AC2F", 0$UINT, 0$UINT, 
END_FUNCTION


#define USER_CNT_Curtis_Universal 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_Curtis_Universal] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION Curtis_Universal::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_Curtis_Universal, pCmd := #vmt.CmdTable);
	vmt.CmdTable.Init		:= #Init();
	vmt.CmdTable.CyWork		:= #CyWork();
	ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	CurtisModel.pMeth			:= StoreMethod( #M_RD_DIRECT(), #CurtisModel::Write() );
	IF CurtisModel.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Active.pMeth			:= StoreMethod( #Active::Read(), #M_NO_F() );
	IF Active.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	CommunicationOk.pMeth			:= StoreMethod( #CommunicationOk::Read(), #M_NO_F() );
	IF CommunicationOk.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	DriveMode.pMeth			:= StoreMethod( #DriveMode::Read(), #M_NO_F() );
	IF DriveMode.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	EmStopOk.pMeth			:= StoreMethod( #EmStopOk::Read(), #M_NO_F() );
	IF EmStopOk.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Referenced.pMeth			:= StoreMethod( #Referenced::Read(), #M_NO_F() );
	IF Referenced.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	InterlockFeedback.pMeth			:= StoreMethod( #InterlockFeedback::Read(), #M_NO_F() );
	IF InterlockFeedback.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	InterlockExternal1.pMeth			:= StoreMethod( #InterlockExternal1::Read(), #M_NO_F() );
	IF InterlockExternal1.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	InterlockExternal2.pMeth			:= StoreMethod( #InterlockExternal2::Read(), #M_NO_F() );
	IF InterlockExternal2.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	AutoAct.pMeth			:= StoreMethod( #AutoAct::Read(), #M_NO_F() );
	IF AutoAct.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	AutoSetp.pMeth			:= StoreMethod( #AutoSetp::Read(), #M_NO_F() );
	IF AutoSetp.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	MotorCurrent.pMeth			:= StoreMethod( #MotorCurrent::Read(), #M_NO_F() );
	IF MotorCurrent.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	BDI.pMeth			:= StoreMethod( #BDI::Read(), #M_NO_F() );
	IF BDI.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Capacitor_Voltage.pMeth			:= StoreMethod( #Capacitor_Voltage::Read(), #M_NO_F() );
	IF Capacitor_Voltage.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	MotorTemperature.pMeth			:= StoreMethod( #MotorTemperature::Read(), #M_NO_F() );
	IF MotorTemperature.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	AI_ThrottlePot.pMeth			:= StoreMethod( #AI_ThrottlePot::Read(), #M_NO_F() );
	IF AI_ThrottlePot.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	AI_BrakePot.pMeth			:= StoreMethod( #AI_BrakePot::Read(), #M_NO_F() );
	IF AI_BrakePot.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	I_Switch1.pMeth			:= StoreMethod( #I_Switch1::Read(), #M_NO_F() );
	IF I_Switch1.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	I_Switch2.pMeth			:= StoreMethod( #I_Switch2::Read(), #M_NO_F() );
	IF I_Switch2.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	I_Switch3.pMeth			:= StoreMethod( #I_Switch3::Read(), #M_NO_F() );
	IF I_Switch3.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	I_Switch4.pMeth			:= StoreMethod( #I_Switch4::Read(), #M_NO_F() );
	IF I_Switch4.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	I_Switch5.pMeth			:= StoreMethod( #I_Switch5::Read(), #M_NO_F() );
	IF I_Switch5.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	I_Switch6.pMeth			:= StoreMethod( #I_Switch6::Read(), #M_NO_F() );
	IF I_Switch6.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	I_Switch7.pMeth			:= StoreMethod( #I_Switch7::Read(), #M_NO_F() );
	IF I_Switch7.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	I_Switch8.pMeth			:= StoreMethod( #I_Switch8::Read(), #M_NO_F() );
	IF I_Switch8.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	I_Driver1.pMeth			:= StoreMethod( #I_Driver1::Read(), #M_NO_F() );
	IF I_Driver1.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	I_Driver2.pMeth			:= StoreMethod( #I_Driver2::Read(), #M_NO_F() );
	IF I_Driver2.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	I_Driver3.pMeth			:= StoreMethod( #I_Driver3::Read(), #M_NO_F() );
	IF I_Driver3.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	I_Driver4.pMeth			:= StoreMethod( #I_Driver4::Read(), #M_NO_F() );
	IF I_Driver4.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	I_PropDriver.pMeth			:= StoreMethod( #I_PropDriver::Read(), #M_NO_F() );
	IF I_PropDriver.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	I_DigitalOut6.pMeth			:= StoreMethod( #I_DigitalOut6::Read(), #M_NO_F() );
	IF I_DigitalOut6.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	I_DigitalOut7.pMeth			:= StoreMethod( #I_DigitalOut7::Read(), #M_NO_F() );
	IF I_DigitalOut7.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	I_Switch16.pMeth			:= StoreMethod( #I_Switch16::Read(), #M_NO_F() );
	IF I_Switch16.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	MotorRPM.pMeth			:= StoreMethod( #MotorRPM::Read(), #M_NO_F() );
	IF MotorRPM.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Enabled.pMeth			:= StoreMethod( #Enabled::Read(), #Enabled::Write() );
	IF Enabled.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	ThrottlePotSigned.pMeth			:= StoreMethod( #ThrottlePotSigned::Read(), #ThrottlePotSigned::Write() );
	IF ThrottlePotSigned.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	BrakePotSigned.pMeth			:= StoreMethod( #BrakePotSigned::Read(), #BrakePotSigned::Write() );
	IF BrakePotSigned.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	DriveModeRequest.pMeth			:= StoreMethod( #DriveModeRequest::Read(), #DriveModeRequest::Write() );
	IF DriveModeRequest.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	AutomaticSetpoint.pMeth			:= StoreMethod( #AutomaticSetpoint::Read(), #AutomaticSetpoint::Write() );
	IF AutomaticSetpoint.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	AutoAccelTime.pMeth			:= StoreMethod( #AutoAccelTime::Read(), #AutoAccelTime::Write() );
	IF AutoAccelTime.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	AutoDecelTime.pMeth			:= StoreMethod( #AutoDecelTime::Read(), #AutoDecelTime::Write() );
	IF AutoDecelTime.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	QD_Driver1.pMeth			:= StoreMethod( #QD_Driver1::Read(), #QD_Driver1::Write() );
	IF QD_Driver1.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	QD_Driver2.pMeth			:= StoreMethod( #QD_Driver2::Read(), #QD_Driver2::Write() );
	IF QD_Driver2.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	QD_Driver3.pMeth			:= StoreMethod( #QD_Driver3::Read(), #QD_Driver3::Write() );
	IF QD_Driver3.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	QD_Driver4.pMeth			:= StoreMethod( #QD_Driver4::Read(), #QD_Driver4::Write() );
	IF QD_Driver4.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	QD_PropDriver.pMeth			:= StoreMethod( #QD_PropDriver::Read(), #QD_PropDriver::Write() );
	IF QD_PropDriver.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	QD_DigitalOut6.pMeth			:= StoreMethod( #QD_DigitalOut6::Read(), #QD_DigitalOut6::Write() );
	IF QD_DigitalOut6.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	QD_DigitalOut7.pMeth			:= StoreMethod( #QD_DigitalOut7::Read(), #QD_DigitalOut7::Write() );
	IF QD_DigitalOut7.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION
(*****************************************************************************************
	Curtis Motor Controller CAN-OPEN driver
	****************************************************************************************
  This class cummunicates with a Curtis 1232 Motor Controller over CAN-OPEN.
  - write RPM and outputs to the Encoder and receive inputs
	****************************************************************************************
*)
FUNCTION VIRTUAL GLOBAL Curtis_Universal::Init
       
  
  
  _initCntr += 1;
  
  case _initCntr of  
     1:
      _checkCurtisModel();
       
    2:
     _initAlarms();
   
     5:

  end_case;
  
END_FUNCTION

FUNCTION Curtis_Universal::_checkCurtisModel
   if CurtisModel = eCurtisDriveModel::Model_1232e then
     _pCurtisObject := (Curtis_1232E.GetThis());
     Curtis_1232E.SetObjCurtis_Universal(pObject:=this); // give with pointer acces to methode / alarms in this network
     _curtisModel := 1;
   elsif CurtisModel = eCurtisDriveModel::Model_AC2F then
     _pCurtisObject := Curtis_AC2F.GetThis();
     Curtis_AC2F.SetObjCurtis_Universal(pObject:=this); // give with pointer acces to methode / alarms in this network
     _curtisModel := 2;
   else
     _pCurtisObject := (Curtis_1232E.GetThis()); //default
     _curtisModel := 1;
   end_if;    
END_FUNCTION

FUNCTION VIRTUAL GLOBAL Curtis_Universal::CyWork
	VAR_INPUT
		EAX 	: UDINT;
	END_VAR
	VAR_OUTPUT
		state (EAX) 	: UDINT;
	END_VAR

  if IsClientConnected(input:=#objDriver) = TRUE & Enabled = 1 then
    Active := 1; 
    IF CurtisModel = eCurtisDriveModel::Model_1232e THEN	
      if _curtisModel <>1 then
        _checkCurtisModel();
      end_if;
	
		  //Curtis_1232E.Worker();
        
    ELSIF CurtisModel = eCurtisDriveModel::Model_AC2F THEN
      if _curtisModel <>2 then
        _checkCurtisModel();
      end_if;

		  //Curtis_AC2F.Worker();		
    END_IF;
  end_if;

	state := READY;

END_FUNCTION
(*****************************************************************************************************)
(** _handleAlarmStates
(** function handles every specific alarm reset if allowed the allarm is set inactive
(*****************************************************************************************************)
FUNCTION GLOBAL Curtis_Universal::_setAlarm
	VAR_INPUT
		alarmType 	: DINT;
	END_VAR
  //call from network class
  case alarmType$eCurtisAlarms of
  
    ca_MainContactor_Welded:

    ca_MainContactor_NotClosed:
    
    
    ca_PotLow:
     
    
    ca_ThrottleLow:
    
      
    ca_ThrottleHigh:
   
      
    ca_Pot2Low:
    
      
    ca_Pot2High:
     
    
    ca_EepromFail:
   
      
    ca_SequenceFault:
     
    
    ca_UnderVoltage:
   
    
    ca_OverVoltage:
      
    ca_UnderVoltage_CutBack:
     
    ca_OverVoltage_CutBack:
     
    
    ca_FuseBad:
   
      
    ca_ControllerTemp_CutBack:
      
      
    ca_Controller_UnderTemp:
    
      
    ca_Controller_OverTemp:
     
      
    ca_Coil1_Short:
   
    
    ca_Coil2_Short:
 
    ca_Coil3_Short:
      
      
    ca_Coil4_Short:
      
      
    ca_PD_Short:
     
      
    ca_Main_Short:
      
      
    ca_EmBrake_Short:
   
    
    ca_PreCharge_Failed:
    
      
    ca_Digital6_OverCurrent:
     
      
    ca_Digital7_OverCurrent:
   
      
    ca_Controller_OverCurrent:
    
      
    ca_CurrentSensor_Fault:
   
    
    ca_MotorTemp_CutBack:
    
      
    ca_ParameterChange_Fault:
   
    ca_Motor_Open:
    
      
    ca_ExtSupply_OutofRange:
    
      
    ca_MotorTemp_SensorFault:
      
      
    ca_VC1_RunTime:
     
      
    ca_5vSupply_Failure:
 
    ca_OSGeneral:
    
      
    ca_PDO_Timeout:
   
      
    ca_Encoder_Fault:
    
      
    ca_StallDetected:
  
      
    ca_Com_Timeout:
   
      
    ca_NotRef:
    
      
    ca_RevHpd:
      
      
    ca_NotEnabled:
      
      
    ca_MotorType_Fault:
    
    ca_SuperVision:
   
      
    ca_MotorCharacter:
     
      
    ca_PumpHardware:
     
      
    ca_NotDefined_1:
   
    ca_VCL_Mismatch:
  
      
    ca_EmBrake_Failed:
      
    
    ca_Encoder_Lose:
   
      
    ca_Rev_Timeout:
    
      
    ca_Dual_Fault:
     
      
    ca_TractionController_Fault:
  
    ca_Illegal_ModelNumber:
     
      
    ca_PumpOverCurrent:
     
      
    ca_PumpBdi:
  
      
    ca_PumpHpd:
      
    ca_DualMotor_Par_MisMatch:
    
    ca_NotDefined_2:

    ca_NotDefined_3:
      
      
    ca_NotDefined_4:
    
      
    ca_EncoderPulse:
   
        
  end_case;

END_FUNCTION

(*****************************************************************************************************)
(** _handleAlarmStates
(** function handles every specific alarm reset if allowed the allarm is set inactive
(*****************************************************************************************************)
FUNCTION GLOBAL Curtis_Universal::_handleAlarmStates

 
END_FUNCTION



























(*****************************************************************************************************)
(** Server channels
(** function handles every server channel between universal and object
(*****************************************************************************************************)
FUNCTION VIRTUAL GLOBAL Curtis_Universal::Active::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR
	
	Active := (_pCurtisObject$^Curtis_Base^.Active.Read())$DINT;
	output := Active;

END_FUNCTION

FUNCTION VIRTUAL GLOBAL Curtis_Universal::DriveMode::Read
	VAR_OUTPUT
		output (EAX) 	: Curtis_Base::eCurtisDriveMode;
	END_VAR
  
  DriveMode := (_pCurtisObject$^Curtis_Base^.DriveMode.Read())$Curtis_Base::eCurtisDriveMode;
	output := DriveMode;

END_FUNCTION

FUNCTION VIRTUAL GLOBAL Curtis_Universal::CommunicationOk::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR
   
  CommunicationOk := (_pCurtisObject$^Curtis_Base^.CommunicationOk.Read())$DINT;
	output := CommunicationOk;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Curtis_Universal::EmStopOk::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR
	
	EmStopOk := (_pCurtisObject$^Curtis_Base^.EmStopOk.Read())$DINT;
	output := EmStopOk;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Curtis_Universal::Referenced::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR
	
  Referenced := (_pCurtisObject$^Curtis_Base^.Referenced.Read())$DINT;
	output := Referenced;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Curtis_Universal::InterlockFeedback::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR
  
  InterlockFeedback := (_pCurtisObject$^Curtis_Base^.InterlockFeedback.Read())$DINT;
 	output := InterlockFeedback;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Curtis_Universal::InterlockExternal1::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR
  
  InterlockExternal1 := (_pCurtisObject$^Curtis_Base^.InterlockExternal1.Read())$DINT;
	output := InterlockExternal1;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Curtis_Universal::InterlockExternal2::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR
  
  InterlockExternal2 := (_pCurtisObject$^Curtis_Base^.InterlockExternal2.Read())$DINT;
	output := InterlockExternal2;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Curtis_Universal::AutoAct::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR
  
  AutoAct := (_pCurtisObject$^Curtis_Base^.AutoAct.Read())$DINT;
	output := AutoAct;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Curtis_Universal::AutoSetp::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR
  
  AutoSetp := (_pCurtisObject$^Curtis_Base^.AutoSetp.Read())$DINT;
	output := AutoSetp;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Curtis_Universal::MotorCurrent::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR
  
  MotorCurrent := (_pCurtisObject$^Curtis_Base^.MotorCurrent.Read())$DINT;
	output := MotorCurrent;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Curtis_Universal::BDI::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR
  
  BDI := (_pCurtisObject$^Curtis_Base^.BDI.Read())$DINT;
	output := BDI;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Curtis_Universal::Capacitor_Voltage::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR
  
  Capacitor_Voltage := (_pCurtisObject$^Curtis_Base^.Capacitor_Voltage.Read())$DINT;
	output := Capacitor_Voltage;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Curtis_Universal::MotorTemperature::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR
  
  MotorTemperature := (_pCurtisObject$^Curtis_Base^.MotorTemperature.Read())$DINT;
	output := MotorTemperature;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Curtis_Universal::AI_ThrottlePot::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR
  
  AI_ThrottlePot := (_pCurtisObject$^Curtis_Base^.AI_ThrottlePot.Read())$DINT;
	output := AI_ThrottlePot;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Curtis_Universal::AI_BrakePot::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR
  
  AI_BrakePot := (_pCurtisObject$^Curtis_Base^.AI_BrakePot.Read())$DINT;
	output := AI_BrakePot;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Curtis_Universal::I_Switch1::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR
  
  I_Switch1 := (_pCurtisObject$^Curtis_Base^.I_Switch1.Read())$DINT;
	output := I_Switch1;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Curtis_Universal::I_Switch2::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR
  
  I_Switch2 := (_pCurtisObject$^Curtis_Base^.I_Switch2.Read())$DINT; 
	output := I_Switch2;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Curtis_Universal::I_Switch3::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR
  
  I_Switch3 := (_pCurtisObject$^Curtis_Base^.I_Switch3.Read())$DINT;
	output := I_Switch3;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Curtis_Universal::I_Switch4::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR
  
  I_Switch4 := (_pCurtisObject$^Curtis_Base^.I_Switch4.Read())$DINT;
	output := I_Switch4;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Curtis_Universal::I_Switch5::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR
  
  I_Switch5 := (_pCurtisObject$^Curtis_Base^.I_Switch5.Read())$DINT;
	output := I_Switch5;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Curtis_Universal::I_Switch6::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR
  
  I_Switch6 := (_pCurtisObject$^Curtis_Base^.I_Switch6.Read())$DINT; 
	output := I_Switch6;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Curtis_Universal::I_Switch7::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR
  
  I_Switch7 := (_pCurtisObject$^Curtis_Base^.I_Switch7.Read())$DINT;
	output := I_Switch7;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Curtis_Universal::I_Switch8::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR
  
  I_Switch8 := (_pCurtisObject$^Curtis_Base^.I_Switch8.Read())$DINT;
	output := I_Switch8;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Curtis_Universal::I_Driver1::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR
  
  I_Driver1 := (_pCurtisObject$^Curtis_Base^.I_Driver1.Read())$DINT;
	output := I_Driver1;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Curtis_Universal::I_Driver2::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR
  
  I_Driver2 := (_pCurtisObject$^Curtis_Base^.I_Driver2.Read())$DINT;
	output := I_Driver2;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Curtis_Universal::I_Driver3::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR
  
  I_Driver3 := (_pCurtisObject$^Curtis_Base^.I_Driver3.Read())$DINT;
	output := I_Driver3;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Curtis_Universal::I_Driver4::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR
  
  I_Driver4 := (_pCurtisObject$^Curtis_Base^.I_Driver4.Read())$DINT;
	output := I_Driver4;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Curtis_Universal::I_PropDriver::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR
  
  I_PropDriver := (_pCurtisObject$^Curtis_Base^.I_PropDriver.Read())$DINT;
	output := I_PropDriver;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Curtis_Universal::I_DigitalOut6::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR
  
  I_DigitalOut6 := (_pCurtisObject$^Curtis_Base^.I_DigitalOut6.Read())$DINT;
	output := I_DigitalOut6;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Curtis_Universal::I_DigitalOut7::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR
  
  I_DigitalOut7 := (_pCurtisObject$^Curtis_Base^.I_DigitalOut7.Read())$DINT;
	output := I_DigitalOut7;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Curtis_Universal::I_Switch16::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR
  
  I_Switch16 := (_pCurtisObject$^Curtis_Base^.I_Switch16.Read())$DINT; 
	output := I_Switch16;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Curtis_Universal::MotorRPM::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR
  
  // will be read when startup
  if _pCurtisObject <> nil then
    MotorRPM := (_pCurtisObject$^Curtis_Base^.MotorRPM.Read())$DINT;
    output := MotorRPM;
  else
    output := 0 ;
  end_if;
  
END_FUNCTION


FUNCTION VIRTUAL GLOBAL Curtis_Universal::Enabled::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR
  
  Enabled := (_pCurtisObject$^Curtis_Base^.Enabled.Read())$DINT;
	output := Enabled;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Curtis_Universal::Enabled::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR
  
  Enabled := input;
  result := (_pCurtisObject$^Curtis_Base^.Enabled.Write(Enabled))$DINT; 

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Curtis_Universal::ThrottlePotSigned::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR
  
  ThrottlePotSigned := (_pCurtisObject$^Curtis_Base^.ThrottlePotSigned.Read())$DINT;
	output := ThrottlePotSigned;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Curtis_Universal::ThrottlePotSigned::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR
  
 	ThrottlePotSigned := input;
  result := (_pCurtisObject$^Curtis_Base^.ThrottlePotSigned.Write(ThrottlePotSigned))$DINT; 

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Curtis_Universal::BrakePotSigned::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR
  
  BrakePotSigned := (_pCurtisObject$^Curtis_Base^.BrakePotSigned.Read())$DINT;
	output := BrakePotSigned;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Curtis_Universal::BrakePotSigned::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR
  
  BrakePotSigned := input;
  result := (_pCurtisObject$^Curtis_Base^.BrakePotSigned.Write(BrakePotSigned))$DINT;

END_FUNCTION

FUNCTION VIRTUAL GLOBAL Curtis_Universal::AutomaticSetpoint::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR
  
  AutomaticSetpoint := (_pCurtisObject$^Curtis_Base^.AutomaticSetpoint.Read())$DINT; 
	output := AutomaticSetpoint;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Curtis_Universal::AutomaticSetpoint::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR
  
  AutomaticSetpoint := input;
  result := (_pCurtisObject$^Curtis_Base^.AutomaticSetpoint.Write(AutomaticSetpoint))$DINT;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Curtis_Universal::AutoAccelTime::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR
  
  AutoAccelTime := (_pCurtisObject$^Curtis_Base^.AutoAccelTime.Read())$DINT;
	output := AutoAccelTime;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Curtis_Universal::AutoAccelTime::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR
  
  AutoAccelTime := input;
  result := (_pCurtisObject$^Curtis_Base^.AutoAccelTime.Write(AutoAccelTime))$DINT; 

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Curtis_Universal::AutoDecelTime::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR
  
  AutoDecelTime := (_pCurtisObject$^Curtis_Base^.AutoDecelTime.Read())$DINT;
	output := AutoDecelTime;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Curtis_Universal::AutoDecelTime::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR
  
  AutoDecelTime := input;
  result := (_pCurtisObject$^Curtis_Base^.AutoDecelTime.Write(AutoDecelTime))$DINT;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Curtis_Universal::QD_Driver1::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

  QD_Driver1 := (_pCurtisObject$^Curtis_Base^.QD_Driver1.Read())$DINT; 
	output := QD_Driver1;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Curtis_Universal::QD_Driver1::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR
  
	QD_Driver1 := input;  
  result := (_pCurtisObject$^Curtis_Base^.QD_Driver1.Write(QD_Driver1))$DINT; 

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Curtis_Universal::QD_Driver2::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR
  
 	QD_Driver2 := (_pCurtisObject$^Curtis_Base^.QD_Driver2.Read())$DINT;
	output := QD_Driver2;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Curtis_Universal::QD_Driver2::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR
  
  QD_Driver2 := input;
  result := (_pCurtisObject$^Curtis_Base^.QD_Driver2.Write(QD_Driver2))$DINT;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Curtis_Universal::QD_Driver3::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR
  
  QD_Driver3 := (_pCurtisObject$^Curtis_Base^.QD_Driver3.Read())$DINT;
	output := QD_Driver3;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Curtis_Universal::QD_Driver3::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR
  
  QD_Driver3 := input;
  result := (_pCurtisObject$^Curtis_Base^.QD_Driver3.Write(QD_Driver3))$DINT; 

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Curtis_Universal::QD_Driver4::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR
  
  QD_Driver4 := (_pCurtisObject$^Curtis_Base^.QD_Driver4.Read())$DINT;
	output := QD_Driver4;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Curtis_Universal::QD_Driver4::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR
  
	QD_Driver4 := input;
  result := (_pCurtisObject$^Curtis_Base^.QD_Driver4.Write(QD_Driver4))$DINT; 

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Curtis_Universal::QD_PropDriver::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR
  
  QD_PropDriver := (_pCurtisObject$^Curtis_Base^.QD_PropDriver.Read())$DINT;
	output := QD_PropDriver;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Curtis_Universal::QD_PropDriver::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR
  
	QD_PropDriver := input;
  result := (_pCurtisObject$^Curtis_Base^.QD_PropDriver.Write(QD_PropDriver))$DINT; 

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Curtis_Universal::QD_DigitalOut6::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR
  
  QD_DigitalOut6 := (_pCurtisObject$^Curtis_Base^.QD_DigitalOut6.Read())$DINT; 
	output := QD_DigitalOut6;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Curtis_Universal::QD_DigitalOut6::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR
  
	QD_DigitalOut6 := input;  
  result := (_pCurtisObject$^Curtis_Base^.QD_DigitalOut6.Write(QD_DigitalOut6))$DINT; 

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Curtis_Universal::QD_DigitalOut7::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR
  
  QD_DigitalOut7 := (_pCurtisObject$^Curtis_Base^.QD_DigitalOut7.Read())$DINT;
	output := QD_DigitalOut7;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Curtis_Universal::QD_DigitalOut7::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR
  
	QD_DigitalOut7 := input;
  result := (_pCurtisObject$^Curtis_Base^.QD_DigitalOut7.Write(QD_DigitalOut7))$DINT; 

END_FUNCTION

FUNCTION VIRTUAL GLOBAL Curtis_Universal::DriveModeRequest::Read
	VAR_OUTPUT
		output (EAX) 	: Curtis_Base::eCurtisDriveModeRequest;
	END_VAR
  
  DriveModeRequest := (_pCurtisObject$^Curtis_Base^.DriveModeRequest.Read())$Curtis_Base::eCurtisDriveModeRequest;
  output := DriveModeRequest;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Curtis_Universal::DriveModeRequest::Write
	VAR_INPUT
		input (EAX) 	: Curtis_Base::eCurtisDriveModeRequest;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: Curtis_Base::eCurtisDriveModeRequest;
	END_VAR
	
	DriveModeRequest := input;  
  result := (_pCurtisObject$^Curtis_Base^.DriveModeRequest.Write(DriveModeRequest))$Curtis_Base::eCurtisDriveModeRequest; 
	
END_FUNCTION


FUNCTION VIRTUAL GLOBAL Curtis_Universal::CurtisModel::Write
	VAR_INPUT
		input (EAX) 	: Curtis_Universal::eCurtisDriveModel;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: Curtis_Universal::eCurtisDriveModel;
	END_VAR

	CurtisModel := input;
	result := CurtisModel;

END_FUNCTION

FUNCTION Curtis_Universal::_initAlarms
   
 
     
       
END_FUNCTION

