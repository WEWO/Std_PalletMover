//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "Dana_Tm4"
	Revision           = "0.0"
	GUID               = "{D11936CE-D2FD-44F2-B1C6-649004F86B37}"
	RealtimeTask       = "false"
	CyclicTask         = "true"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(900,180)">
	<Channels>
		<Server Name="ActualEncoder" GUID="{F690880B-8E8C-457C-804D-EDCCA9712285}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="ActualSpeed" GUID="{80BBC2DF-5BBB-4D60-94E8-39532C908EB7}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="ActualTorque" GUID="{94D317BA-CF54-4F46-BBFC-A78EB31C6B9C}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="BatteryLevel" GUID="{EE1516A2-9979-4ACD-9371-8E91BBF38AFF}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="BatteryVoltage" GUID="{DA1D0D3D-BFA7-4CBC-B25C-86B4CCDBCA47}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="InverterTemp" GUID="{7D492E6B-096F-46F2-9EA0-C6738F81F1B9}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="MotorControl" GUID="{3966BDEF-B22E-4E77-BAC6-39B79E0B6583}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="MotorError" GUID="{921CF490-BC36-429A-AA75-B5FD942819C0}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="MotorLoad" GUID="{4EF7A235-4B92-4CE5-8035-02737461970A}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="MotorState" GUID="{B6390A82-050E-45DD-90DA-1CEE90DE1D68}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="MotorTemp" GUID="{49A08EEE-34B4-47E1-BE1F-FC3F2427884E}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="SetFeedForward" GUID="{0B0E4673-18F0-4E9C-B8DF-EB4CCA2EF15E}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="SetSpeed" GUID="{E67D684F-C451-4A26-8BA4-42ADB2BA5140}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
	</Channels>
	<Network Name="Dana_Tm4">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "_base"
				GUID       = "{03F885EA-9E7B-48CD-92F2-3B6C88035AD3}"
				Class      = "CanOpenWewoBase"
				Position   = "(218,120)"
				Visualized = "false">
				<Channels>
					<Server Name="Server0"/>
					<Client Name="cNode"/>
					<Client Name="ConfigData"/>
					<Client Name="Driver"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.Server0" Destination="_base.Server0" Vertices="(946,210),(774,210),"/>
			<Connection Source="_base.cNode" Destination="this.cNode" Vertices="(218,270),(38,270),"/>
			<Connection Source="_base.Driver" Destination="this.Driver" Vertices="(218,210),(38,210),"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
#pragma using CanOpenWewoBase

Dana_Tm4 : CLASS
: CanOpenWewoBase
	TYPE
	  tControlWord : BINT  //! <Type Public="true" Name="tControlWord"/>
	  [
	    1 DriveEnable,
	    2 MainContactor,
	    3 BrakeRelease,
	    4 Output_01,
	    5 Output_02,
	    6 Output_03,
	    7 Output_04,
	    8 SafeStop,
	    9 Bit9,
	    10 Bit10,
	    11 Bit11,
	    12 Bit12,
	    13 Bit13,
	    14 Bit14,
	    15 Bit15,
	    16 Reset,
	  ];
#pragma pack(push, 1)
	  tCurrent : STRUCT
	    StructItem : SINT;
	    StructItem0 : SINT;
	  END_STRUCT;
#pragma pack(pop)
	  tStatusbyte : BSINT  //! <Type Public="true" Name="tStatusbyte"/>
	  [
	    1 PowerActive,
	    2 Fault,
	    3 TorqueMode,
	    4 ModeAnalog,
	    5 ModeCan,
	    6 ccwActive,
	    7 SafeStopActive,
	    8 ToggelBit,
	  ];
	END_TYPE
  //Servers:
	MotorState 	: SvrCh_gt_AgvMotorState;
	MotorLoad 	: SvrCh_DINT;
	ActualSpeed 	: SvrCh_DINT;
	ActualTorque 	: SvrCh_DINT;
	ActualEncoder 	: SvrCh_DINT;
	MotorError 	: SvrCh_DINT;
	BatteryLevel 	: SvrCh_DINT;
	InverterTemp 	: SvrCh_DINT;
	MotorTemp 	: SvrCh_DINT;
	BatteryVoltage 	: SvrCh_DINT;
	SetSpeed 	: SvrCh_DINT;
	SetFeedForward 	: SvrCh_DINT;
	MotorControl 	: SvrCh_gt_AgvMotorControl;
  //Clients:
  //Variables:
		MotorStatus 	: tStatusbyte;
		MotorCntr 	: tControlWord;
		Current 	: tCurrent;
		CurrendState 	: gt_AgvMotorState;
		ReqState 	: gt_AgvMotorState;
		LastToggelBit 	: DINT;
		LasttAlive 	: UDINT;
		MotorTimeOut 	: DINT;
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL CyWork
		VAR_INPUT
			EAX 	: UDINT;
		END_VAR
		VAR_OUTPUT
			state (EAX) 	: UDINT := READY;
		END_VAR;
	
	FUNCTION GetdataCan;
	
	FUNCTION SetdataCan;
	
	FUNCTION GLOBAL Method;
	
	FUNCTION HandelStates;
	
	FUNCTION CheckError;
	
	FUNCTION VIRTUAL GLOBAL MotorState::Read
		VAR_OUTPUT
			output (EAX) 	: gt_AgvMotorState;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL MotorState::Write
		VAR_INPUT
			input (EAX) 	: gt_AgvMotorState;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: gt_AgvMotorState;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB Dana_Tm4::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_DANA_TM4
0$UINT, 0$UINT, (SIZEOF(::Dana_Tm4))$UINT, 
13$UINT, 0$UINT, 0$UINT, 
TO_UDINT(3874499379), "Dana_Tm4", //Class
TO_UDINT(2527060916), "CanOpenWewoBase", 0$UINT, 1$UINT, //Baseclass
//Servers:
(::Dana_Tm4.MotorState.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(963223222), "MotorState", 
(::Dana_Tm4.MotorLoad.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1626939324), "MotorLoad", 
(::Dana_Tm4.ActualSpeed.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2667731257), "ActualSpeed", 
(::Dana_Tm4.ActualTorque.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(4054034354), "ActualTorque", 
(::Dana_Tm4.ActualEncoder.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2293153108), "ActualEncoder", 
(::Dana_Tm4.MotorError.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3341283388), "MotorError", 
(::Dana_Tm4.BatteryLevel.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2048953329), "BatteryLevel", 
(::Dana_Tm4.InverterTemp.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3010674857), "InverterTemp", 
(::Dana_Tm4.MotorTemp.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1319927403), "MotorTemp", 
(::Dana_Tm4.BatteryVoltage.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(662848058), "BatteryVoltage", 
(::Dana_Tm4.SetSpeed.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(33026088), "SetSpeed", 
(::Dana_Tm4.SetFeedForward.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(789204927), "SetFeedForward", 
(::Dana_Tm4.MotorControl.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2039254568), "MotorControl", 
//Clients:
END_FUNCTION


#define USER_CNT_Dana_Tm4 21

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_Dana_Tm4] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION Dana_Tm4::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
		nCmdSize	: UINT;
	END_VAR

	ret_code	:= CanOpenWewoBase::@STD();
	IF ret_code <> C_OK THEN
		RETURN;
	END_IF;
	nCmdSize		:= CanBase::Server0.pMeth^.nCmds$UINT*SIZEOF(pVoid) + CMDMETH.Init;

	_memcpy((#vmt.CmdTable)$^USINT, CanBase::Server0.pMeth, nCmdSize);
	vmt.CmdTable.nCmds		:= nSTDCMD + USER_CNT_Dana_Tm4;
	vmt.CmdTable.CyWork		:= #CyWork();
	CanBase::Server0.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF CanBase::Server0.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	MotorState.pMeth			:= StoreMethod( #MotorState::Read(), #MotorState::Write() );
	IF MotorState.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION


FUNCTION VIRTUAL GLOBAL Dana_Tm4::CyWork
	VAR_INPUT
		EAX 	: UDINT;
	END_VAR
	VAR_OUTPUT
		state (EAX) 	: UDINT;(* := READY *)
	END_VAR

     GetdataCan();
     
     HandelStates();
  
     
     SetDataCan();

END_FUNCTION


FUNCTION Dana_Tm4::GetdataCan
    
    VAR
    	Pdata : ^CanObjStr;
    END_VAR

    
     Pdata := GetPDO(PdoId:=16#180);  
    if Pdata <> nil then
         MotorStatus    := Pdata^.Data[1];
         MotorLoad      := Pdata^.Data[2];
         ActualTorque   := Pdata^.Data[3]$int;  
         ActualSpeed    := Pdata^.Data[5]$int;
         ActualEncoder := Pdata^.Data[7]$int;
    END_IF; 
    
    Pdata := GetPDO(PdoId:=16#280);  
    if Pdata <> nil then
        MotorError      := Pdata^.Data[1]$int; 
        BatteryLevel     :=Pdata^.Data[3];   
        InverterTemp    :=Pdata^.Data[4];
        MotorTemp       :=Pdata^.Data[5]$int;
        BatteryVoltage  :=Pdata^.Data[7]$int;
    end_if;
   
 
END_FUNCTION


FUNCTION Dana_Tm4::SetdataCan

SendPDO(PdoId:=16#200, Bytes:=8, Value1:=MotorCntr$INT, Value2:=SetSpeed$int, Value3:=SetFeedForward$int, Value4:=Current$int);

END_FUNCTION


FUNCTION VIRTUAL GLOBAL Dana_Tm4::MotorState::Write
	VAR_INPUT
		input (EAX) 	: gt_AgvMotorState;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: gt_AgvMotorState;
	END_VAR

	MotorState := ::gt_AgvMotorState::M_St_Busy;;
    ReqState := input;
	result := ::gt_AgvMotorState::M_St_Busy;

END_FUNCTION


FUNCTION GLOBAL Dana_Tm4::Method

END_FUNCTION


FUNCTION Dana_Tm4::HandelStates



    case CurrendState of

        ::gt_AgvMotorState::M_St_Config:
        
        ::gt_AgvMotorState::M_St_Error:
        
        ::gt_AgvMotorState::M_St_Ready:
            CheckError();
            MotorState := ::gt_AgvMotorState::M_St_Ready;
        
        ::gt_AgvMotorState::M_St_Operational:
               CheckError();
        
        ::gt_AgvMotorState::M_St_Reset:
             if LastToggelBit <> MotorStatus.ToggelBit then
                CurrendState :=  ::gt_AgvMotorState::M_St_Ready;
                MotorState := ::gt_AgvMotorState::M_St_Ready;
            end_if;
        
    end_case;
    
    case ReqState of
        
          ::gt_AgvMotorState::M_St_Reset:
            MotorCntr.Reset := true;
            CurrendState :=  ::gt_AgvMotorState::M_St_Reset;
            ReqState := ::gt_AgvMotorState::M_St_Busy;
            LastToggelBit := MotorStatus.ToggelBit;
            
           ::gt_AgvMotorState::M_St_Busy:

    end_case;
    
END_FUNCTION


FUNCTION VIRTUAL GLOBAL Dana_Tm4::MotorState::Read
	VAR_OUTPUT
		output (EAX) 	: gt_AgvMotorState;
	END_VAR

    MotorState := CurrendState;
	output := MotorState;

END_FUNCTION


FUNCTION Dana_Tm4::CheckError
    if tAlive = LasttAlive then
        MotorTimeOut -=1;
        if MotorTimeOut <= 0 then
            ReqState :=   gt_AgvMotorState::M_St_Error;
         end_if;
    else
         MotorTimeOut := 200;
      LasttAlive :=  tAlive; 
   end_if;     

END_FUNCTION
