//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)

//{{LSL_DEFINES
#define COMDIAGMQTT_DIAGNOSTIC_NEWINST_GET_UNSUBSCRIBES     50  //Number of Unsubscribe Requests
#define COMDIAGMQTT_DIAGNOSTIC_NEWINST_GET_UNSUBFAILS       51  //Number of Unsubscribe Failures
#define COMDIAGMQTT_DIAGNOSTIC_NEWINST_GET_PUBSUBENTRIES    52  //Number of PubSub List Entries
#define COMDIAGMQTT_DIAGNOSTIC_NEWINST_GET_LOGCOUNT         53  //Number of Logs Made
#define COMDIAGMQTT_DIAGNOSTIC_NEWINST_GET_PINGREQSENT      54  //Number of PINGREQ Sent
#define COMDIAGMQTT_DIAGNOSTIC_NEWINST_GET_PINGRESPREC      55  //Number of PINGRESP Received
#define COMDIAGMQTT_DIAGNOSTIC_NEWINST_GET_QOS0_PUB         56  //Number of QOS0 Publish Messages
#define COMDIAGMQTT_DIAGNOSTIC_NEWINST_GET_QOS1_PUB         57  //Number of QOS1 Publish Messages
#define COMDIAGMQTT_DIAGNOSTIC_NEWINST_GET_QOS2_PUB         58  //Number of QOS2 Publish Messages
#define COMDIAGMQTT_DIAGNOSTIC_NEWINST_GET_QOS0_SUB         59  //Number of QOS0 Subscribe Messages
#define COMDIAGMQTT_DIAGNOSTIC_NEWINST_GET_QOS1_SUB         60  //Number of QOS1 Subscribe Messages
#define COMDIAGMQTT_DIAGNOSTIC_NEWINST_GET_QOS2_SUB         61  //Number of QOS2 Subscribe Messages
#define COMDIAGMQTT_DIAGNOSTIC_NEWINST_GET_DM_ELEMENTS      62  //Number of Datamap Entries
#define COMDIAGMQTT_DIAGNOSTIC_NEWINST_GET_TX_RATE          63  //TX Rate
#define COMDIAGMQTT_DIAGNOSTIC_NEWINST_GET_RX_RATE          64  //RX Rate
#define COMDIAGMQTT_DIAGNOSTIC_NEWINST_GET_RX_BYTES         65  //Total RX Bytes
#define COMDIAGMQTT_DIAGNOSTIC_NEWINST_GET_TX_BYTES         66  //Total TX Bytes
//}}LSL_DEFINES

//{{LSL_DECLARATION

(*!
<Class
	Name               = "ComDiagnosis_MQTT"
	Revision           = "1.0"
	GUID               = "{3037178C-8C9C-4399-93F8-07078DFA7AA9}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "true"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	IconPath           = ".\Class\MQTTClient_Interface\mqtt.ico"
	SharedCommandTable = "true"
	Objectsize         = "(560,120)"
	Comment            = "MQTTClientInterface Specific derivation of the ComDiagnosis Class.">
	<Channels>
		<Server Name="DataMapElements" GUID="{2C52E95A-58D9-4F22-B17B-130CAC8A29F2}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false" Comment="Number of Registered DataMap Elements"/>
		<Server Name="LogCount" GUID="{24314FB4-5E4E-434C-B082-826778079B1E}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false" Comment="Number of logs created from the MQTTClientInterface, the log counter will increment even if the log is not saved due to the filter setup on the _ComLogging Object inside of the MQTTClientInterface Class."/>
		<Server Name="Publish_QOS0" GUID="{74238248-579E-40EF-BBF3-BE28F37690E0}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false" Comment="Number of QOS0 Publish requests received."/>
		<Server Name="Publish_QOS1" GUID="{263AC64F-BB64-42BD-927B-6D4C80B04F1E}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false" Comment="Number of QOS1 Publish requests received."/>
		<Server Name="Publish_QOS2" GUID="{BAF1C6B6-9BF5-4CA0-85E6-A2AE1239F0EE}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false" Comment="Number of QOS2 Publish requests received."/>
		<Server Name="PubSubListEntries" GUID="{B68A5C0E-821C-49FC-8F73-C2D8192DCF97}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false" Comment="Number of entries in the PubSublist of the MQTTClientInterface."/>
		<Server Name="RXRate" GUID="{A646F8E4-7B1D-4844-BBAF-3168C8922977}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false" Comment="Mbps Transfer rate of received messages, only the payload size over time is considered, therefor the true Transfer rate will be higher to compensate for:&#13;&#10;1. Headers of messages&#13;&#10;2. Confirmations of messages (PUBACK, PUBREC, etc.)&#13;&#10;3. Retransfer of failed / timed out messages."/>
		<Server Name="Subscribe_QOS0" GUID="{CB73FA5E-151C-4BA0-A39D-01F5A0B5B5B9}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false" Comment="Number of QOS0 Subscribe requests received."/>
		<Server Name="Subscribe_QOS1" GUID="{5E7B2918-C00C-4F1D-B77B-FF0B6563A759}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false" Comment="Number of QOS1 Subscribe requests received."/>
		<Server Name="Subscribe_QOS2" GUID="{F49AA25C-4920-4D34-B88F-DA840F0BD26F}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false" Comment="Number of QOS2 Subscribe requests received."/>
		<Server Name="TotalRXBytes" GUID="{04E37FF1-E58E-464C-8267-CCB50708CD52}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false" Comment="Total number of bytes received, only the summed payload size of received messages over time is considered, therefor the actual transfer rate will be higher to compensate for:&#13;&#10;1. Headers of messages&#13;&#10;2. Confirmations of messages (PUBACK, PUBREC, etc.)&#13;&#10;3. Retransfer of failed / timed out messages.&#13;&#10;4. Ping requests &amp; responses, etc."/>
		<Server Name="TotalTXBytes" GUID="{2C1FDC11-D3D6-49F8-A9F0-64ACE7AADDD5}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false" Comment="Total number of bytes transmitted, only the summed payload size of publish messages over time is considered, therefor the actual transfer rate will be higher to compensate for:&#13;&#10;1. Headers of messages&#13;&#10;2. Confirmations of messages (PUBACK, PUBREC, etc.)&#13;&#10;3. Retransfer of failed / timed out messages.&#13;&#10;4. Ping requests &amp; responses, etc."/>
		<Server Name="TXRate" GUID="{B31EB650-8067-4799-A3FF-6E9F54A98C7A}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false" Comment="Mbps Transfer rate of transmitted messages, only the payload size over time is considered, therefor the true Transfer rate will be higher to compensate for:&#13;&#10;1. Headers of messages&#13;&#10;2. Confirmations of messages (PUBACK, PUBREC, etc.)&#13;&#10;3. Retransfer of failed / timed out messages."/>
		<Server Name="UnsubscribeFails" GUID="{64A43BA8-B4F6-43D7-B084-732336E76C21}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false" Comment="Number of failed Unsubscribe requests."/>
		<Server Name="Unsubscribes" GUID="{0F911B3C-6528-4C90-8F3A-A9EAA769C378}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false" Comment="Number of unsubscribe requests sent from the MQTTClientInterface."/>
	</Channels>
	<Dependencies>
		<Files>
			<File Path=".\Class\ComDiagnosis_MQTT\ComDiagnosis_MQTT_de.pdf"/>
			<File Path=".\Class\ComDiagnosis_MQTT\ComDiagnosis_MQTT_en.pdf"/>
		</Files>
	</Dependencies>
	<RevDoku>
		<Owner Company="Sigmatek" Author="VelGer"/>
		<Dokumentation Revision="1.0" Date="2019-04-19" Author="VelGer" Company="Sigmatek" Description="Creation."/>
	</RevDoku>
	<Network Name="ComDiagnosis_MQTT">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "_base"
				GUID       = "{7472BEC2-0379-47FB-BE16-D2010FD0D55B}"
				Class      = "_ComDiagnosis"
				Position   = "(218,120)"
				Visualized = "true"
				Remotely   = "true">
				<Channels>
					<Server Name="ActErrorCode"/>
					<Server Name="ClassSvr"/>
					<Server Name="CmdResetDiags"/>
					<Server Name="ConnectCnt"/>
					<Server Name="ConnectFailCnt"/>
					<Server Name="ErrorCnt"/>
					<Server Name="LastErrorCode"/>
					<Server Name="ReadCnt"/>
					<Server Name="ReadErrorCnt"/>
					<Server Name="RefreshCnt"/>
					<Server Name="RetryCnt"/>
					<Server Name="WatchdogCnt"/>
					<Server Name="WriteCnt"/>
					<Server Name="WriteErrorCnt"/>
					<Client Name="ComObject"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.ClassSvr" Destination="_base.ClassSvr" Vertices="(902,210),(730,210),"/>
			<Connection Source="this.RefreshCnt" Destination="_base.RefreshCnt" Vertices="(902,270),(730,270),"/>
			<Connection Source="this.ConnectCnt" Destination="_base.ConnectCnt" Vertices="(902,330),(730,390),"/>
			<Connection Source="this.ConnectFailCnt" Destination="_base.ConnectFailCnt" Vertices="(902,390),(730,450),"/>
			<Connection Source="this.RetryCnt" Destination="_base.RetryCnt" Vertices="(902,450),(730,510),"/>
			<Connection Source="this.WatchdogCnt" Destination="_base.WatchdogCnt" Vertices="(902,510),(730,570),"/>
			<Connection Source="this.ActErrorCode" Destination="_base.ActErrorCode" Vertices="(902,570),(730,630),"/>
			<Connection Source="this.LastErrorCode" Destination="_base.LastErrorCode" Vertices="(902,630),(730,690),"/>
			<Connection Source="this.ErrorCnt" Destination="_base.ErrorCnt" Vertices="(902,690),(730,750),"/>
			<Connection Source="this.ReadCnt" Destination="_base.ReadCnt" Vertices="(902,750),(730,810),"/>
			<Connection Source="this.ReadErrorCnt" Destination="_base.ReadErrorCnt" Vertices="(902,810),(730,870),"/>
			<Connection Source="this.WriteCnt" Destination="_base.WriteCnt" Vertices="(902,870),(730,930),"/>
			<Connection Source="this.WriteErrorCnt" Destination="_base.WriteErrorCnt" Vertices="(902,930),(730,990),"/>
			<Connection Source="this.CmdResetDiags" Destination="_base.CmdResetDiags" Vertices="(902,990),(730,1110),"/>
			<Connection Source="_base.ComObject" Destination="this.ComObject" Vertices="(218,210),(38,210),"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
#pragma using _ComDiagnosis

ComDiagnosis_MQTT : CLASS
: _ComDiagnosis
  //Servers:
	Unsubscribes 	: SvrCh_UDINT;
	UnsubscribeFails 	: SvrCh_UDINT;
	PubSubListEntries 	: SvrCh_UDINT;
	LogCount 	: SvrCh_UDINT;
	Publish_QOS0 	: SvrCh_UDINT;
	Publish_QOS1 	: SvrCh_UDINT;
	Publish_QOS2 	: SvrCh_UDINT;
	Subscribe_QOS0 	: SvrCh_UDINT;
	Subscribe_QOS1 	: SvrCh_UDINT;
	Subscribe_QOS2 	: SvrCh_UDINT;
	DataMapElements 	: SvrCh_UDINT;
	TXRate 	: SvrCh_UDINT;
	RXRate 	: SvrCh_UDINT;
	TotalRXBytes 	: SvrCh_UDINT;
	TotalTXBytes 	: SvrCh_UDINT;
  //Clients:
  //Variables:
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL Background
		VAR_INPUT
			EAX 	: UDINT;
		END_VAR
		VAR_OUTPUT
			state (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION GetValue
		VAR_INPUT
			dID 	: DINT;
		END_VAR
		VAR_OUTPUT
			udValue 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Unsubscribes::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL UnsubscribeFails::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL PubSubListEntries::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL LogCount::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Publish_QOS0::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Publish_QOS1::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Publish_QOS2::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Subscribe_QOS0::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Subscribe_QOS1::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Subscribe_QOS2::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL DataMapElements::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL TXRate::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL RXRate::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL TotalRXBytes::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL TotalTXBytes::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB ComDiagnosis_MQTT::@CT_
0$UINT,
2#0100000000000000$UINT, //TY_COMDIAGNOSIS_MQTT
1$UINT, 0$UINT, (SIZEOF(::ComDiagnosis_MQTT))$UINT, 
15$UINT, 0$UINT, 0$UINT, 
TO_UDINT(1778423797), "ComDiagnosis_MQTT", //Class
TO_UDINT(2493359491), "_ComDiagnosis", 1$UINT, 0$UINT, //Baseclass
//Servers:
(::ComDiagnosis_MQTT.Unsubscribes.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1763821356), "Unsubscribes", 
(::ComDiagnosis_MQTT.UnsubscribeFails.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3187413730), "UnsubscribeFails", 
(::ComDiagnosis_MQTT.PubSubListEntries.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1804412045), "PubSubListEntries", 
(::ComDiagnosis_MQTT.LogCount.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(262227520), "LogCount", 
(::ComDiagnosis_MQTT.Publish_QOS0.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(775007357), "Publish_QOS0", 
(::ComDiagnosis_MQTT.Publish_QOS1.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1496751339), "Publish_QOS1", 
(::ComDiagnosis_MQTT.Publish_QOS2.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3225406801), "Publish_QOS2", 
(::ComDiagnosis_MQTT.Subscribe_QOS0.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(905033384), "Subscribe_QOS0", 
(::ComDiagnosis_MQTT.Subscribe_QOS1.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1123452478), "Subscribe_QOS1", 
(::ComDiagnosis_MQTT.Subscribe_QOS2.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3690977156), "Subscribe_QOS2", 
(::ComDiagnosis_MQTT.DataMapElements.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3501887614), "DataMapElements", 
(::ComDiagnosis_MQTT.TXRate.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3867370201), "TXRate", 
(::ComDiagnosis_MQTT.RXRate.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(819626436), "RXRate", 
(::ComDiagnosis_MQTT.TotalRXBytes.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3527714950), "TotalRXBytes", 
(::ComDiagnosis_MQTT.TotalTXBytes.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2979306940), "TotalTXBytes", 
//Clients:
END_FUNCTION


#define USER_CNT_ComDiagnosis_MQTT 1

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_ComDiagnosis_MQTT] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION ComDiagnosis_MQTT::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
		nCmdSize	: UINT;
	END_VAR

	ret_code	:= _ComDiagnosis::@STD();
	IF ret_code <> C_OK THEN
		RETURN;
	END_IF;
	nCmdSize		:= _ComDiagnosis::ClassSvr.pMeth^.nCmds$UINT*SIZEOF(pVoid) + CMDMETH.Init;

	_memcpy((#vmt.CmdTable)$^USINT, _ComDiagnosis::ClassSvr.pMeth, nCmdSize);
	vmt.CmdTable.nCmds		:= nSTDCMD + USER_CNT_ComDiagnosis_MQTT;
#pragma warning (disable : 74)
	vmt.UserFcts[0]		:= #Background();

#pragma warning (default : 74)
	_ComDiagnosis::ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF _ComDiagnosis::ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Unsubscribes.pMeth			:= StoreMethod( #Unsubscribes::Read(), #M_NO_F() );
	IF Unsubscribes.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	UnsubscribeFails.pMeth			:= StoreMethod( #UnsubscribeFails::Read(), #M_NO_F() );
	IF UnsubscribeFails.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	PubSubListEntries.pMeth			:= StoreMethod( #PubSubListEntries::Read(), #M_NO_F() );
	IF PubSubListEntries.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	LogCount.pMeth			:= StoreMethod( #LogCount::Read(), #M_NO_F() );
	IF LogCount.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Publish_QOS0.pMeth			:= StoreMethod( #Publish_QOS0::Read(), #M_NO_F() );
	IF Publish_QOS0.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Publish_QOS1.pMeth			:= StoreMethod( #Publish_QOS1::Read(), #M_NO_F() );
	IF Publish_QOS1.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Publish_QOS2.pMeth			:= StoreMethod( #Publish_QOS2::Read(), #M_NO_F() );
	IF Publish_QOS2.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Subscribe_QOS0.pMeth			:= StoreMethod( #Subscribe_QOS0::Read(), #M_NO_F() );
	IF Subscribe_QOS0.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Subscribe_QOS1.pMeth			:= StoreMethod( #Subscribe_QOS1::Read(), #M_NO_F() );
	IF Subscribe_QOS1.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Subscribe_QOS2.pMeth			:= StoreMethod( #Subscribe_QOS2::Read(), #M_NO_F() );
	IF Subscribe_QOS2.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	DataMapElements.pMeth			:= StoreMethod( #DataMapElements::Read(), #M_NO_F() );
	IF DataMapElements.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	TXRate.pMeth			:= StoreMethod( #TXRate::Read(), #M_NO_F() );
	IF TXRate.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	RXRate.pMeth			:= StoreMethod( #RXRate::Read(), #M_NO_F() );
	IF RXRate.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	TotalRXBytes.pMeth			:= StoreMethod( #TotalRXBytes::Read(), #M_NO_F() );
	IF TotalRXBytes.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	TotalTXBytes.pMeth			:= StoreMethod( #TotalTXBytes::Read(), #M_NO_F() );
	IF TotalTXBytes.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION


FUNCTION VIRTUAL GLOBAL ComDiagnosis_MQTT::Unsubscribes::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR
  
  Unsubscribes := GetValue(dID:=COMDIAGMQTT_DIAGNOSTIC_NEWINST_GET_UNSUBSCRIBES);
  
	output := Unsubscribes;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL ComDiagnosis_MQTT::UnsubscribeFails::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR
  
  UnsubscribeFails := GetValue(dID:=COMDIAGMQTT_DIAGNOSTIC_NEWINST_GET_UNSUBFAILS);
  
	output := UnsubscribeFails;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL ComDiagnosis_MQTT::PubSubListEntries::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR
  
  PubSubListEntries := GetValue(dID:=COMDIAGMQTT_DIAGNOSTIC_NEWINST_GET_PUBSUBENTRIES);
  
	output := PubSubListEntries;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL ComDiagnosis_MQTT::LogCount::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR
  
  LogCount := GetValue(dID:=COMDIAGMQTT_DIAGNOSTIC_NEWINST_GET_LOGCOUNT);
  
	output := LogCount;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL ComDiagnosis_MQTT::Publish_QOS0::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR
  
  Publish_QOS0 := GetValue(dID:=COMDIAGMQTT_DIAGNOSTIC_NEWINST_GET_QOS0_PUB);
  
	output := Publish_QOS0;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL ComDiagnosis_MQTT::Publish_QOS1::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR
  
  Publish_QOS1 := GetValue(dID:=COMDIAGMQTT_DIAGNOSTIC_NEWINST_GET_QOS1_PUB);
  
	output := Publish_QOS1;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL ComDiagnosis_MQTT::Publish_QOS2::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR
  
  Publish_QOS2 := GetValue(dID:=COMDIAGMQTT_DIAGNOSTIC_NEWINST_GET_QOS2_PUB);
  
	output := Publish_QOS2;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL ComDiagnosis_MQTT::Subscribe_QOS0::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR
  
  Subscribe_QOS0 := GetValue(dID:=COMDIAGMQTT_DIAGNOSTIC_NEWINST_GET_QOS0_SUB);
  
	output := Subscribe_QOS0;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL ComDiagnosis_MQTT::Subscribe_QOS1::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR
  
  Subscribe_QOS1 := GetValue(dID:=COMDIAGMQTT_DIAGNOSTIC_NEWINST_GET_QOS1_SUB);
  
	output := Subscribe_QOS1;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL ComDiagnosis_MQTT::Subscribe_QOS2::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR
  
  Subscribe_QOS2 := GetValue(dID:=COMDIAGMQTT_DIAGNOSTIC_NEWINST_GET_QOS2_SUB);
  
	output := Subscribe_QOS2;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL ComDiagnosis_MQTT::DataMapElements::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR
  
  DataMapElements := GetValue(dID:=COMDIAGMQTT_DIAGNOSTIC_NEWINST_GET_DM_ELEMENTS);
  
	output := DataMapElements;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL ComDiagnosis_MQTT::TXRate::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR
  
  TXRate := GetValue(dID:=COMDIAGMQTT_DIAGNOSTIC_NEWINST_GET_TX_RATE);
  
	output := TXRate;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL ComDiagnosis_MQTT::RXRate::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR
  
  RXRate := GetValue(dID:=COMDIAGMQTT_DIAGNOSTIC_NEWINST_GET_RX_RATE);
  
	output := RXRate;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL ComDiagnosis_MQTT::TotalRXBytes::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR
  
  TotalRXBytes := GetValue(dID:=COMDIAGMQTT_DIAGNOSTIC_NEWINST_GET_RX_BYTES);
  
	output := TotalRXBytes;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL ComDiagnosis_MQTT::TotalTXBytes::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR
  
  TotalTXBytes := GetValue(dID:=COMDIAGMQTT_DIAGNOSTIC_NEWINST_GET_TX_BYTES);
  
	output := TotalTXBytes;

END_FUNCTION


FUNCTION ComDiagnosis_MQTT::GetValue
	VAR_INPUT
		dID 	: DINT;
	END_VAR
	VAR_OUTPUT
		udValue 	: UDINT;
	END_VAR
  VAR
  	NiGive : CmdStruct;
    NiGet : results;
  END_VAR

  NiGive.uiCmd    := COMDIAG_COMMAND;
  NiGive.aPara[0] := COMDIAG_MAJORID_COMDIAGNOSIS;
  NiGive.aPara[1] := dID;

  _memset(dest:=#NiGet, usByte:=0, cntr:=sizeof(NiGet));
  
  ComObject.NewInst(#NiGive, #NiGet);
  
  udValue := NiGet.aData[0]$UDINT;
  
END_FUNCTION


FUNCTION VIRTUAL GLOBAL ComDiagnosis_MQTT::Background
	VAR_INPUT
		EAX 	: UDINT;
	END_VAR
	VAR_OUTPUT
		state (EAX) 	: UDINT;
	END_VAR
  
  //Perform the base classes background method.
  _ComDiagnosis::Background(EAX);
  
  Unsubscribes.Read();
  UnsubscribeFails.Read();
  PubSubListEntries.Read();
  LogCount.Read();
  Publish_QOS0.Read();
  Publish_QOS1.Read();
  Publish_QOS2.Read();
  Subscribe_QOS0.Read();
  Subscribe_QOS1.Read();
  Subscribe_QOS2.Read();
  DataMapElements.Read();
  TXRate.Read();
  RXRate.Read();
  TotalRXBytes.Read();
  TotalTXBytes.Read();
  
	state := READY;

END_FUNCTION
