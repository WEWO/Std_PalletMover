//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "Wewo_LinkedListControlBase"
	Revision           = "0.11"
	GUID               = "{CBAF298A-B09E-4246-B3C4-75884D63FD50}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(810,420)"
	Comment            = "Base class for a linked list control class.&#13;&#10;&#13;&#10;Support methodes to manage a linked list">
	<Channels>
		<Server Name="o_NrOfObjectsInList" GUID="{9C9B350E-6417-485D-9F24-5F881DF1BF22}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Client Name="p_FirstObject" Required="false" Internal="false" Comment="First object in linked list"/>
	</Channels>
	<RevDoku>
		<Owner Company="Safan BV" Author="HenOdi"/>
		<Dokumentation Revision="0.11" Date="2013-03-27" Author="HenOdi" Company="Safan BV" Description="Add a global methode to install a linked list"/>
		<Dokumentation Revision="0.10" Date="2012-03-14" Author="HenOdi" Company="Safan BV" Description="- Add methode CheckObjectAvailableInList()&#13;&#10;- Clear previous and next pointers when remove an object from list&#13;&#10;- RemoveObject()   Do&apos;nt use id but us object pointer to search object in tree.&#13;&#10;&#13;&#10;"/>
		<Dokumentation Revision="0.9" Date="2011-11-22" Author="NieTie" Company="Safan BV" Description="Class is based on SFN_LinkedListlBase class which is removed now.&#13;&#10;&#13;&#10;Split up Linked List functionality into&#13;&#10;- Linked List Control base&#13;&#10;- Linked List object base&#13;&#10;&#13;&#10;Add methodes for control functionality&#13;&#10;Remove LinkedObject functionality&#13;&#10;&#13;&#10;"/>
	</RevDoku>
	<Network Name="Wewo_LinkedListControlBase">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "_base"
				GUID       = "{EB3774D0-83BE-44F1-9080-5D7A9A61B517}"
				Class      = "WewoBase"
				Position   = "(218,120)"
				Visualized = "false">
				<Channels>
					<Server Name="m_Id"/>
					<Server Name="m_p_Name"/>
					<Server Name="o_ErrorWarningStatus"/>
					<Server Name="ObjectStatus"/>
					<Server Name="ToObject"/>
					<Client Name="c_Group"/>
					<Client Name="op_LogData"/>
					<Client Name="toOsLibTaskObjControl"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
			<Comment Position="(870,120)" Size="(210,60)" Text="&#13;&#10;"/>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.ToObject" Destination="_base.ToObject" Vertices="(1236,210),(684,210),"/>
			<Connection Source="this.ObjectStatus" Destination="_base.ObjectStatus" Vertices="(1236,270),(684,270),"/>
			<Connection Source="this.o_ErrorWarningStatus" Destination="_base.o_ErrorWarningStatus" Vertices="(1236,330),(684,330),"/>
			<Connection Source="this.m_Id" Destination="_base.m_Id" Vertices="(1236,390),(684,390),"/>
			<Connection Source="this.m_p_Name" Destination="_base.m_p_Name" Vertices="(1236,450),(684,450),"/>
			<Connection Source="_base.op_LogData" Destination="this.op_LogData" Vertices="(218,210),(38,210),"/>
			<Connection Source="_base.c_Group" Destination="this.c_Group" Vertices="(218,270),(38,270),"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
#pragma using WewoBase

Wewo_LinkedListControlBase : CLASS
: WewoBase
  //Servers:
	o_NrOfObjectsInList 	: SvrCh_UDINT;
  //Clients:
	p_FirstObject 	: CltChCmd_Wewo_LinkedObjectBase;
  //Variables:
		p_LastObject 	: pVoid;			//! <Variable Comment="Last object in linked list" Name="p_LastObject"/>
		initFinished 	: BOOL;			//! <Variable Comment="Indicates linkedlist control has been started up en is available to use." Name="initFinished"/>
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL Init;
	
	FUNCTION Wewo_LinkedListControlBase
		VAR_OUTPUT
			ret_code 	: ConfStates;
		END_VAR;
				//! <Function Comment="Add object in linked list after the selected object." Name="AddAfterObject"/>
	FUNCTION GLOBAL AddAfterObject
		VAR_INPUT
			Id 	: UDINT;			//! <Variable Comment="Object Id where to put the added object" Name="AddAfterObject.Id"/>
			p_Object 	: pVoid;			//! <Variable Comment="Pointer to added object" Name="AddAfterObject.p_Object"/>
		END_VAR;
				//! <Function Comment="Add object in linked list just before object &#13;&#10;                selected by object Id.&#13;&#10;" Name="AddBeforeObject"/>
	FUNCTION GLOBAL AddBeforeObject
		VAR_INPUT
			Id 	: UDINT;			//! <Variable Comment="Object Id where to put the added object" Name="AddBeforeObject.Id"/>
			p_Object 	: pVoid;			//! <Variable Comment="Pointer to added object" Name="AddBeforeObject.p_Object"/>
		END_VAR;
				//! <Function Comment="Add object in linked list.&#13;&#10;Object is first object in list" Name="AddFirstObject"/>
	FUNCTION GLOBAL AddFirstObject
		VAR_INPUT
			p_Object 	: pVoid;			//! <Variable Comment="Pointer to added object" Name="AddFirstObject.p_Object"/>
		END_VAR;
				//! <Function Comment="Add object in linked list.&#13;&#10;Object is last object in list" Name="AddLastObject"/>
	FUNCTION GLOBAL AddLastObject
		VAR_INPUT
			p_Object 	: pVoid;			//! <Variable Comment="Pointer to added object" Name="AddLastObject.p_Object"/>
		END_VAR;
	
	FUNCTION GLOBAL CheckObjectAvailableInList
		VAR_INPUT
			p_CheckObject 	: pVoid;
		END_VAR
		VAR_OUTPUT
			checkResult 	: BOOL;
		END_VAR;
				//! <Function Comment="Get first object in linked list." Name="GetFirstObject"/>
	FUNCTION GLOBAL GetFirstObject
		VAR_OUTPUT
			p_Object 	: pVoid;
		END_VAR;
				//! <Function Comment="Get last object in linked list.&#13;&#10;" Name="GetLastObject"/>
	FUNCTION GLOBAL GetLastObject
		VAR_OUTPUT
			p_Object 	: pVoid;
		END_VAR;
				//! <Function Comment="Executes the sync tasks of the objects &#13;&#10;in the the linked list." Name="HandleSyncTaskSequence"/>
	FUNCTION GLOBAL HandleSyncTaskSequence
		VAR_INPUT
			p_SyncTaskData 	: pVoid;
		END_VAR
		VAR_OUTPUT
			state 	: BOOL;
		END_VAR;
				//! <Function Comment="Install a linked list" Name="ListInstall"/>
	FUNCTION GLOBAL ListInstall
		VAR_INPUT
			p_FirstLinkedListObject 	: pVoid;
		END_VAR;
				//! <Function Comment="Remove object from linked list." Name="RemoveObject"/>
	FUNCTION GLOBAL RemoveObject
		VAR_INPUT
			p_Object 	: pVoid;			//! <Variable Comment="pointer to object to remove from linked list" Name="RemoveObject.p_Object"/>
		END_VAR;
				//! <Function Comment="Remove object from linked list selected by Id." Name="RemoveObjectById"/>
	FUNCTION GLOBAL RemoveObjectById
		VAR_INPUT
			Id 	: UDINT;			//! <Variable Comment="Object Id to identify object to remove from linked list." Name="RemoveObjectById.Id"/>
		END_VAR
		VAR_OUTPUT
			p_ReturnObject 	: pVoid;			//! <Variable Comment="Pointer to removed object." Name="RemoveObjectById.p_ReturnObject"/>
		END_VAR;
				//! <Function Comment="Searches an object in linked list via Next pointer.&#13;&#10;                Objects should have an Id filled in m_id." Name="SearchNextTree"/>
	FUNCTION GLOBAL SearchNextTree
		VAR_INPUT
			ObjectId 	: UDINT;
		END_VAR
		VAR_OUTPUT
			p_Object 	: pVoid;
		END_VAR;
				//! <Function Comment="Searches an object in linked list via Previous pointer.&#13;&#10;                Objects should have an Id filled in m_id." Name="SearchPreviousTree"/>
	FUNCTION GLOBAL SearchPreviousTree
		VAR_INPUT
			ObjectId 	: UDINT;
		END_VAR
		VAR_OUTPUT
			p_Object 	: pVoid;
		END_VAR;
				//! <Function Comment="Check if linkedList control has been started.&#13;&#10;&#13;&#10;This methode can be used during &#13;&#10;init() to check if it can be used.&#13;&#10;" Name="IsInitLinkedListFinished"/>
	FUNCTION GLOBAL IsInitLinkedListFinished
		VAR_OUTPUT
			isFinished 	: BOOL;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma usingLtd Wewo_LinkedObjectBase


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB Wewo_LinkedListControlBase::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_WEWO_LINKEDLISTCONTROLBASE
0$UINT, 11$UINT, (SIZEOF(::Wewo_LinkedListControlBase))$UINT, 
1$UINT, 1$UINT, 0$UINT, 
TO_UDINT(2533728641), "Wewo_LinkedListControlBase", //Class
TO_UDINT(817841270), "WewoBase", 0$UINT, 29$UINT, //Baseclass
//Servers:
(::Wewo_LinkedListControlBase.o_NrOfObjectsInList.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1884285389), "o_NrOfObjectsInList", 
//Clients:
(::Wewo_LinkedListControlBase.p_FirstObject.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000000$UINT, TO_UDINT(2906904304), "p_FirstObject", TO_UDINT(3571739257), "Wewo_LinkedObjectBase", 0$UINT, 10$UINT, 
END_FUNCTION


#define USER_CNT_Wewo_LinkedListControlBase 12

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_Wewo_LinkedListControlBase] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION Wewo_LinkedListControlBase::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
		nCmdSize	: UINT;
	END_VAR

	ret_code	:= WewoBase::@STD();
	IF ret_code <> C_OK THEN
		RETURN;
	END_IF;
	nCmdSize		:= WewoBase::ToObject.pMeth^.nCmds$UINT*SIZEOF(pVoid) + CMDMETH.Init;

	_memcpy((#vmt.CmdTable)$^USINT, WewoBase::ToObject.pMeth, nCmdSize);
	vmt.CmdTable.nCmds		:= nSTDCMD + USER_CNT_Wewo_LinkedListControlBase;
	vmt.CmdTable.Init		:= #Init();
	WewoBase::ToObject.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF WewoBase::ToObject.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	ret_code	:= Wewo_LinkedListControlBase();

END_FUNCTION

//{{LSL_IMPLEMENTATION
FUNCTION Wewo_LinkedListControlBase::Wewo_LinkedListControlBase
	VAR_OUTPUT
		ret_code 	: ConfStates;
	END_VAR

  initFinished := FALSE;
  
	ret_code     := C_OK;

END_FUNCTION

FUNCTION VIRTUAL GLOBAL Wewo_LinkedListControlBase::Init
VAR
	p_Object : pVoid;
  p_NextObj: pVoid;
END_VAR

  WewoBase::Init();
  if (initCnt = 3) then
    p_FirstObject   := p_FirstObject.Read();
    p_LastObject    := NIL;
    p_Object        := p_FirstObject;
    
    o_NrOfObjectsInList := 0;
    while (p_object <> NIL) do 
      p_NextObj := p_object^$Wewo_LinkedObjectBase.GetNextObjectPtr();
      
      if (p_NextObj = NIL) then
        p_LastObject := p_Object;
        
      end_if;

      p_Object := p_NextObj;
      
      o_NrOfObjectsInList += 1;
    end_while;
    
    initFinished := TRUE;
  end_if;

END_FUNCTION



(***************************************************************
Wewo_LinkedListControlBase::SearchNextTree

Description:    Searches an object in linked list via Next pointer.
                Objects should have an Id filled in m_id.
              
Parameter:      Object Id.
                   
Return:         pointer to object if found
                NIL if not found
***************************************************************)

FUNCTION GLOBAL Wewo_LinkedListControlBase::SearchNextTree
	VAR_INPUT
		ObjectId 	: UDINT;
	END_VAR
	VAR_OUTPUT
		p_Object 	: pVoid;
	END_VAR
  VAR
  	Id : UDINT;
  END_VAR
    
  p_Object := p_FirstObject;
  
  while (p_Object <> NIL) do
  
    Id := p_Object^$Wewo_LinkedObjectBase.m_Id.Read();
    
    if (ObjectId = Id) then
      exit;
      
    end_if;
    
    p_Object := p_object^$Wewo_LinkedObjectBase.GetNextObjectPtr();

  end_while;

END_FUNCTION


(***************************************************************
Wewo_LinkedListControlBase::SearchPreviousTree

Description:    Searches an object in linked list via Previous pointer.
                Objects should have an Id filled in m_id.
              
Parameter:      Object Id.
                   
Return:         pointer to object if found
                NIL if not found
***************************************************************)
FUNCTION GLOBAL Wewo_LinkedListControlBase::SearchPreviousTree
	VAR_INPUT
		ObjectId 	: UDINT;
	END_VAR
	VAR_OUTPUT
		p_Object 	: pVoid;
	END_VAR
  VAR
  	Id  : UDINT;
  END_VAR

  p_Object := p_LastObject;
  
  while (p_Object <> NIL) do
    
    Id := p_Object^$Wewo_LinkedObjectBase.m_Id.Read();
    
    if (ObjectId = Id) then
      exit;
      
    end_if;

    p_Object := p_Object^$Wewo_LinkedObjectBase.GetPreviousObjectPtr();
    
  end_while;

END_FUNCTION


(***************************************************************
Wewo_LinkedListControlBase::CheckObjectAvailableInList

Description:    Check if object is available in linked list 
              
Parameter:      Pointer to object 

Return:         TRUE if object found in list 
                FALSE if object not found in list
***************************************************************)
FUNCTION GLOBAL Wewo_LinkedListControlBase::CheckObjectAvailableInList
	VAR_INPUT
		p_CheckObject 	: pVoid;
	END_VAR
	VAR_OUTPUT
		checkResult 	: BOOL;
	END_VAR
  
  VAR
		p_Object 	: pVoid;
  END_VAR
  
  checkResult := FALSE;                     // Default return not found.
  
  if p_CheckObject <> NIL then
    // A valid search object found.
    p_Object    := p_FirstObject;
    
    while (p_Object <> NIL) do
      // Next object in linked list
      if (p_CheckObject = p_Object ) then
        // Object found in list, Exit loop
        checkResult := TRUE;
        exit;
        
      end_if;
      
      p_Object := p_object^$Wewo_LinkedObjectBase.GetNextObjectPtr();

    end_while;
    
  end_if;

END_FUNCTION


(***************************************************************
Wewo_LinkedListControlBase::AddLastObject

Description:    Add object in linked list.
                Added Object is last object in list
              
Parameter:      pointer to added object .
                   
Return:         -

***************************************************************)
FUNCTION GLOBAL Wewo_LinkedListControlBase::AddLastObject
	VAR_INPUT
		p_Object 	: pVoid;
	END_VAR
  
  if (p_Object <> NIL) then
    if p_FirstObject = NIL then
      // Added object is first object in list
      p_FirstObject := p_Object;
      p_LastObject  := p_Object;
      p_Object^$Wewo_LinkedObjectBase.SetPreviousObjectPtr(p_Object:=NIL);
      p_Object^$Wewo_LinkedObjectBase.SetNextObjectPtr(p_Object:=NIL);
      
    else
      if (p_LastObject <> NIL) then
        p_LastObject^$Wewo_LinkedObjectBase.SetNextObjectPtr(p_Object:=p_Object);
        p_Object^$Wewo_LinkedObjectBase.SetPreviousObjectPtr(p_Object:=p_LastObject);
        p_Object^$Wewo_LinkedObjectBase.SetNextObjectPtr(p_Object:=NIL);
        p_LastObject := p_Object;
        
      else
        // Should never occure!!!
        WriteActiveErrorWarning(IntErrorWarningId:=MSGID_NIL_POINTER, LogLevel:=LL_ERROR_CRITICAL, p_msg:="AddLastObject: Failed due to internal NIL pointer error");
        
      end_if;
      
    end_if;
    
    o_NrOfObjectsInList += 1;
    
  else
    WriteActiveErrorWarning(IntErrorWarningId:=MSGID_NIL_POINTER, LogLevel:=LL_WARNING, p_msg:="AddLastObject: Failed because of parameter NIL");
    
  end_if;
  
END_FUNCTION


(***************************************************************
Wewo_LinkedListControlBase::AddFirstObject

Description:    Add object in linked list.
                Added Object is first object in list
              
Parameter:      pointer to added object .
                   
Return:         -

***************************************************************)
FUNCTION GLOBAL Wewo_LinkedListControlBase::AddFirstObject
	VAR_INPUT
		p_Object 	: pVoid;
	END_VAR
  
  if (p_Object <> NIL) then
  
    if (p_FirstObject = NIL) then
      // Added object is first object in list
      p_FirstObject := p_Object;
      p_LastObject  := p_Object;
      p_Object^$Wewo_LinkedObjectBase.SetPreviousObjectPtr(p_Object:=NIL);
      p_Object^$Wewo_LinkedObjectBase.SetNextObjectPtr(p_Object:=NIL);
      
    else
      p_FirstObject^$Wewo_LinkedObjectBase.SetPreviousObjectPtr(p_Object:=p_Object);
      p_Object^$Wewo_LinkedObjectBase.SetNextObjectPtr(p_Object:=p_FirstObject);
      p_FirstObject := p_Object;
      
    end_if;
    
    o_NrOfObjectsInList += 1;
  else
    WriteActiveErrorWarning(IntErrorWarningId:=MSGID_NIL_POINTER, LogLevel:=LL_WARNING, p_msg:="AddFirstObject: Failed because of parameter NIL");
    
  end_if;
END_FUNCTION


(***************************************************************
Wewo_LinkedListControlBase::RemoveObject

Description:    Remove object from linked list.
              
Parameter:      pointer to object to remove from linked list.
                   
Return:         -

***************************************************************)
FUNCTION GLOBAL Wewo_LinkedListControlBase::RemoveObject
	VAR_INPUT
		p_Object 	: pVoid;
	END_VAR
  
  VAR
  	p_FindObject     : pvoid;
    p_NextObject     : pVoid;
    p_PreviousObject : pVoid;
  END_VAR


  if (p_Object <> NIL) then
    // Valid parameter
    
    // First check if object is found in list.
    p_FindObject  := p_Object;
    p_Object      := p_FirstObject;
    
    while (p_Object <> NIL) do
      // Objects in LinkedList
      
      if (p_FindObject = p_Object) then
        // Object found in list, return Object address
        exit;  
        
      end_if;
      
      p_Object := p_Object^$Wewo_LinkedObjectBase.GetNextObjectPtr();
      
    end_while;

    // Start remove object from list
    p_FindObject := p_Object;
    
    if (p_FindObject <> NIL) then
      if ( (p_FirstObject = p_Object) L_AND (p_LastObject = p_FirstObject) ) then
        // Object is the only object in list
        p_FirstObject := NIL;
        p_LastObject  := NIL;
//        p_Object^$Wewo_LinkedObjectBase.SetNextObjectPtr(p_Object:=NIL);
//        p_Object^$Wewo_LinkedObjectBase.SetPreviousObjectPtr(p_Object:=NIL);
      
      elsif (p_FirstObject = p_Object) then
        // Object is first object in list
        p_NextObject  := p_Object^$Wewo_LinkedObjectBase.GetNextObjectPtr();
        p_FirstObject := p_NextObject;
        p_NextObject^$Wewo_LinkedObjectBase.SetPreviousObjectPtr(p_Object:=NIL);
//        p_Object^$Wewo_LinkedObjectBase.SetNextObjectPtr(p_Object:=NIL);      
      
      elsif (p_LastObject = p_Object) then
        // Object is last object in list
        p_PreviousObject := p_Object^$Wewo_LinkedObjectBase.GetPreviousObjectPtr();
        p_LastObject     := p_PreviousObject;
        p_PreviousObject^$Wewo_LinkedObjectBase.SetNextObjectPtr(p_Object:=NIL);
//        p_Object^$Wewo_LinkedObjectBase.SetPreviousObjectPtr(p_Object:=NIL);
      
      else
        // Object is in list between the first and last object
        p_NextObject     := p_Object^$Wewo_LinkedObjectBase.GetNextObjectPtr();
        p_PreviousObject := p_Object^$Wewo_LinkedObjectBase.GetPreviousObjectPtr();
        
        p_PreviousObject^$Wewo_LinkedObjectBase.SetNextObjectPtr(p_Object:=p_NextObject);
        p_NextObject^$Wewo_LinkedObjectBase.SetPreviousObjectPtr(p_Object:=p_PreviousObject);
        
//        p_Object^$Wewo_LinkedObjectBase.SetNextObjectPtr(p_Object:=NIL);
//        p_Object^$Wewo_LinkedObjectBase.SetPreviousObjectPtr(p_Object:=NIL);    
      end_if;

      // Clear link pointers of removed object
      p_Object^$Wewo_LinkedObjectBase.SetNextObjectPtr(p_Object:=NIL);
      p_Object^$Wewo_LinkedObjectBase.SetPreviousObjectPtr(p_Object:=NIL);    
      
      o_NrOfObjectsInList -= 1;
      
    else
      WriteActiveErrorWarning(IntErrorWarningId:=MSGID_UNKNOWN_OBJECT, LogLevel:=LL_WARNING, p_msg:="RemoveObject: Object not found in linked list");
      
    end_if;
    
  else  
    WriteActiveErrorWarning(IntErrorWarningId:=MSGID_NIL_POINTER, LogLevel:=LL_WARNING, p_msg:="RemoveObject: Failed because of parameter NIL");

  end_if;

END_FUNCTION


(***************************************************************
Wewo_LinkedListControlBase::RemoveObjectById

Description:    Remove object from linked list selected by Id.
              
Parameter:      Object Id to identify object to remove from linked list.
                   
Return:         Pointer to removed object.

***************************************************************)
FUNCTION GLOBAL Wewo_LinkedListControlBase::RemoveObjectById
	VAR_INPUT
		Id 	: UDINT;
	END_VAR
	VAR_OUTPUT
		p_ReturnObject 	: pVoid;
	END_VAR
  VAR
  	p_Object : pVoid;
  END_VAR

  p_Object := SearchNextTree(ObjectId:=Id);
  
  if (p_Object <> NIL) then
    RemoveObject(p_Object:=p_Object);
    
  else
    WriteActiveErrorWarning(IntErrorWarningId:=MSGID_UNKNOWN_OBJECT, LogLevel:=LL_WARNING, p_msg:="RemoveObjectById:Object not found in linked list");
    
  end_if;

  p_ReturnObject := p_Object;

END_FUNCTION




(***************************************************************
Wewo_LinkedListControlBase::AddAfterObject

Description:    Add object in linked list just after object 
                selected by object Id.
              
Parameter:      Object Id where to put the added object 
                Pointer to added object .
                   
Return:         -

***************************************************************)

FUNCTION GLOBAL Wewo_LinkedListControlBase::AddAfterObject
	VAR_INPUT
		Id 	: UDINT;
		p_Object 	: pVoid;
	END_VAR
  VAR
  	p_SearchObject : pVoid;
    p_NextObject : pVoid;
  END_VAR
  
  
  if (p_Object <> NIL) then
    // Valid parameter
    p_SearchObject := SearchNextTree(ObjectId:=Id);
    
    if (p_SearchObject <> NIL) then
    
      p_NextObject := p_SearchObject^$Wewo_LinkedObjectBase.GetNextObjectPtr();
      
      if (p_NextObject <> NIL) then
          p_NextObject^$Wewo_LinkedObjectBase.SetPreviousObjectPtr(p_Object:=p_Object);
          
      else
        p_LastObject := p_Object;
        
      end_if;
      
      p_SearchObject^$Wewo_LinkedObjectBase.SetNextObjectPtr(p_Object:=p_Object);
      p_Object^$Wewo_LinkedObjectBase.SetNextObjectPtr(p_Object:=p_NextObject);
      p_Object^$Wewo_LinkedObjectBase.SetPreviousObjectPtr(p_Object:=p_SearchObject);
      
    else
      WriteActiveErrorWarning(IntErrorWarningId:=MSGID_UNKNOWN_OBJECT, LogLevel:=LL_WARNING, p_msg:="AddAfterObject: Cannot find object in list. Object will be added on the last place of the list.");
      AddLastObject(p_Object:=p_Object);
      
    end_if;
    
    o_NrOfObjectsInList += 1;
  
  else
    WriteActiveErrorWarning(IntErrorWarningId:=MSGID_NIL_POINTER, LogLevel:=LL_WARNING, p_msg:="AddAfterObject: Failed because of parameter NIL");
  
  end_if;


END_FUNCTION


(***************************************************************
Wewo_LinkedListControlBase::AddBeforeObject

Description:    Add object in linked list just before object 
                selected by object Id.
              
Parameter:      Object Id where to put the added object 
                Pointer to added object .
                   
Return:         -

***************************************************************)
FUNCTION GLOBAL Wewo_LinkedListControlBase::AddBeforeObject
	VAR_INPUT
		Id 	: UDINT;
		p_Object 	: pVoid;
	END_VAR
  VAR
  	p_SearchObject : pVoid;
    p_PreviousObject : pVoid;
  END_VAR
  
  if (p_Object <> NIL) then
    // Valid parameter
    p_SearchObject := SearchNextTree(ObjectId:=Id);
    
    if (p_SearchObject <> NIL) then
      p_PreviousObject := p_SearchObject^$Wewo_LinkedObjectBase.GetPreviousObjectPtr();
      if (p_PreviousObject <> NIL) then
        p_PreviousObject^$Wewo_LinkedObjectBase.SetNextObjectPtr(p_Object:=p_Object);
        
      else
        p_FirstObject := p_Object;
        
      end_if;
      
      p_SearchObject^$Wewo_LinkedObjectBase.SetPreviousObjectPtr(p_Object:=p_Object);
      p_Object^$Wewo_LinkedObjectBase.SetNextObjectPtr(p_Object:=p_SearchObject);
      p_Object^$Wewo_LinkedObjectBase.SetPreviousObjectPtr(p_Object:=p_PreviousObject);

    
    else
      WriteActiveErrorWarning(IntErrorWarningId:=MSGID_UNKNOWN_OBJECT, LogLevel:=LL_WARNING, p_msg:="AddBeforeObject: Cannot find object in list. Object will be added on the last place of the list.");
      AddLastObject(p_Object:=p_Object);
      
    end_if;
    
    o_NrOfObjectsInList += 1;
  
  else
    WriteActiveErrorWarning(IntErrorWarningId:=MSGID_NIL_POINTER, LogLevel:=LL_WARNING, p_msg:="AddBeforeObject: Failed because of parameter NIL");
  
  end_if;

END_FUNCTION


(***************************************************************
Wewo_LinkedListControlBase::GetFirstObject

Description:    Get first object in linked list.
              
Parameter:      -

Return:         pointer to first object in linked list

***************************************************************)
FUNCTION GLOBAL Wewo_LinkedListControlBase::GetFirstObject
	VAR_OUTPUT
		p_Object 	: pVoid;
	END_VAR

  p_Object := p_FirstObject;
  
END_FUNCTION


(***************************************************************
Wewo_LinkedListControlBase::GetLastObject

Description:    Get last object in linked list.
              
Parameter:      -

Return:         pointer to last object in linked list

***************************************************************)
FUNCTION GLOBAL Wewo_LinkedListControlBase::GetLastObject
	VAR_OUTPUT
		p_Object 	: pVoid;
	END_VAR

  p_Object := p_LastObject;
END_FUNCTION


(***************************************************************
Wewo_LinkedListControlBase::HandleSyncTaskSequence

Description:    Executes the sync tasks of the objects 
                in the the linked list.
              
Parameter:      Pointer to sync task data to handover data if required

Return:         state 
                TRUE if no passed succesfull
                FALSE if error  
***************************************************************)
FUNCTION GLOBAL Wewo_LinkedListControlBase::HandleSyncTaskSequence
	VAR_INPUT
		p_SyncTaskData 	: pVoid;
	END_VAR
	VAR_OUTPUT
		state 	: BOOL;
	END_VAR
	
  VAR
    p_Object : ^Wewo_LinkedObjectBase;
  END_VAR

  // Handle all sync tasks of connected objects.
  state    := TRUE;
  // Start with the first one in list.
  p_Object := p_FirstObject $^Wewo_LinkedObjectBase;
  while (p_Object <> NIL) do
    // Next object available in driver chain .
    
    // Handle SyncTask of object
    state := (     state 
             L_AND p_Object^.SyncTask(p_SyncTaskData:=p_SyncTaskData)
             );
    
    // Get next object in linked list  
    p_Object := (p_Object^.GetNextObjectPtr())$^Wewo_LinkedObjectBase;
    
  end_while;

END_FUNCTION


FUNCTION GLOBAL Wewo_LinkedListControlBase::ListInstall
	VAR_INPUT
		p_FirstLinkedListObject 	: pVoid;
	END_VAR

  p_FirstObject := p_FirstLinkedListObject;
END_FUNCTION


FUNCTION GLOBAL Wewo_LinkedListControlBase::IsInitLinkedListFinished
	VAR_OUTPUT
		isFinished 	: BOOL;
	END_VAR

  isFinished := initFinished;
END_FUNCTION


