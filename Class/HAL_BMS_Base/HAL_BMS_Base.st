//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)

//{{LSL_DEFINES
#define COMM_TIMEOUT              1000    // ms before timeout
#define TIMEOUTDELAY              15000    // Delay before checking for a communication timeout.
//}}LSL_DEFINES

//{{LSL_DECLARATION

(*!
<Class
	Name               = "HAL_BMS_Base"
	Revision           = "0.0"
	GUID               = "{816AED84-D8CA-4112-B22C-A9796F995DE5}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(284,120)">
	<Channels>
		<Server Name="ClassSvr" GUID="{91E69287-5635-464A-AA6B-B7AC76209D79}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
	</Channels>
</Class>
*)
HAL_BMS_Base : CLASS
	TYPE
	  tBMSAlarms : BDINT  //! <Type Public="true" Name="tBMSAlarms"/>
	  [
	    1 ba_OverVoltage,
	    2 ba_UnderVoltage,
	    3 ba_AlmostUnderVoltage,
	    4 ba_BatteryEmpty,
	    5 ba_BatteryAlmostEmpty,
	    6 ba_InternalDefect,
	    7 ba_NoCommunication,
	    8 Bit8,
	    9 Bit9,
	    10 Bit10,
	    11 Bit11,
	    12 Bit12,
	    13 Bit13,
	    14 Bit14,
	    15 Bit15,
	    16 Bit16,
	    17 Bit17,
	    18 Bit18,
	    19 Bit19,
	    20 Bit20,
	    21 Bit21,
	    22 Bit22,
	    23 Bit23,
	    24 Bit24,
	    25 Bit25,
	    26 Bit26,
	    27 Bit27,
	    28 Bit28,
	    29 Bit29,
	    30 Bit30,
	    31 Bit31,
	    32 Bit32,
	  ];
#pragma pack(push, 1)
	  tBMSData : STRUCT  //! <Type Public="true" Name="tBMSData"/>
	    bd_StateOfCharge : UINT;
	    bd_TimeToGo : UINT;
	    bd_EnergyDraw : INT;
	    bd_BatteryVoltage : UINT;
	    bd_BatteryCurrent : INT;
	    bd_BatteryTemperature : INT;
	    bd_BatteryCharging : BOOL;
	    bd_BatteryLowIndication : BOOL;
	    bd_Alarm : tBMSAlarms;
	  END_STRUCT;
#pragma pack(pop)
	END_TYPE
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
  //Clients:
  //Variables:
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL GetBMSData
		VAR_OUTPUT
			returnValue 	: tBMSData;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB HAL_BMS_Base::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_HAL_BMS_BASE
0$UINT, 0$UINT, (SIZEOF(::HAL_BMS_Base))$UINT, 
1$UINT, 0$UINT, 0$UINT, 
TO_UDINT(3662255972), "HAL_BMS_Base", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::HAL_BMS_Base.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
//Clients:
END_FUNCTION


#define USER_CNT_HAL_BMS_Base 1

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_HAL_BMS_Base] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION HAL_BMS_Base::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_HAL_BMS_Base, pCmd := #vmt.CmdTable);
#pragma warning (disable : 74)
	vmt.UserFcts[0]		:= #GetBMSData();

#pragma warning (default : 74)
	ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION


FUNCTION VIRTUAL GLOBAL HAL_BMS_Base::GetBMSData
  #pragma warning(disable: 73);
  #pragma warning(disable: 76);
	VAR_OUTPUT
		returnValue 	: tBMSData;
	END_VAR
  #pragma warning(default: 73);
  #pragma warning(default: 76);
END_FUNCTION
