//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)

//{{LSL_DEFINES
#define MES_CYWORK_DELAY 5 SEC
#define BITSPERBYTE 8
#define BYTESPERBDINT 4
#define AGVSTRING "agvs/"
#define STATUSSTRING "/status"
#define SAFETYSTRING "/safety"
#define LIFTSTRING "/lift"
#define PRODUCTIONSTATESETSTRING "/productionState/set"
#define HMIMESSAGESTRING "/hmiMessage"
#define EMPTYSTRING ""
#define PRODUCTIONSTATESTRING "/productionState"
#define SETLIFTSTRING "/lift/set"
#define PRODUCTIONSTATESTRING "/productionState"
#define SETHMIMESSAGESTRING "/hmiMessage/set"
#define MESSTATUSTRING "mes/status"
#define ALARMSTRING "/alarm"
//}}LSL_DEFINES

//{{LSL_DECLARATION

(*!
<Class
	Name               = "MES_MQTT_Handler"
	Revision           = "0.0"
	GUID               = "{A44164CD-AF60-45DD-94AB-A40C85322D92}"
	RealtimeTask       = "false"
	CyclicTask         = "true"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(698,120)">
	<Channels>
		<Server Name="ClassSvr" GUID="{DFF6027F-3098-44C1-B014-507419B8439E}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="CntPublishHMI" GUID="{718E012E-5651-4477-88EE-94FE331255FE}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="CntPublishLift" GUID="{5241C35A-0495-4471-A9E3-8EDB925D122C}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="CntPublishProduction" GUID="{3EF15940-298A-4A02-B38B-4AF963175BE2}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="CntPublishSafety" GUID="{94B78284-566E-4630-9C85-9A7086D03F84}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="CntPublishStatus" GUID="{2F7F38E6-475C-4006-8DCD-7CF2E1C6D52B}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="CntSubscribeAlarm" GUID="{6706A0D3-E2B9-4A08-BDEE-531408BEBCAE}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="CntSubscribeHMI" GUID="{61A114E9-0A64-412D-8F69-193D343EF5DA}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="CntSubscribeLift" GUID="{45C1AD41-7156-4C1F-AB9A-625DFBF7D8F2}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="CntSubscribeMES" GUID="{529CD7EF-E3AA-4727-9967-7B4A935D57C2}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="CntSubscribeProduction" GUID="{92DDEB11-FB82-4BBE-A449-45AE5D32946B}" Visualized="true" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="Connected" GUID="{53FB9AA6-B84D-4437-A673-61E821E2CC2E}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Client Name="_JSONReader" Required="true" Internal="true"/>
		<Client Name="_JSONWriter" Required="true" Internal="true"/>
		<Client Name="agvID" Required="false" Internal="false"/>
		<Client Name="ASCII_BIN" Required="true" Internal="true"/>
		<Client Name="objHMIHandler" Required="true" Internal="false"/>
		<Client Name="objMQTTClient_Interface" Required="true" Internal="false" Comment="Object channel to the class MQTTClient_Interface"/>
		<Client Name="objRiwoEventLogger" Required="false" Internal="false"/>
		<Client Name="objSigclib" Required="false" Internal="false"/>
		<Client Name="objStateControl" Required="true" Internal="false"/>
		<Client Name="PublishHMI" Required="true" Internal="true"/>
		<Client Name="PublishLift" Required="true" Internal="true"/>
		<Client Name="PublishProduction" Required="true" Internal="true"/>
		<Client Name="PublishSafety" Required="true" Internal="true"/>
		<Client Name="PublishState" Required="true" Internal="true"/>
		<Client Name="SubscribeAlarm" Required="true" Internal="true"/>
		<Client Name="SubscribeHMIMessage" Required="true" Internal="true"/>
		<Client Name="SubscribeLiftTarget" Required="true" Internal="true"/>
		<Client Name="SubscribeMESOnline" Required="true" Internal="true"/>
		<Client Name="SubscribeProduction" Required="true" Internal="true"/>
		<Client Name="WillTopic" Required="true" Internal="false"/>
	</Channels>
	<Separators>
		<Servers>
			<SepChn Position="11"/>
		</Servers>
	</Separators>
	<Network Name="MES_MQTT_Handler">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name           = "_JSONReader"
				GUID           = "{7F1F3909-78EC-47E0-BC05-C6FE0646B215}"
				Class          = "_JSONReader"
				Position       = "(450,300)"
				Visualized     = "true"
				Remotely       = "true"
				BackgroundTime = "10 ms">
				<Channels>
					<Server Name="ClassSvr"/>
					<Server Name="LibraryVersion"/>
					<Server Name="ReadFSM"/>
					<Client Name="_FileSys"/>
					<Client Name="SigCLib"/>
				</Channels>
			</Object>
			<Object
				Name           = "_JSONWriter"
				GUID           = "{DAE9E92C-9F50-4BE6-9E8D-FCEC9DF5EFDE}"
				Class          = "_JSONWriter"
				Position       = "(1110,300)"
				Visualized     = "true"
				Remotely       = "true"
				BackgroundTime = "10 ms">
				<Channels>
					<Server Name="ClassSvr"/>
					<Server Name="LibraryVersion"/>
					<Server Name="WriteFSM"/>
					<Client Name="_FileSys"/>
					<Client Name="SigCLib"/>
				</Channels>
			</Object>
			<Object
				Name       = "ASCII_BIN"
				GUID       = "{E6782275-1499-4F52-99B9-71A41AA8AA2E}"
				Class      = "ASCII_BIN"
				Position   = "(2310,330)"
				Visualized = "true"
				Remotely   = "true">
				<Channels>
					<Server Name="Obj_channel"/>
				</Channels>
			</Object>
			<Object
				Name       = "PublishHMI"
				GUID       = "{B98DB34C-362F-4A01-BEFC-E63A304AF3D0}"
				Class      = "MqttTopicText"
				Position   = "(570,3360)"
				Visualized = "true"
				Remotely   = "true"
				CyclicTime = "10 ms">
				<Channels>
					<Server Name="DataReceived"/>
					<Server Name="DataString" Value="&quot;&quot;"/>
					<Server Name="EnableMessage"/>
					<Server Name="GrantedQoS"/>
					<Server Name="PublishInterval" Value="0"/>
					<Server Name="QoS"/>
					<Server Name="RetainData"/>
					<Server Name="TopicName"/>
					<Server Name="TopicState"/>
					<Server Name="TopicType" Value="MQTTTopic::MT_Publish_OnChange"/>
					<Client Name="objRiwoEventLogger"/>
					<Client Name="ocMQTTClient_Interface"/>
				</Channels>
			</Object>
			<Object
				Name       = "PublishLift"
				GUID       = "{31ABEA49-1640-4F80-A671-ED9120AE784B}"
				Class      = "MqttTopicText"
				Position   = "(570,2040)"
				Visualized = "true"
				Remotely   = "true"
				CyclicTime = "10 ms">
				<Channels>
					<Server Name="DataReceived"/>
					<Server Name="DataString" Value="&quot;&quot;"/>
					<Server Name="EnableMessage"/>
					<Server Name="GrantedQoS"/>
					<Server Name="PublishInterval" Value="0"/>
					<Server Name="QoS"/>
					<Server Name="RetainData"/>
					<Server Name="TopicName"/>
					<Server Name="TopicState"/>
					<Server Name="TopicType" Value="MQTTTopic::MT_Publish_OnChange"/>
					<Client Name="objRiwoEventLogger"/>
					<Client Name="ocMQTTClient_Interface"/>
				</Channels>
			</Object>
			<Object
				Name       = "PublishProduction"
				GUID       = "{865D150E-41E6-4F4C-BD58-CB7AFC4F85D1}"
				Class      = "MqttTopicText"
				Position   = "(570,2700)"
				Visualized = "true"
				Remotely   = "true"
				CyclicTime = "10 ms">
				<Channels>
					<Server Name="DataReceived"/>
					<Server Name="DataString" Value="&quot;&quot;"/>
					<Server Name="EnableMessage"/>
					<Server Name="GrantedQoS"/>
					<Server Name="PublishInterval" Value="0"/>
					<Server Name="QoS"/>
					<Server Name="RetainData"/>
					<Server Name="TopicName"/>
					<Server Name="TopicState"/>
					<Server Name="TopicType" Value="MQTTTopic::MT_Publish_OnChange"/>
					<Client Name="objRiwoEventLogger"/>
					<Client Name="ocMQTTClient_Interface"/>
				</Channels>
			</Object>
			<Object
				Name       = "PublishSafety"
				GUID       = "{0ADFD87F-BDFA-4C2F-9439-FD217323DB2E}"
				Class      = "MqttTopicText"
				Position   = "(570,1380)"
				Visualized = "true"
				Remotely   = "true"
				CyclicTime = "10 ms">
				<Channels>
					<Server Name="DataReceived"/>
					<Server Name="DataString" Value="&quot;&quot;"/>
					<Server Name="EnableMessage"/>
					<Server Name="GrantedQoS"/>
					<Server Name="PublishInterval" Value="0"/>
					<Server Name="QoS"/>
					<Server Name="RetainData"/>
					<Server Name="TopicName"/>
					<Server Name="TopicState"/>
					<Server Name="TopicType" Value="MQTTTopic::MT_Publish_OnChange"/>
					<Client Name="objRiwoEventLogger"/>
					<Client Name="ocMQTTClient_Interface"/>
				</Channels>
			</Object>
			<Object
				Name       = "PublishState"
				GUID       = "{37AFF5BD-DF7B-4DA9-9C31-64BA53DEB313}"
				Class      = "MqttTopicText"
				Position   = "(570,720)"
				Visualized = "true"
				Remotely   = "true"
				CyclicTime = "10 ms">
				<Channels>
					<Server Name="DataReceived"/>
					<Server Name="DataString" Value="&quot;&quot;"/>
					<Server Name="EnableMessage"/>
					<Server Name="GrantedQoS"/>
					<Server Name="PublishInterval" Value="0"/>
					<Server Name="QoS"/>
					<Server Name="RetainData"/>
					<Server Name="TopicName"/>
					<Server Name="TopicState"/>
					<Server Name="TopicType" Value="MQTTTopic::MT_Publish_OnChange"/>
					<Client Name="objRiwoEventLogger"/>
					<Client Name="ocMQTTClient_Interface"/>
				</Channels>
			</Object>
			<Object
				Name       = "SubscribeAlarm"
				GUID       = "{AAB527A0-C783-4717-A59B-B575166CE7E6}"
				Class      = "MqttTopicText"
				Position   = "(2160,3360)"
				Visualized = "true"
				Remotely   = "true"
				CyclicTime = "100 ms">
				<Channels>
					<Server Name="DataReceived"/>
					<Server Name="DataString" Value="&quot;&quot;"/>
					<Server Name="EnableMessage" Value="1"/>
					<Server Name="GrantedQoS"/>
					<Server Name="PublishInterval" Value="0"/>
					<Server Name="QoS" Value="1"/>
					<Server Name="RetainData"/>
					<Server Name="TopicName"/>
					<Server Name="TopicState"/>
					<Server Name="TopicType" Value="MQTTTopic::MT_Subscribe"/>
					<Client Name="objRiwoEventLogger"/>
					<Client Name="ocMQTTClient_Interface"/>
				</Channels>
			</Object>
			<Object
				Name       = "SubscribeHMIMessage"
				GUID       = "{02D780E5-43C0-4964-BE5E-27D2816057DA}"
				Class      = "MqttTopicText"
				Position   = "(2160,2040)"
				Visualized = "true"
				Remotely   = "true"
				CyclicTime = "10 ms">
				<Channels>
					<Server Name="DataReceived"/>
					<Server Name="DataString" Value="&quot;1&quot;"/>
					<Server Name="EnableMessage"/>
					<Server Name="GrantedQoS"/>
					<Server Name="PublishInterval" Value="0"/>
					<Server Name="QoS"/>
					<Server Name="RetainData"/>
					<Server Name="TopicName" Value="&quot;agvs/2/hmiMessage/set&quot;"/>
					<Server Name="TopicState"/>
					<Server Name="TopicType" Value="MQTTTopic::MT_Subscribe"/>
					<Client Name="objRiwoEventLogger"/>
					<Client Name="ocMQTTClient_Interface"/>
				</Channels>
			</Object>
			<Object
				Name       = "SubscribeLiftTarget"
				GUID       = "{C6121E1E-63C8-4584-8ACA-803AF60925A0}"
				Class      = "MqttTopicText"
				Position   = "(2160,720)"
				Visualized = "true"
				Remotely   = "true"
				CyclicTime = "10 ms">
				<Channels>
					<Server Name="DataReceived"/>
					<Server Name="DataString" Value="&quot;&quot;"/>
					<Server Name="EnableMessage" Value="1"/>
					<Server Name="GrantedQoS"/>
					<Server Name="PublishInterval" Value="0"/>
					<Server Name="QoS"/>
					<Server Name="RetainData"/>
					<Server Name="TopicName" Value="&quot;mes/status&quot;"/>
					<Server Name="TopicState"/>
					<Server Name="TopicType" Value="MQTTTopic::MT_Subscribe"/>
					<Client Name="objRiwoEventLogger"/>
					<Client Name="ocMQTTClient_Interface"/>
				</Channels>
			</Object>
			<Object
				Name       = "SubscribeMESOnline"
				GUID       = "{4C21DE23-5741-4F89-A900-D82CA708FAE9}"
				Class      = "MqttTopicText"
				Position   = "(2160,2700)"
				Visualized = "true"
				Remotely   = "true"
				CyclicTime = "10 ms">
				<Channels>
					<Server Name="DataReceived"/>
					<Server Name="DataString" Value="&quot;1&quot;"/>
					<Server Name="EnableMessage" Value="1"/>
					<Server Name="GrantedQoS"/>
					<Server Name="PublishInterval" Value="0"/>
					<Server Name="QoS"/>
					<Server Name="RetainData"/>
					<Server Name="TopicName" Value="&quot;agvs/2/hmiMessage/set&quot;"/>
					<Server Name="TopicState"/>
					<Server Name="TopicType" Value="MQTTTopic::MT_Subscribe"/>
					<Client Name="objRiwoEventLogger"/>
					<Client Name="ocMQTTClient_Interface"/>
				</Channels>
			</Object>
			<Object
				Name       = "SubscribeProduction"
				GUID       = "{D80E363B-11A6-411A-90BC-6F348F7624DC}"
				Class      = "MqttTopicText"
				Position   = "(2160,1380)"
				Visualized = "true"
				Remotely   = "true"
				CyclicTime = "10 ms">
				<Channels>
					<Server Name="DataReceived"/>
					<Server Name="DataString" Value="&quot;1&quot;"/>
					<Server Name="EnableMessage"/>
					<Server Name="GrantedQoS"/>
					<Server Name="PublishInterval" Value="0"/>
					<Server Name="QoS"/>
					<Server Name="RetainData"/>
					<Server Name="TopicName" Value="&quot;agvs/2/productionState&quot;"/>
					<Server Name="TopicState"/>
					<Server Name="TopicType" Value="MQTTTopic::MT_Subscribe"/>
					<Client Name="objRiwoEventLogger"/>
					<Client Name="ocMQTTClient_Interface"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.PublishState" Destination="PublishState.TopicState"/>
			<Connection Source="PublishState.ocMQTTClient_Interface" Destination="this.objMQTTClient_Interface" Vertices="(570,810),(300,810),(300,210),(38,210),"/>
			<Connection Source="this.PublishSafety" Destination="PublishSafety.TopicState"/>
			<Connection Source="PublishSafety.ocMQTTClient_Interface" Destination="this.objMQTTClient_Interface" Vertices="(570,1470),(300,1470),(300,210),(38,210),"/>
			<Connection Source="this.PublishLift" Destination="PublishLift.TopicState"/>
			<Connection Source="PublishLift.ocMQTTClient_Interface" Destination="this.objMQTTClient_Interface" Vertices="(570,2130),(300,2130),(300,210),(38,210),"/>
			<Connection Source="this.PublishProduction" Destination="PublishProduction.TopicState"/>
			<Connection Source="PublishProduction.ocMQTTClient_Interface" Destination="this.objMQTTClient_Interface" Vertices="(570,2790),(300,2790),(300,210),(38,210),"/>
			<Connection Source="this.PublishHMI" Destination="PublishHMI.TopicState"/>
			<Connection Source="PublishHMI.ocMQTTClient_Interface" Destination="this.objMQTTClient_Interface" Vertices="(570,3450),(300,3450),(300,210),(38,210),"/>
			<Connection Source="this.ASCII_BIN" Destination="ASCII_BIN.Obj_channel"/>
			<Connection Source="this._JSONReader" Destination="_JSONReader.ClassSvr"/>
			<Connection Source="this._JSONWriter" Destination="_JSONWriter.ClassSvr"/>
			<Connection Source="this.SubscribeProduction" Destination="SubscribeProduction.TopicState"/>
			<Connection Source="SubscribeLiftTarget.ocMQTTClient_Interface" Destination="this.objMQTTClient_Interface" Vertices="(2160,810),(1860,810),(1860,210),(38,210),"/>
			<Connection Source="this.SubscribeHMIMessage" Destination="SubscribeHMIMessage.TopicState"/>
			<Connection Source="SubscribeProduction.ocMQTTClient_Interface" Destination="this.objMQTTClient_Interface" Vertices="(2160,1470),(1860,1470),(1860,210),(38,210),"/>
			<Connection Source="this.SubscribeMESOnline" Destination="SubscribeMESOnline.TopicState"/>
			<Connection Source="SubscribeHMIMessage.ocMQTTClient_Interface" Destination="this.objMQTTClient_Interface" Vertices="(2160,2130),(1860,2130),(1860,210),(38,210),"/>
			<Connection Source="this.SubscribeLiftTarget" Destination="SubscribeLiftTarget.TopicState"/>
			<Connection Source="SubscribeMESOnline.ocMQTTClient_Interface" Destination="this.objMQTTClient_Interface" Vertices="(2160,2790),(1860,2790),(1860,210),(38,210),"/>
			<Connection Source="this.SubscribeAlarm" Destination="SubscribeAlarm.TopicState"/>
			<Connection Source="SubscribeAlarm.ocMQTTClient_Interface" Destination="this.objMQTTClient_Interface" Vertices="(2160,3450),(1860,3450),(1860,210),(38,210),"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
MES_MQTT_Handler : CLASS
	TYPE
	  _eAGVProduction :
	  (
	    ap_IDLE,
	    ap_IN_PRODUCTION,
	    ap_NOT_IN_PRODUCTION
	  )$UDINT;
	  _eEstopStatus :
	  (
	    es_CLEAR,
	    es_PRESSED,
	    es_PENDING_RESET
	  )$UDINT;
	  _eHMIMessageResponse :
	  (
	    hms_IDLE,
	    hms_OK,
	    hms_CANCEL
	  )$UDINT;
	  _eScannerStatus :
	  (
	    ss_CLEAR,
	    ss_WARNING,
	    ss_STOP,
	    ss_ESTOP
	  )$UDINT;
#pragma pack(push, 4)
	  _tLiftTarget : STRUCT
	    lt_x : REAL;
	    lt_y : REAL;
	    lt_radius : REAL;
	    lt_heightIn : DINT;
	    lt_heightOut : DINT;
	    lt_loadRequired : BOOL;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  _tScanners : STRUCT
	    s_scanner1 : _eScannerStatus;
	    s_scanner2 : _eScannerStatus;
	    s_scanner3 : _eScannerStatus;
	    s_overhang : BOOL;
	  END_STRUCT;
#pragma pack(pop)
	  _tTopicName : ^CHAR;
#pragma pack(push, 1)
	  tAGVStatusMES : STRUCT  //! <Type Public="true" Name="tAGVStatusMES"/>
	    as_online : BOOL;
	    as_docking : BOOL;
	    as_manualDrive : BOOL;
	    as_brakeRelease : BOOL;
	    as_charging : BOOL;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 4)
	  tLiftMES : STRUCT  //! <Type Public="true" Name="tLiftMES"/>
	    l_load : BOOL;
	    l_liftHeight : DINT;
	    l_manualLift : BOOL;
	    l_target : _tLiftTarget;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  tPubHMIMessageMES : STRUCT  //! <Type Public="true" Name="tPubHMIMessageMES"/>
	    enable : BOOL;
	    pMessage : ^CHAR;
	    response : _eHMIMessageResponse;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  tSafetyMES : STRUCT
	    scanners : _tScanners;
	    eStopButton : _eEstopStatus;
	    forkCollision : BOOL;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  tSubHMIMessageMES : STRUCT
	    enable : BOOL;
	    message : ARRAY [0..255] OF CHAR;
	  END_STRUCT;
#pragma pack(pop)
	END_TYPE
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
	CntPublishStatus 	: SvrCh_DINT;
	CntPublishSafety 	: SvrCh_DINT;
	CntPublishLift 	: SvrCh_DINT;
	CntPublishProduction 	: SvrCh_DINT;
	CntPublishHMI 	: SvrCh_DINT;
	CntSubscribeLift 	: SvrCh_DINT;
	CntSubscribeProduction 	: SvrCh_DINT;
	CntSubscribeHMI 	: SvrCh_DINT;
	CntSubscribeMES 	: SvrCh_DINT;
	CntSubscribeAlarm 	: SvrCh_DINT;
	Connected 	: SvrCh_DINT;
  //Clients:
	objMQTTClient_Interface 	: CltChCmd_MQTTClient_Interface;
	agvID 	: CltCh_DINT;
	PublishState 	: CltChCmd_MqttTopicText;
	PublishSafety 	: CltChCmd_MqttTopicText;
	PublishProduction 	: CltChCmd_MqttTopicText;
	PublishLift 	: CltChCmd_MqttTopicText;
	PublishHMI 	: CltChCmd_MqttTopicText;
	ASCII_BIN 	: CltChCmd_ASCII_BIN;
	_JSONWriter 	: CltChCmd__JSONWriter;
	_JSONReader 	: CltChCmd__JSONReader;
	SubscribeHMIMessage 	: CltChCmd_MqttTopicText;
	SubscribeProduction 	: CltChCmd_MqttTopicText;
	SubscribeMESOnline 	: CltChCmd_MqttTopicText;
	SubscribeLiftTarget 	: CltChCmd_MqttTopicText;
	objRiwoEventLogger 	: CltChCmd_RiwoEventLogger;
	objStateControl 	: CltChCmd_StateControl;
	objHMIHandler 	: CltChCmd_HMIHandler;
	objSigclib 	: CltChCmd_SigCLib;
	SubscribeAlarm 	: CltChCmd_MqttTopicText;
	WillTopic 	: CltChCmd_StringRAM;
  //Variables:
		_InitCounter 	: DINT;
		_pubAGVStatus 	: tAGVStatusMES;
		_pubAGVLift 	: tLiftMES;
		_pubAGVInProduction 	: _eAGVProduction;
		_pubHMIMessageStatus 	: tPubHMIMessageMES;
		_subHMIMessageStatus 	: tSubHMIMessageMES;
		_subAGVProduction 	: _eAGVProduction;
		_subAGVLift 	: _tLiftTarget;
		_subMESOnline 	: BOOL;
		_InitDoneTime 	: UDINT;
		_pubAGVSafety 	: tSafetyMES;
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL Init;
	
	FUNCTION VIRTUAL GLOBAL CyWork
		VAR_INPUT
			EAX 	: UDINT;
		END_VAR
		VAR_OUTPUT
			state (EAX) 	: UDINT := READY;
		END_VAR;
	
	FUNCTION _publishAGVstatus;
	
	FUNCTION _publishAGVsafety;
	
	FUNCTION _publishLift;
	
	FUNCTION _publishAGVinproduction;
	
	FUNCTION _publishHMImessage;
	
	FUNCTION _subscribeAGVinproduction;
	
	FUNCTION _subscribeHMImessage;
	
	FUNCTION _subscribeMESstatus;
	
	FUNCTION _subscribeLiftTarget;
	
	FUNCTION _subscribeAlarm;
	
	FUNCTION _handleAlarmStates;
	
	FUNCTION _handleAlarmResets;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma using _JSONReader
#pragma using _JSONWriter
#pragma using ASCII_BIN
#pragma using MqttTopicText
#pragma usingLtd HMIHandler
#pragma usingLtd MQTTClient_Interface
#pragma usingLtd RiwoEventLogger
#pragma usingLtd SigCLib
#pragma usingLtd StateControl
#pragma usingLtd StringRAM


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB MES_MQTT_Handler::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_MES_MQTT_HANDLER
0$UINT, 0$UINT, (SIZEOF(::MES_MQTT_Handler))$UINT, 
12$UINT, 20$UINT, 0$UINT, 
TO_UDINT(1919312243), "MES_MQTT_Handler", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::MES_MQTT_Handler.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
(::MES_MQTT_Handler.CntPublishStatus.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2979269344), "CntPublishStatus", 
(::MES_MQTT_Handler.CntPublishSafety.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1617509299), "CntPublishSafety", 
(::MES_MQTT_Handler.CntPublishLift.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1778798161), "CntPublishLift", 
(::MES_MQTT_Handler.CntPublishProduction.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(81731046), "CntPublishProduction", 
(::MES_MQTT_Handler.CntPublishHMI.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1256104746), "CntPublishHMI", 
(::MES_MQTT_Handler.CntSubscribeLift.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2837278268), "CntSubscribeLift", 
(::MES_MQTT_Handler.CntSubscribeProduction.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1703270113), "CntSubscribeProduction", 
(::MES_MQTT_Handler.CntSubscribeHMI.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1567649751), "CntSubscribeHMI", 
(::MES_MQTT_Handler.CntSubscribeMES.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1845550670), "CntSubscribeMES", 
(::MES_MQTT_Handler.CntSubscribeAlarm.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1777481417), "CntSubscribeAlarm", 
(::MES_MQTT_Handler.Connected.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1584727642), "Connected", 
//Clients:
(::MES_MQTT_Handler.objMQTTClient_Interface.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000110$UINT, TO_UDINT(1960563505), "objMQTTClient_Interface", TO_UDINT(2880242173), "MQTTClient_Interface", 1$UINT, 16$UINT, 
(::MES_MQTT_Handler.agvID.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(2638857639), "agvID", 
(::MES_MQTT_Handler.PublishState.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(3115290416), "PublishState", TO_UDINT(3441159294), "MqttTopicText", 0$UINT, 0$UINT, 
(::MES_MQTT_Handler.PublishSafety.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(2638173154), "PublishSafety", TO_UDINT(3441159294), "MqttTopicText", 0$UINT, 0$UINT, 
(::MES_MQTT_Handler.PublishProduction.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(508009418), "PublishProduction", TO_UDINT(3441159294), "MqttTopicText", 0$UINT, 0$UINT, 
(::MES_MQTT_Handler.PublishLift.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(2515839032), "PublishLift", TO_UDINT(3441159294), "MqttTopicText", 0$UINT, 0$UINT, 
(::MES_MQTT_Handler.PublishHMI.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(3075652339), "PublishHMI", TO_UDINT(3441159294), "MqttTopicText", 0$UINT, 0$UINT, 
(::MES_MQTT_Handler.ASCII_BIN.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(2897291062), "ASCII_BIN", TO_UDINT(2897291062), "ASCII_BIN", 1$UINT, 21$UINT, 
(::MES_MQTT_Handler._JSONWriter.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(1888817686), "_JSONWriter", TO_UDINT(1888817686), "_JSONWriter", 1$UINT, 0$UINT, 
(::MES_MQTT_Handler._JSONReader.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(722092968), "_JSONReader", TO_UDINT(722092968), "_JSONReader", 1$UINT, 1$UINT, 
(::MES_MQTT_Handler.SubscribeHMIMessage.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(3814796978), "SubscribeHMIMessage", TO_UDINT(3441159294), "MqttTopicText", 0$UINT, 0$UINT, 
(::MES_MQTT_Handler.SubscribeProduction.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(1483702722), "SubscribeProduction", TO_UDINT(3441159294), "MqttTopicText", 0$UINT, 0$UINT, 
(::MES_MQTT_Handler.SubscribeMESOnline.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(500613383), "SubscribeMESOnline", TO_UDINT(3441159294), "MqttTopicText", 0$UINT, 0$UINT, 
(::MES_MQTT_Handler.SubscribeLiftTarget.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(2854049806), "SubscribeLiftTarget", TO_UDINT(3441159294), "MqttTopicText", 0$UINT, 0$UINT, 
(::MES_MQTT_Handler.objRiwoEventLogger.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000000$UINT, TO_UDINT(846826333), "objRiwoEventLogger", TO_UDINT(2650024474), "RiwoEventLogger", 2$UINT, 3$UINT, 
(::MES_MQTT_Handler.objStateControl.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(2641290446), "objStateControl", TO_UDINT(2283691383), "StateControl", 0$UINT, 0$UINT, 
(::MES_MQTT_Handler.objHMIHandler.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(3639223411), "objHMIHandler", TO_UDINT(1180050973), "HMIHandler", 0$UINT, 0$UINT, 
(::MES_MQTT_Handler.objSigclib.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000000$UINT, TO_UDINT(1576254127), "objSigclib", TO_UDINT(77440046), "SigCLib", 0$UINT, 38$UINT, 
(::MES_MQTT_Handler.SubscribeAlarm.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(1969422787), "SubscribeAlarm", TO_UDINT(3441159294), "MqttTopicText", 0$UINT, 0$UINT, 
(::MES_MQTT_Handler.WillTopic.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(2448416635), "WillTopic", TO_UDINT(2408581120), "StringRAM", 1$UINT, 10$UINT, 
END_FUNCTION


#define USER_CNT_MES_MQTT_Handler 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_MES_MQTT_Handler] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION MES_MQTT_Handler::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_MES_MQTT_Handler, pCmd := #vmt.CmdTable);
	vmt.CmdTable.Init		:= #Init();
	vmt.CmdTable.CyWork		:= #CyWork();
	ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION


FUNCTION VIRTUAL GLOBAL MES_MQTT_Handler::Init
  VAR
  	tmpString : array[0..255] of char;
    tmpStringID : array[0..255] of char;
  	pObjectHandle   : ^_cJSON::t_s_cJSON;  
    pString : ^char;
  END_VAR

  _InitCounter += 1;
  
  case _InitCounter of
    
    INIT_CYCLE_10:
    
      AlarmStartId := AlarmStartId.Read();
      
      _Alarm_Error_NoCommunication.SetAlarmIds(startId:=AlarmStartId);
      _Alarm_Error_NoCommunication.Level := RiwoParamAlarm::eal_Warning;
      _Alarm_Error_NoCommunication.Report := RiwoParamAlarm::ear_Yes;    
      
      agvID := agvID.Read();
      ASCII_BIN.Bin2Ascii(pt:=#tmpStringID[0], value:=agvID, format:=0);      
            
      // Set TopicName for status topic (Publish)
      if PublishState.EnableMessage = TRUE then
        _memset(dest:=#tmpString[0], usByte:=0, cntr:=sizeof(tmpString));
        _strcat(dest:=#tmpString[0], src:=AGVSTRING);
        _strcat(dest:=#tmpString[0], src:=#tmpStringID[0]);
        _strcat(dest:=#tmpString[0], src:=STATUSSTRING);     
        PublishState.SetTopicName(#tmpString[0]);
//        WillTopic.WriteDataOff(udLen:=sizeof(tmpString), udOff:=0, pData:=#tmpString[0]);
      end_if;
       
      // Set TopicName for safety topic (Publish)
      if PublishSafety.EnableMessage = TRUE then
        _memset(dest:=#tmpString[0], usByte:=0, cntr:=sizeof(tmpString));
        _strcat(dest:=#tmpString[0], src:=AGVSTRING);
        _strcat(dest:=#tmpString[0], src:=#tmpStringID[0]);
        _strcat(dest:=#tmpString[0], src:=SAFETYSTRING);     
        PublishSafety.SetTopicName(#tmpString[0]);  
      end_if;
      
      // Set TopicName for lift topic (Publish)
      if PublishLift.EnableMessage = TRUE then
        _memset(dest:=#tmpString[0], usByte:=0, cntr:=sizeof(tmpString));
        _strcat(dest:=#tmpString[0], src:=AGVSTRING);
        _strcat(dest:=#tmpString[0], src:=#tmpStringID[0]);
        _strcat(dest:=#tmpString[0], src:=LIFTSTRING);     
        PublishLift.SetTopicName(#tmpString[0]);  
      end_if;
      
      // Set TopicName for inProduction topic (Publish)
      if PublishProduction.EnableMessage = TRUE then
        _memset(dest:=#tmpString[0], usByte:=0, cntr:=sizeof(tmpString));
        _strcat(dest:=#tmpString[0], src:=AGVSTRING);
        _strcat(dest:=#tmpString[0], src:=#tmpStringID[0]);
        _strcat(dest:=#tmpString[0], src:=PRODUCTIONSTATESETSTRING);     
        PublishProduction.SetTopicName(#tmpString[0]); 
      end_if;
      
      // Set TopicName for HMI topic (Publish)
      if PublishHMI.EnableMessage = TRUE then
        _memset(dest:=#tmpString[0], usByte:=0, cntr:=sizeof(tmpString));
        _strcat(dest:=#tmpString[0], src:=AGVSTRING);
        _strcat(dest:=#tmpString[0], src:=#tmpStringID[0]);
        _strcat(dest:=#tmpString[0], src:=HMIMESSAGESTRING);     
        PublishHMI.SetTopicName(#tmpString[0]);   
      end_if;
           
      // Set TopicName for inProduction (Subscribe)
      if SubscribeProduction.EnableMessage = TRUE then
        _memset(dest:=#tmpString[0], usByte:=0, cntr:=sizeof(tmpString));
        _strcat(dest:=#tmpString[0], src:=AGVSTRING);
        _strcat(dest:=#tmpString[0], src:=#tmpStringID[0]);
        _strcat(dest:=#tmpString[0], src:=PRODUCTIONSTATESTRING);     
        SubscribeProduction.SetTopicName(#tmpString[0]);   
      end_if;
      
      // Set TopicName for lift target (Subscribe)
      if SubscribeLiftTarget.EnableMessage = TRUE then
        _memset(dest:=#tmpString[0], usByte:=0, cntr:=sizeof(tmpString));
        _strcat(dest:=#tmpString[0], src:=AGVSTRING);
        _strcat(dest:=#tmpString[0], src:=#tmpStringID[0]);
        _strcat(dest:=#tmpString[0], src:=SETLIFTSTRING);     
        SubscribeLiftTarget.SetTopicName(#tmpString[0]);   
      end_if;      
           
      // Set TopicName for HMI topic (Subscribe)
      if SubscribeHMIMessage.EnableMessage = TRUE then
        _memset(dest:=#tmpString[0], usByte:=0, cntr:=sizeof(tmpString));
        _strcat(dest:=#tmpString[0], src:=AGVSTRING);
        _strcat(dest:=#tmpString[0], src:=#tmpStringID[0]);
        _strcat(dest:=#tmpString[0], src:=SETHMIMESSAGESTRING);     
        SubscribeHMIMessage.SetTopicName(#tmpString[0]);   
      end_if;               
           
      // Set TopicName for MES status topic (Subscribe)
      if SubscribeMESOnline.EnableMessage = TRUE then
        _memset(dest:=#tmpString[0], usByte:=0, cntr:=sizeof(tmpString));
        _strcat(dest:=#tmpString[0], src:=MESSTATUSTRING);     
        SubscribeMESOnline.SetTopicName(#tmpString[0]);
      end_if;     
      
      
      // Set TopicName for MES status topic (Subscribe)
      if SubscribeAlarm.EnableMessage = TRUE then
        _memset(dest:=#tmpString[0], usByte:=0, cntr:=sizeof(tmpString));
        _strcat(dest:=#tmpString[0], src:=AGVSTRING);
        _strcat(dest:=#tmpString[0], src:=#tmpStringID[0]);        
        _strcat(dest:=#tmpString[0], src:=ALARMSTRING);     
        SubscribeAlarm.SetTopicName(#tmpString[0]);
      end_if;     
      
      // Create JSON object
      _JSONWriter.ClearMainElement();
      pObjectHandle := _JSONWriter.GetMainElement();
      
      if pObjectHandle <> nil then
        
        // Create JSON list warnings
        _JSONWriter.AddObjectToObject(object:=pObjectHandle, name:="warnings");
        
        // Create JSON list errors
        _JSONWriter.AddObjectToObject(object:=pObjectHandle, name:="errors");
      
          // Write JSON to String
        pString := _JSONWriter.Print(pObjectHandle);
        if pString <> NIL then
          AlarmText.WriteDataOff(udLen:=_strlen(pString), udOff:=0, pData:=pString);
          objSigclib.Memory(pptr:=#pString, size:=0);
        end_if; 
      end_if;
      
      CntPublishStatus := 0;
      CntPublishSafety := 0;
      CntPublishLift := 0;
      CntPublishProduction := 0;
      CntPublishHMI := 0;
      CntSubscribeLift := 0;
      CntSubscribeProduction := 0;
      CntSubscribeHMI := 0;
      CntSubscribeMES := 0;
      CntSubscribeAlarm := 0;
      
      _InitDoneTime := ops.tAbsolute;
  end_case;
  
END_FUNCTION


FUNCTION VIRTUAL GLOBAL MES_MQTT_Handler::CyWork
	VAR_INPUT
		EAX 	: UDINT;
	END_VAR
	VAR_OUTPUT
		state (EAX) 	: UDINT;(* := READY *)
	END_VAR
  
  if (ops.tAbsolute - _InitDoneTime) > MES_CYWORK_DELAY & objMQTTClient_Interface.InterfaceState = MQTTClient_Interface::MCIS_Connected then
  
    // Publish
    if PublishState.EnableMessage = TRUE then
      if PublishState.TopicState = MTS_WaitForPublishDataChange then
        _publishAGVstatus();
      end_if;
    end_if;
    if PublishSafety.EnableMessage = TRUE then
      if PublishSafety.TopicState = MTS_WaitForPublishDataChange then
        _publishAGVsafety();
      end_if; 
    end_if;
    if PublishLift.EnableMessage = TRUE then
      if PublishLift.TopicState = MTS_WaitForPublishDataChange then
        _publishLift();
      end_if;
    end_if;
    if PublishProduction.EnableMessage = TRUE then
      if PublishProduction.TopicState = MTS_WaitForPublishDataChange then
        _publishAGVinproduction();
      end_if;  
    end_if;
    if PublishHMI.EnableMessage = TRUE then 
      if PublishHMI.TopicState = MTS_WaitForPublishDataChange then
        _publishHMImessage();
      end_if;
    end_if;
      
    // Subscribe
    if SubscribeProduction.DataReceived = TRUE then
      _subscribeAGVinproduction();
    end_if;
    if SubscribeHMIMessage.DataReceived = TRUE then
      _subscribeHMImessage();
    end_if;
    if SubscribeMESOnline.DataReceived = TRUE then
      _subscribeMESstatus();
    end_if;
    if SubscribeLiftTarget.DataReceived = TRUE then
      _subscribeLiftTarget();
    end_if;    
    if SubscribeAlarm.DataReceived = TRUE then
      _subscribeAlarm();
    end_if;

  
    // Publish topic counters
    if PublishState.TopicState = MQTTTopic::MTS_Publish then
      CntPublishStatus += 1;
    end_if;
    if PublishSafety.TopicState = MQTTTopic::MTS_Publish then
      CntPublishSafety += 1;
    end_if;
    if PublishLift.TopicState = MQTTTopic::MTS_Publish then
      CntPublishLift += 1;
    end_if;
    if PublishProduction.TopicState = MQTTTopic::MTS_Publish then
      CntPublishProduction += 1;
    end_if;
    if PublishHMI.TopicState = MQTTTopic::MTS_Publish then
      CntPublishHMI += 1;
    end_if;  
    
    _handleAlarmStates();
    _handleAlarmResets();
    
    Connected := _subMESOnline;
  
  end_if;  

END_FUNCTION


FUNCTION MES_MQTT_Handler::_publishAGVstatus
  VAR
  	pObjectHandle   : ^_cJSON::t_s_cJSON;
    pAlarmJSONHandle : ^_cJSON::t_s_cJSON;
    stateData       : StateControl::tStateData;
    pString         : ^CHAR;    
    pAlarmText      : Array[0..1000] of Char;
    pAlarmHandle    : ^_cJSON::t_s_cJSON;
    pWarningHAndle  : ^_cJSON::t_s_cJSON;
  END_VAR

  // Create JSON object
  _JSONWriter.ClearMainElement();
  pObjectHandle := _JSONWriter.GetMainElement();
  
  if pObjectHandle <> nil then
  
    // Get data
    stateData := objStateControl.GetStateData();
    _pubAGVStatus.as_online := TRUE;
    _pubAGVStatus.as_docking := stateData.sd_DockingModeActive;
    _pubAGVStatus.as_manualDrive := (stateData.sd_AGVMode = StateControl::am_Manual);
    _pubAGVStatus.as_brakeRelease := FALSE; 
    _pubAGVStatus.as_charging := stateData.sd_Charging;
  
    // Fill object
    _JSONWriter.AddBoolToObject(object:=pObjectHandle, name:="online", boolean:=_pubAGVStatus.as_online);
    _JSONWriter.AddBoolToObject(object:=pObjectHandle, name:="docking", boolean:=_pubAGVStatus.as_docking);
    _JSONWriter.AddBoolToObject(object:=pObjectHandle, name:="manualDrive", boolean:=_pubAGVStatus.as_manualDrive);
    _JSONWriter.AddBoolToObject(object:=pObjectHandle, name:="brakeRelease", boolean:=_pubAGVStatus.as_brakeRelease);
    _JSONWriter.AddBoolToObject(object:=pObjectHandle, name:="charging", boolean:=_pubAGVStatus.as_charging);
    
    // Create JSON list warnings
    _JSONWriter.AddObjectToObject(object:=pObjectHandle, name:="warnings");
    
    // Create JSON list errors
    _JSONWriter.AddObjectToObject(object:=pObjectHandle, name:="errors");    
    
    // Get Alarm JSON handle
    if AlarmText.GetLength() then
      AlarmText.ReadDataOff(udOff:=0, pData:=#pAlarmText[0], udMax:=sizeof(pAlarmText));
      pAlarmJSONHandle := _JSONReader.Parse(#pAlarmText[0]);
      
      if pAlarmJSONHandle <> nil then
        pAlarmHAndle := _JSONReader.GetObjectItem(object:=pAlarmJSONHandle, string:="errors");
        pWarningHAndle := _JSONReader.GetObjectItem(object:=pAlarmJSONHandle, string:="warnings"); 
        _JSONWriter.ReplaceItemInObject(object:=pObjectHandle, item:="errors", newItem:=pAlarmHAndle);
        _JSONWriter.ReplaceItemInObject(object:=pObjectHandle, item:="warnings", newItem:=pWarningHAndle); 
      end_if;
    end_if;
    
    // Write JSON to MQTT string
    pString := _JSONWriter.Print(pObjectHandle);
    if pString <> NIL then
      PublishState.SetText(pString);
      objSigclib.Memory(pptr:=#pString, size:=0);
    end_if;    

  else
    _RIWO_ERROR_MSG("Received nil pointer from JSONWriter in function _publishAGVstatus");
  end_If;
END_FUNCTION


FUNCTION MES_MQTT_Handler::_publishAGVsafety
  VAR
  	pObjectHandle     : ^_cJSON::t_s_cJSON;
    pSubObjectHandle  : ^_cJSON::t_s_cJSON;
    pString           : ^CHAR;
    safetyStatus      : StateControl::tSafetyStatus;
  END_VAR
  
  // Create JSON object
  _JSONWriter.ClearMainElement();
  pObjectHandle := _JSONWriter.GetMainElement();
  
  if pObjectHandle <> nil then
    // Add object scanners
    pSubObjectHandle := _JSONWriter.AddObjectToObject(object:=pObjectHandle, name:="scanners");
    
    safetyStatus := objStateControl.GetSafetyStatus();
    
    case safetyStatus.ss_Scanner1 of
      StateControl::ssf_Clear:
        _JSONWriter.AddStringToObject(object:=pSubObjectHandle, name:="scanner1", string:="CLEAR");
      StateControl::ssf_Warning:
        _JSONWriter.AddStringToObject(object:=pSubObjectHandle, name:="scanner1", string:="WARNING");
      StateControl::ssf_Stop:
        _JSONWriter.AddStringToObject(object:=pSubObjectHandle, name:="scanner1", string:="STOP");
      StateControl::ssf_Estop:
        _JSONWriter.AddStringToObject(object:=pSubObjectHandle, name:="scanner1", string:="ESTOP");
    end_case;
    case safetyStatus.ss_Scanner2 of
      StateControl::ssf_Clear:
        _JSONWriter.AddStringToObject(object:=pSubObjectHandle, name:="scanner2", string:="CLEAR");
      StateControl::ssf_Warning:
        _JSONWriter.AddStringToObject(object:=pSubObjectHandle, name:="scanner2", string:="WARNING");
      StateControl::ssf_Stop:
        _JSONWriter.AddStringToObject(object:=pSubObjectHandle, name:="scanner2", string:="STOP");
      StateControl::ssf_Estop:
        _JSONWriter.AddStringToObject(object:=pSubObjectHandle, name:="scanner2", string:="ESTOP");
    end_case;
    case safetyStatus.ss_Scanner3 of
      StateControl::ssf_Clear:
        _JSONWriter.AddStringToObject(object:=pSubObjectHandle, name:="scanner3", string:="CLEAR");
      StateControl::ssf_Warning:
        _JSONWriter.AddStringToObject(object:=pSubObjectHandle, name:="scanner3", string:="WARNING");
      StateControl::ssf_Stop:
        _JSONWriter.AddStringToObject(object:=pSubObjectHandle, name:="scanner3", string:="STOP");
      StateControl::ssf_Estop:
        _JSONWriter.AddStringToObject(object:=pSubObjectHandle, name:="scanner3", string:="ESTOP");
    end_case;
    
    _JSONWriter.AddBoolToObject(object:=pSubObjectHandle, name:="overhang", boolean:=safetyStatus.ss_OverhangScanner);
    
    case safetyStatus.ss_Estop of
      StateControl::es_Clear:
        _JSONWriter.AddStringToObject(object:=pObjectHandle, name:="eStopButton", string:="CLEAR");
      StateControl::es_Pressed:
        _JSONWriter.AddStringToObject(object:=pObjectHandle, name:="eStopButton", string:="PRESSED");
      StateControl::es_PendingReset:
        _JSONWriter.AddStringToObject(object:=pObjectHandle, name:="eStopButton", string:="PENDING_RESET");
    end_case;
    
    _JSONWriter.AddBoolToObject(object:=pObjectHandle, name:="forkCollision", boolean:=safetyStatus.ss_ForkCollision);
      
    // Write JSON to MQTT string
    pString := _JSONWriter.Print(pObjectHandle);
    if pString <> NIL then
      PublishSafety.SetText(pString);
      objSigclib.Memory(pptr:=#pString, size:=0);
    end_if;
    
  else
    _RIWO_ERROR_MSG("Received nil pointer from JSONWriter in function _publishAGVsafety");
  end_if;

END_FUNCTION


FUNCTION MES_MQTT_Handler::_publishLift
  VAR
  	pObjectHandle   : ^_cJSON::t_s_cJSON;
    pSubObjectHandle  : ^_cJSON::t_s_cJSON;
    pString           : ^CHAR;    
  END_VAR
  
  // Create JSON object
  _JSONWriter.ClearMainElement();
  pObjectHandle := _JSONWriter.GetMainElement();
  
  if pObjectHandle <> nil then
    // Fill object
    _JSONWriter.AddBoolToObject(object:=pObjectHandle, name:="load", boolean:=_pubAGVLift.l_load);
    _JSONWriter.AddNumberToObject(object:=pObjectHandle, name:="liftHeight", number:=to_lreal(_pubAGVLift.l_liftHeight));
    _JSONWriter.AddBoolToObject(object:=pObjectHandle, name:="manualLift", boolean:=_pubAGVLift.l_manualLift);
    
    // Add object target
    pSubObjectHandle := _JSONWriter.AddObjectToObject(object:=pObjectHandle, name:="target");
    
    // Fill object
    _JSONWriter.AddNumberToObject(object:=pSubObjectHandle, name:="x",           number:=to_lreal(_pubAGVLift.l_target.lt_x));
    _JSONWriter.AddNumberToObject(object:=pSubObjectHandle, name:="y",           number:=to_lreal(_pubAGVLift.l_target.lt_y));
    _JSONWriter.AddNumberToObject(object:=pSubObjectHandle, name:="radius",      number:=to_lreal(_pubAGVLift.l_target.lt_radius));
    _JSONWriter.AddNumberToObject(object:=pSubObjectHandle, name:="heightIn",    number:=to_lreal(_pubAGVLift.l_target.lt_heightIn));
    _JSONWriter.AddNumberToObject(object:=pSubObjectHandle, name:="heightOut",   number:=to_lreal(_pubAGVLift.l_target.lt_heightOut));
    _JSONWriter.AddBoolToObject(object:=pSubObjectHandle, name:="loadRequired",  boolean:=_pubAGVLift.l_target.lt_loadRequired);
      
    // Write JSON to MQTT string
    pString := _JSONWriter.Print(pObjectHandle);
    if pString <> NIL then
      PublishLift.SetText(pString);
      objSigclib.Memory(pptr:=#pString, size:=0);
    end_if;    
   
  else
    _RIWO_ERROR_MSG("Received nil pointer from JSONWriter in function _publishLift");
  end_if;
  
END_FUNCTION


FUNCTION MES_MQTT_Handler::_publishAGVinproduction
  VAR
  	pObjectHandle   : ^_cJSON::t_s_cJSON;
    stateData       : StateControl::tStateData;
    pString           : ^CHAR;        
  END_VAR
  
  // Create JSON object
  _JSONWriter.ClearMainElement();
  pObjectHandle := _JSONWriter.GetMainElement();
  
  if pObjectHandle <> nil then  
    
    // Get data
    stateData := objStateControl.GetStateData();
    case stateData.sd_InProduction of
      StateControl::ps_Idle:
        _pubAGVInProduction := ap_IDLE;
      StateControl::ps_InProduction:
        _pubAGVInProduction := ap_IN_PRODUCTION;
      StateControl::ps_NotInProduction:
        _pubAGVInProduction := ap_NOT_IN_PRODUCTION;
    end_case;
    
    // Fill object  
    case _pubAGVInProduction of
      ap_IDLE:
        _JSONWriter.AddStringToObject(object:=pObjectHandle, name:="inProduction", string:="IDLE");
      ap_IN_PRODUCTION:
        _JSONWriter.AddStringToObject(object:=pObjectHandle, name:="inProduction", string:="IN_PRODUCTION");
      ap_NOT_IN_PRODUCTION:
        _JSONWriter.AddStringToObject(object:=pObjectHandle, name:="inProduction", string:="NOT_IN_PRODUCTION");
    end_case;
    
    // Write JSON to MQTT string
    pString := _JSONWriter.Print(pObjectHandle);
    if pString <> NIL then
      PublishProduction.SetText(pString);
      objSigclib.Memory(pptr:=#pString, size:=0);
    end_if;

  else  
    _RIWO_ERROR_MSG("Received nil pointer from JSONWriter in function _publishAGVinproduction");
  end_if;  
    
END_FUNCTION


FUNCTION MES_MQTT_Handler::_publishHMImessage
  VAR
  	pObjectHandle   : ^_cJSON::t_s_cJSON;
    hmidata         : HMIHandler::tHMIMessageResponse;
    pString           : ^CHAR;            
  END_VAR
  
  // Create JSON object
  _JSONWriter.ClearMainElement();
  pObjectHandle := _JSONWriter.GetMainElement();
  
  if pObjectHandle <> nil then 
    
    // Get data
    hmidata := objHMIHandler.GetHMIMessage();
    _pubHMIMessageStatus.enable := hmidata.hmr_Enable;

    case hmidata.hmr_Response of
      HMIHandler::mr_Idle:
        _pubHMIMessageStatus.response := hms_IDLE;
      HMIHandler::mr_Positive:
        _pubHMIMessageStatus.response := hms_OK;
      HMIHandler::mr_Negative:
        _pubHMIMessageStatus.response := hms_CANCEL;
    end_case;

    // Fill object
    _JSONWriter.AddBoolToObject(object:=pObjectHandle, name:="enable", boolean:=_pubHMIMessageStatus.enable);
    if _pubHMIMessageStatus.pMessage <> nil then
      _JSONWriter.AddStringToObject(object:=pObjectHandle, name:="message", string:=_pubHMIMessageStatus.pMessage);
    end_if;
    
    case _pubHMIMessageStatus.response of
      hms_IDLE:
        _JSONWriter.AddStringToObject(object:=pObjectHandle, name:="response", string:="IDLE");
      hms_OK:
        _JSONWriter.AddStringToObject(object:=pObjectHandle, name:="response", string:="OK");      
      hms_CANCEL:
        _JSONWriter.AddStringToObject(object:=pObjectHandle, name:="response", string:="CANCEL");      
    end_case;
    
    // Write JSON to MQTT string
    pString := _JSONWriter.Print(pObjectHandle);
    if pString <> NIL then
      PublishHMI.SetText(pString);
      objSigclib.Memory(pptr:=#pString, size:=0);
    end_if;    


  else
    _RIWO_ERROR_MSG("Received nil pointer from JSONWriter in function _publishHMImessage");
  end_if;
  
END_FUNCTION



FUNCTION MES_MQTT_Handler::_subscribeAGVinproduction
  VAR
  	productionStateData : array[0..255] of char;
    inProductionString  : array[0..17] of char;
    cmpStringInProduction : array[0..17] of char;
    cmpStringNotInProduction : array[0..17] of char;
    productionStateLen  : UDINT;
    _pReadHandle          : ^_cJSON::t_s_cJSON;
    _pReadVariableHandle  : ^_cJSON::t_s_cJSON;    
    productionStatus      : StateControl::eProductionStatus;
  END_VAR 
  
  _memset(dest:=#productionStateData[0], usByte:=0, cntr:=sizeof(productionStateData));
  productionStateLen := SubscribeProduction.GetDataString(pData:=#productionStateData[0], dataLength:=sizeof(productionStateData));
  _pReadHandle := _JSONReader.Parse(#productionStateData[0]);
  
  if _pReadHandle <> nil then
    // Read inProduction
    _pReadVariableHandle := _JSONReader.GetObjectItem(object:=_pReadHandle, string:="inProduction");
    
    if _pReadVariableHandle <> nil then
      _memset(dest:=#inProductionString[0], usByte:=0, cntr:=sizeof(inProductionString));
      _memcpy(ptr1:=#inProductionString[0], ptr2:=_pReadVariableHandle^.Val_String, cntr:=sizeof(inProductionString));
    
      _memset(dest:=#cmpStringInProduction[0], usByte:=0, cntr:=sizeof(cmpStringInProduction));
      _memset(dest:=#cmpStringNotInProduction[0], usByte:=0, cntr:=sizeof(cmpStringNotInProduction));
      _strcat(dest:=#cmpStringInProduction[0], src:="IN_PRODUCTION");
      _strcat(dest:=#cmpStringNotInProduction[0], src:="NOT_IN_PRODUCTION");
      
      if _strcmp(str1:=#inProductionString[0], str2:=#cmpStringInProduction[0]) = 0 then
        _subAGVProduction := ap_IN_PRODUCTION;
        productionStatus := StateControl::ps_InProduction;
      elsif _strcmp(str1:=#inProductionString[0], str2:=#cmpStringNotInProduction[0]) = 0 then
        _subAGVProduction := ap_NOT_IN_PRODUCTION;
        productionStatus := StateControl::ps_NotInProduction;
      else
        _subAGVProduction := ap_IDLE;
        productionStatus := StateControl::ps_Idle;
      end_if;  
      
      // Distribute data
      objStateControl.SetProductionStatusFeedback(productionStatus); 
    else
      _RIWO_ERROR_MSG("Received nil pointer from JSONReader in function _subscribeAGVinproduction (inProduction)");
    end_if;
    
    CntSubscribeProduction += 1;
  else
    _RIWO_ERROR_MSG("Received nil pointer from JSONReader in function _subscribeAGVinproduction (Parse)");
  end_if;
  
  // Delete JSON object
  _JSONWriter.Delete(_pReadHandle);
  _JSONWriter.Delete(_pReadVariableHandle);
  
END_FUNCTION


FUNCTION MES_MQTT_Handler::_subscribeHMImessage
  VAR
  	hmiMessageData : array[0..255] of char;
    hmiMessageLen  : UDINT;
    _pReadHandle          : ^_cJSON::t_s_cJSON;
    _pReadVariableHandle  : ^_cJSON::t_s_cJSON;    
    hmiMessage            : HMIHandler::tHMIMessage;
  END_VAR
  
  _memset(dest:=#hmiMessageData[0], usByte:=0, cntr:=sizeof(hmiMessageData));
  hmiMessageLen := SubscribeHMIMessage.GetDataString(pData:=#hmiMessageData[0], dataLength:=sizeof(hmiMessageData));  
  _pReadHandle := _JSONReader.Parse(#hmiMessageData[0]);
  
  if _pReadHandle <> nil then
    // Read enable
    _pReadVariableHandle := _JSONReader.GetObjectItem(object:=_pReadHandle, string:="enable");
    
    if _pReadVariableHandle <> nil then
      _subHMIMessageStatus.enable := _pReadVariableHandle^.Val_Int$Bool;
    else
      _RIWO_ERROR_MSG("Received nil pointer from JSONReader in function _subscribeHMImessage (enable)");
    end_if;
    
    // Read message
    _pReadVariableHandle := _JSONReader.GetObjectItem(object:=_pReadHandle, string:="message");
    
    if _pReadVariableHandle <> nil then
       _memset(dest:=#_subHMIMessageStatus.message[0], usByte:=0, cntr:=sizeof(_subHMIMessageStatus.message));
      _strcpy(dest:=#_subHMIMessageStatus.message[0], src:=_pReadVariableHandle^.Val_String);
      
      // Distribute data
      hmiMessage.hm_Enable := _subHMIMessageStatus.enable;
      hmiMessage.hm_pMessage := #_subHMIMessageStatus.message[0];
      objHMIHandler.SetHMIMessage(hmiMessage);
    else
      _RIWO_ERROR_MSG("Received nil pointer from JSONReader in function _subscribeHMImessage (message)");
    end_if; 
    
    CntSubscribeHMI += 1;
  else
    _RIWO_ERROR_MSG("Received nil pointer from JSONReader in function _subscribeHMImessage (Parse)");
  end_if;  
  
  // Delete JSON object
  _JSONWriter.Delete(_pReadHandle);
  _JSONWriter.Delete(_pReadVariableHandle);  
  
END_FUNCTION


FUNCTION MES_MQTT_Handler::_subscribeMESstatus
  VAR
  	statusMessageData : array[0..255] of char;
    statusMessageLen  : UDINT;
    _pReadHandle          : ^_cJSON::t_s_cJSON;
    _pReadVariableHandle  : ^_cJSON::t_s_cJSON;    
  END_VAR
  
  _memset(dest:=#statusMessageData[0], usByte:=0, cntr:=sizeof(statusMessageData));
  statusMessageLen := SubscribeHMIMessage.GetDataString(pData:=#statusMessageData[0], dataLength:=sizeof(statusMessageData));  
  _pReadHandle := _JSONReader.Parse(#statusMessageData[0]);  
  
  if _pReadHandle <> nil then
    // Read online
    _pReadVariableHandle := _JSONReader.GetObjectItem(object:=_pReadHandle, string:="online");
    
    if _pReadVariableHandle <> nil then
      _subMESOnline := _pReadVariableHandle^.Val_Int$Bool;
      objStateControl.SetMESStatus(online:=_subMESOnline);
    else
      _RIWO_ERROR_MSG("Received nil pointer from JSONReader in function _subscribeMESstatus (online)");
    end_if;
    
    CntSubscribeMES += 1;
  else
    _RIWO_ERROR_MSG("Received nil pointer from JSONReader in function _subscribeMESstatus (Parse)");
  end_if;
  
  // Delete JSON object
  _JSONWriter.Delete(_pReadHandle);
  _JSONWriter.Delete(_pReadVariableHandle);  
    
END_FUNCTION


FUNCTION MES_MQTT_Handler::_subscribeLiftTarget
  VAR
  	liftTargetMessageData : array[0..255] of char;
    liftTargetMessageLen  : UDINT;
    _pTargetHandle        : ^_cJSON::t_s_cJSON;
    _pReadHandle          : ^_cJSON::t_s_cJSON;
    _pReadVariableHandle  : ^_cJSON::t_s_cJSON;
  END_VAR
  
  _memset(dest:=#liftTargetMessageData[0], usByte:=0, cntr:=sizeof(liftTargetMessageData));
  liftTargetMessageLen := SubscribeLiftTarget.GetDataString(pData:=#liftTargetMessageData[0], dataLength:=sizeof(liftTargetMessageData));  
  _pReadHandle := _JSONReader.Parse(#liftTargetMessageData[0]);  
  
  if _pReadHandle <> nil then
    // Read target
    _pTargetHandle := _JSONReader.GetObjectItem(object:=_pReadHandle, string:="target");
    
    // Read x
    _pReadVariableHandle := _JSONReader.GetObjectItem(object:=_pTargetHandle, string:="x");
    if _pReadVariableHandle <> nil then
      _subAGVLift.lt_x := to_real(_pReadVariableHandle^.Val_Double);
    else
      _RIWO_ERROR_MSG("Received nil pointer from JSONReader in function _subscribeLiftTarget (x)");
    end_if;  
   
    // Read y
    _pReadVariableHandle := _JSONReader.GetObjectItem(object:=_pTargetHandle, string:="y");
    if _pReadVariableHandle <> nil then
      _subAGVLift.lt_y := to_real(_pReadVariableHandle^.Val_Double);
    else
      _RIWO_ERROR_MSG("Received nil pointer from JSONReader in function _subscribeLiftTarget (y)");      
    end_if;
    
    // Read radius
    _pReadVariableHandle := _JSONReader.GetObjectItem(object:=_pTargetHandle, string:="radius");
    if _pReadVariableHandle <> nil then
      _subAGVLift.lt_radius := to_real(_pReadVariableHandle^.Val_Double);
    else
      _RIWO_ERROR_MSG("Received nil pointer from JSONReader in function _subscribeLiftTarget (radius)");      
    end_if;    
   
    // Read heightIn
    _pReadVariableHandle := _JSONReader.GetObjectItem(object:=_pTargetHandle, string:="heightIn");
    if _pReadVariableHandle <> nil then
      _subAGVLift.lt_heightIn := to_dint(_pReadVariableHandle^.Val_Int);
    else
      _RIWO_ERROR_MSG("Received nil pointer from JSONReader in function _subscribeLiftTarget (heightIn)");      
    end_if;   
    
    // Read heightOut
    _pReadVariableHandle := _JSONReader.GetObjectItem(object:=_pTargetHandle, string:="heightOut");
    if _pReadVariableHandle <> nil then
      _subAGVLift.lt_heightOut := to_dint(_pReadVariableHandle^.Val_Int);
    else
      _RIWO_ERROR_MSG("Received nil pointer from JSONReader in function _subscribeLiftTarget (heightOut)");      
    end_if;   
    
    // Read loadRequired
    _pReadVariableHandle := _JSONReader.GetObjectItem(object:=_pTargetHandle, string:="loadRequired");
    if _pReadVariableHandle <> nil then
      _subAGVLift.lt_loadRequired := _pReadVariableHandle^.Val_Double$Bool;
    else
      _RIWO_ERROR_MSG("Received nil pointer from JSONReader in function _subscribeLiftTarget (loadRequired)");      
    end_if;   
    
    CntSubscribeLift += 1;
  else
    _RIWO_ERROR_MSG("Received nil pointer from JSONReader in function _subscribeLiftTarget (Parse)");
  end_if;
  
  // Delete JSON object
  _JSONWriter.Delete(_pReadHandle);
  _JSONWriter.Delete(_pReadVariableHandle);  
 
END_FUNCTION


FUNCTION MES_MQTT_Handler::_subscribeAlarm
  VAR
  	pAlarmMessageData : array[0..1000] of char;
    alarmMessageLen  : UDINT;
  END_VAR 
  
  // Get Data string
  _memset(dest:=#pAlarmMessageData[0], usByte:=0, cntr:=sizeof(pAlarmMessageData));
  alarmMessageLen := SubscribeAlarm.GetDataString(pData:=#pAlarmMessageData[0], dataLength:=sizeof(pAlarmMessageData));    

  if alarmMessageLen <> 0 then
    SubscribeAlarm.GetDataString(pData:=#pAlarmMessageData[0], dataLength:=sizeof(pAlarmMessageData)); 
  end_if;

  // Write data to string
  if #pAlarmMessageData <> NIL then
    AlarmText.WriteDataOff(udLen:=alarmMessageLen, udOff:=0, pData:=#pAlarmMessageData[0]);
  end_if;
  
  CntSubscribeAlarm += 1;
  
  // Publish status data, so it is forwarded to MES
  if PublishState.EnableMessage = TRUE then
    if PublishState.TopicState = MTS_WaitForPublishDataChange then
      _publishAGVstatus();
    end_if;
  end_if;
  
END_FUNCTION


FUNCTION MES_MQTT_Handler::_handleAlarmStates
 
  if _subMESOnline = FALSE then
    if _Alarm_Error_NoCommunication.ClassSvr = false then
      //_Alarm_Error_NoCommunication.SetActive();
    end_if;
  end_if;
  
END_FUNCTION


FUNCTION MES_MQTT_Handler::_handleAlarmResets
  
  if _Alarm_Error_NoCommunication.ResetReq = TRUE then
    _Alarm_Error_NoCommunication.SetInActive(); 
  end_if;
  
END_FUNCTION
