//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "MainLiftControl"
	Revision           = "0.0"
	GUID               = "{E8F28049-3D1F-4B82-8668-DE1F1A9DC4E3}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(660,180)">
	<Channels>
		<Server Name="ActualHeight" GUID="{8618613F-3F1A-4AE9-8255-B53ACB53D21A}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="SetHeight" GUID="{0531612E-809B-4D93-96F2-6A8D81648C0F}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="SetSpeed" GUID="{371F702B-4332-4707-884B-5FD7135431A6}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="State" GUID="{2BF5462F-5109-4368-867B-0D4F36B3AED8}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Client Name="ActuValveDown" Required="true" Internal="false"/>
		<Client Name="ActuValveUp" Required="true" Internal="false"/>
		<Client Name="AgvConfig" Required="true" Internal="false"/>
		<Client Name="AgvSettings" Required="true" Internal="false"/>
		<Client Name="Ain_AnalogPosition" Required="true" Internal="false"/>
		<Client Name="I_Lift" Required="true" Internal="true"/>
		<Client Name="SensorMaxHeight" Required="false" Internal="false"/>
		<Client Name="SensorMinHeight" Required="true" Internal="false"/>
		<Client Name="Speed" Required="true" Internal="false"/>
	</Channels>
	<Network Name="MainLiftControl">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "_base"
				GUID       = "{AAF26A40-BEB0-4BF7-8142-F690E7FBD02A}"
				Class      = "PeripheralsBase"
				Position   = "(218,120)"
				Visualized = "false">
				<Channels>
					<Server Name="ToObject"/>
					<Client Name="op_LogData"/>
					<Client Name="p_NextObject"/>
				</Channels>
			</Object>
			<Object
				Name       = "I_Lift"
				GUID       = "{E26D8194-2357-4E3D-85F3-2B210961C2C6}"
				Class      = "I_Lift"
				Position   = "(210,390)"
				Visualized = "false">
				<Channels>
					<Server Name="ActualHeight"/>
					<Server Name="ClassSvr"/>
					<Server Name="SetHeight"/>
					<Server Name="SetSpeed"/>
					<Server Name="State"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.ToObject" Destination="_base.ToObject" Vertices="(976,210),(804,210),"/>
			<Connection Source="_base.op_LogData" Destination="this.op_LogData" Vertices="(218,210),(38,210),"/>
			<Connection Source="_base.p_NextObject" Destination="this.p_NextObject" Vertices="(218,270),(38,270),"/>
			<Connection Source="this.I_Lift" Destination="I_Lift.ClassSvr"/>
			<Connection Source="this.ActualHeight" Destination="I_Lift.ActualHeight" Vertices="(976,330),(796,540),"/>
			<Connection Source="this.SetHeight" Destination="I_Lift.SetHeight" Vertices="(976,390),(796,600),"/>
			<Connection Source="this.SetSpeed" Destination="I_Lift.SetSpeed" Vertices="(976,450),(796,660),"/>
			<Connection Source="this.State" Destination="I_Lift.State" Vertices="(976,510),(796,720),"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
#pragma using PeripheralsBase

MainLiftControl : CLASS
: PeripheralsBase
  //Servers:
	ActualHeight 	: SvrCh_DINT;
	SetHeight 	: SvrCh_DINT;
	SetSpeed 	: SvrCh_DINT;
	State 	: SvrCh_LiftState_PTofCls_I_Lift;
  //Clients:
	I_Lift 	: CltChCmd_I_Lift;
	AgvConfig 	: CltChCmd_AgvConfig;
	AgvSettings 	: CltCh_DINT;
	Ain_AnalogPosition 	: CltCh_DINT;
	SensorMaxHeight 	: CltCh_DINT;
	SensorMinHeight 	: CltCh_DINT;
	ActuValveUp 	: CltCh_DINT;
	ActuValveDown 	: CltCh_DINT;
	Speed 	: CltCh_DINT;
  //Variables:
		ConnectionMaxHeightSensor 	: ^CHAR;
		Stepper 	: DINT;
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL HandleOperational
		VAR_OUTPUT
			RetValue 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Handleconfiguration
		VAR_OUTPUT
			RetValue 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL HandleGetSettings
		VAR_OUTPUT
			RetValue 	: DINT;
		END_VAR;
	
	FUNCTION GetConfigSettings;
	
	FUNCTION GetSettings;
	
	FUNCTION VIRTUAL GLOBAL ActualHeight::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL SetHeight::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL SetSpeed::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL State::Read
		VAR_OUTPUT
			output (EAX) 	: I_Lift::LiftState;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma using I_Lift
#pragma usingLtd AgvConfig


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB MainLiftControl::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_MAINLIFTCONTROL
0$UINT, 0$UINT, (SIZEOF(::MainLiftControl))$UINT, 
4$UINT, 9$UINT, 0$UINT, 
TO_UDINT(1395773024), "MainLiftControl", //Class
TO_UDINT(480875673), "PeripheralsBase", 0$UINT, 0$UINT, //Baseclass
//Servers:
(::MainLiftControl.ActualHeight.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3311943233), "ActualHeight", 
(::MainLiftControl.SetHeight.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2940660506), "SetHeight", 
(::MainLiftControl.SetSpeed.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(33026088), "SetSpeed", 
(::MainLiftControl.State.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1422331979), "State", 
//Clients:
(::MainLiftControl.I_Lift.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(1199214265), "I_Lift", TO_UDINT(1199214265), "I_Lift", 0$UINT, 0$UINT, 
(::MainLiftControl.AgvConfig.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(3641531850), "AgvConfig", TO_UDINT(3641531850), "AgvConfig", 0$UINT, 0$UINT, 
(::MainLiftControl.AgvSettings.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(1195094022), "AgvSettings", 
(::MainLiftControl.Ain_AnalogPosition.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(116367619), "Ain_AnalogPosition", 
(::MainLiftControl.SensorMaxHeight.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(391493714), "SensorMaxHeight", 
(::MainLiftControl.SensorMinHeight.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(3233679891), "SensorMinHeight", 
(::MainLiftControl.ActuValveUp.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(371618052), "ActuValveUp", 
(::MainLiftControl.ActuValveDown.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(2583098308), "ActuValveDown", 
(::MainLiftControl.Speed.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(4168236102), "Speed", 
END_FUNCTION


#define USER_CNT_MainLiftControl 19

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_MainLiftControl] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION MainLiftControl::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
		nCmdSize	: UINT;
	END_VAR

	ret_code	:= PeripheralsBase::@STD();
	IF ret_code <> C_OK THEN
		RETURN;
	END_IF;
	nCmdSize		:= WewoBase::ToObject.pMeth^.nCmds$UINT*SIZEOF(pVoid) + CMDMETH.Init;

	_memcpy((#vmt.CmdTable)$^USINT, WewoBase::ToObject.pMeth, nCmdSize);
	vmt.CmdTable.nCmds		:= nSTDCMD + USER_CNT_MainLiftControl;
#pragma warning (disable : 74)
	vmt.UserFcts[15]		:= #HandleOperational();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[16]		:= #Handleconfiguration();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[17]		:= #HandleGetSettings();

#pragma warning (default : 74)
	WewoBase::ToObject.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF WewoBase::ToObject.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	ActualHeight.pMeth			:= StoreMethod( #ActualHeight::Read(), #M_NO_F() );
	IF ActualHeight.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	SetHeight.pMeth			:= StoreMethod( #SetHeight::Read(), #M_NO_F() );
	IF SetHeight.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	SetSpeed.pMeth			:= StoreMethod( #SetSpeed::Read(), #M_NO_F() );
	IF SetSpeed.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	State.pMeth			:= StoreMethod( #State::Read(), #M_NO_F() );
	IF State.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION


FUNCTION VIRTUAL GLOBAL MainLiftControl::ActualHeight::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

	ActualHeight := I_Lift.ActualHeight.Read();
	output := ActualHeight;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL MainLiftControl::SetHeight::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

	SetHeight := I_Lift.SetHeight.Read();
	output := SetHeight;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL MainLiftControl::SetSpeed::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

	SetSpeed := I_Lift.SetSpeed.Read();
	output := SetSpeed;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL MainLiftControl::State::Read
	VAR_OUTPUT
		output (EAX) 	: I_Lift::LiftState;
	END_VAR

	State := I_Lift.State.Read();
	output := State;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL MainLiftControl::HandleOperational
	VAR_OUTPUT
		RetValue 	: DINT;
	END_VAR

END_FUNCTION


FUNCTION VIRTUAL GLOBAL MainLiftControl::Handleconfiguration
	VAR_OUTPUT
		RetValue 	: DINT;
	END_VAR
    
    RetValue := False;;
    
    case Stepper of
        
        0:
                 GetConfigSettings();
                Stepper += 1;
        1:
              SensorMaxHeight := SensorMaxHeight.Read();
        
                // RetValue := true;
      end_case;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL MainLiftControl::HandleGetSettings
	VAR_OUTPUT
		RetValue 	: DINT;
	END_VAR
    
    

END_FUNCTION


FUNCTION MainLiftControl::GetConfigSettings


// Use sensor and make connection with hardware


// Get config
ConnectionMaxHeightSensor := AgvConfig.GetStringValue(Path:="AGV.Peripherals.BasicActuator.Connection.SensorMaxHeight");


// Set connection's
if ConnectionMaxHeightSensor<> nil then
   ConnectClientChannels(ConnectionMaxHeightSensor);
end_if;

END_FUNCTION


FUNCTION MainLiftControl::GetSettings

END_FUNCTION
