//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "RiwoDateTime"
	Revision           = "0.10"
	GUID               = "{EDAD1C96-2A2C-4F6A-9C1E-EC4E1A9F79B5}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	DefCyclictime      = "1000 ms"
	BackgroundTask     = "true"
	DefBackground      = "1000 ms"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	IconPath           = ".\Class\RiwoDefine\RiwoIcon.ico"
	SharedCommandTable = "true"
	Objectsize         = "(630,900)">
	<Channels>
		<Server Name="ClassSvr" GUID="{BF42B3DF-1D4A-4922-AFD4-3DD6CE556DAA}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="DlsActivated" GUID="{AA72BA03-4FC2-4179-A620-C5750651825D}" Visualized="true" Initialize="true" DefValue="1" WriteProtected="false" Retentive="SRam" Comment="0 = Calculate local time only by UTC offset&#13;&#10;1 = Calculate local time with DLS and UTC offset"/>
		<Server Name="DlsCalculateType" GUID="{78BE6642-6967-47D8-8328-574EC3B2E0F6}" Visualized="true" Initialize="true" DefValue="RiwoDateTime::tDLSTimeType::CalculateByUTCTime" WriteProtected="false" Retentive="SRam" Comment="0 = Calculate with UTC time&#13;&#10;1 = Calculate with local time"/>
		<Server Name="DlsEndDay" GUID="{7EAC0D73-D172-41EB-91A8-B72BCFF41B80}" Visualized="true" Initialize="true" DefValue="RiwoDateTime::tDLSday::DayOfWeek_Sunday" WriteProtected="false" Retentive="SRam" Comment="0 = Sunday&#13;&#10;1 = Monday&#13;&#10;2 = Tuesday&#13;&#10;3 = Wednesday&#13;&#10;4 = Thursday&#13;&#10;5 = Friday&#13;&#10;6 =Saturday "/>
		<Server Name="DlsEndHour" GUID="{A751012C-3B66-46F5-B644-5058A1F4F9B5}" Visualized="true" Initialize="true" DefValue="1" WriteProtected="false" Retentive="SRam"/>
		<Server Name="DlsEndMonth" GUID="{590B1D78-269C-423D-8447-A0CFE33F179D}" Visualized="true" Initialize="true" DefValue="10" WriteProtected="false" Retentive="SRam"/>
		<Server Name="DlsEndWeek" GUID="{3112A140-6A7D-4AC7-8BF5-080B1483F89A}" Visualized="true" Initialize="true" DefValue="RiwoDateTime::tDLSWeekOption::LastWeekOfTheMonth" WriteProtected="false" Retentive="SRam" Comment="0 =First week of the month&#13;&#10;1 = Second week of the month&#13;&#10;2 = Third week of the month&#13;&#10;3 = Fourth week of the month&#13;&#10;4 = Last week of the month"/>
		<Server Name="DlsNowActive" GUID="{190C0748-C332-4145-8CA4-966886346786}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="SRam" Comment="DLS is now active"/>
		<Server Name="DlsStartDay" GUID="{48C09DCD-1C38-4ECC-B767-DFD2C3CE8AC0}" Visualized="true" Initialize="true" DefValue="RiwoDateTime::tDLSday::DayOfWeek_Sunday" WriteProtected="false" Retentive="SRam" Comment="0 = Sunday&#13;&#10;1 = Monday&#13;&#10;2 = Tuesday&#13;&#10;3 = Wednesday&#13;&#10;4 = Thursday&#13;&#10;5 = Friday&#13;&#10;6 =Saturday "/>
		<Server Name="DlsStartHour" GUID="{055241A6-DBFC-428C-B34A-9B9CC4E02AC9}" Visualized="true" Initialize="true" DefValue="1" WriteProtected="false" Retentive="SRam"/>
		<Server Name="DlsStartMonth" GUID="{2793F2AA-32DE-43A8-9A42-9FEFAB77ABFA}" Visualized="true" Initialize="true" DefValue="3" WriteProtected="false" Retentive="SRam"/>
		<Server Name="DlsStartWeek" GUID="{41769E19-F76B-401C-BE44-F64A51CBCF73}" Visualized="true" Initialize="true" DefValue="RiwoDateTime::tDLSWeekOption::LastWeekOfTheMonth" WriteProtected="false" Retentive="SRam" Comment="0 =First week of the month&#13;&#10;1 = Second week of the month&#13;&#10;2 = Third week of the month&#13;&#10;3 = Fourth week of the month&#13;&#10;4 = Last week of the month"/>
		<Server Name="LocalDate" GUID="{042F75F0-0BDE-4DF3-B5ED-4170EC77FA72}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="LocalTime" GUID="{44B1C1A5-EC43-4C7D-AECB-5334BB79B128}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="UtcDate" GUID="{5971A87F-7F49-460F-AAAF-4110E6068B44}" Visualized="true" Remotely="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="3. and 4. Byte Year, 2.Byte H =&gt; Month, 1.Byte H &amp; 2.Byte L =&gt; Day, 1.Byte L =&gt; Day of Week"/>
		<Server Name="UtcDay" GUID="{6917031A-4CEE-4097-B84A-0BAE47C2D11A}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="UtcDayOfWeek" GUID="{4A539873-09AC-43A2-A6CA-BB0FA168E05A}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="UtcHour" GUID="{855DB551-A9F0-4748-AAAB-9B2BAE48FD31}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="UtcMinute" GUID="{2004E9E9-51AB-47F4-8FDC-A00329F3A361}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="UtcMonth" GUID="{9313ABB9-39B6-496B-AEB8-01751780AB6C}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="UtcOffsetMinutes" GUID="{D72E0FE1-431A-4DCD-9F85-A89959CFBDE4}" Visualized="true" Initialize="true" DefValue="4" WriteProtected="false" Retentive="SRam" Comment="UTC offset (to local time) in minutes [m]"/>
		<Server Name="UtcSecond" GUID="{8352CD40-E854-4B7E-8927-EEC3BFB957D2}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="UtcTime" GUID="{EB873F2F-1026-442D-A626-C2DB2B602885}" Visualized="true" Remotely="true" Initialize="false" WriteProtected="false" Retentive="false" Comment="4.Byte =&gt; h, 3.Byte =&gt; min, 2.Byte =&gt; sec, 1.Byte =&gt; 0"/>
		<Server Name="UtcYear" GUID="{F1D4E029-288C-441F-BE69-754E796F62F9}" Visualized="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Client Name="objRiwoDateTimeLib" Required="true" Internal="false"/>
		<Client Name="system" Required="false" Internal="false"/>
	</Channels>
	<Separators>
		<Servers>
			<SepChn Position="13"/>
			<SepChn Position="10"/>
		</Servers>
	</Separators>
	<Dependencies>
		<Files>
			<File Path=".\Class\RiwoDefine\RiwoDef.h" Include="false"/>
		</Files>
	</Dependencies>
	<RevDoku>
		<Owner Company="Riwo Engineering B.V." Author="Rick Hofsink"/>
		<Dokumentation Revision="0.10" Date="2019-07-12" Author="Ruud Arkink" Company="Riwo Engineering B.V." Description="Moved temporary var &quot;plcType&quot; to local var.&quot;_plcType&quot; In this way all dependencies will be added correctly."/>
		<Dokumentation Revision="0.9" Date="2019-06-04" Author="Rick Hofsink" Company="Riwo Engineering B.V." Description="- Function Convert_Local_to_UTC did not set the output correct because the minutesOverlow were added instaed of subtracted"/>
		<Dokumentation Revision="0.8" Date="2019-05-09" Author="Rick Hofsink" Company="Riwo Engineering B.V." Description="- Function _setUtcTime() did not set the correct UTC date because the day of the week was missing"/>
		<Dokumentation Revision="0.7" Date="2019-04-27" Author="Rick Hofsink" Company="Riwo Engineering B.V." Description="- Removed SysDateTime from complex network, use the system client instead"/>
		<Dokumentation Revision="0.6" Date="2019-01-24" Author="Rick Hofsink" Company="Riwo Engineering B.V." Description="- UtcOffsetQuarters changed in UtcOffsetMinutes&#13;&#10;- Singleton active"/>
		<Dokumentation Revision="0.5&#13;&#10;" Date="2019-01-22" Author="Rick Hofsink" Company="Riwo Engineering B.V." Description="- Check when running in simulation (Lars)&#13;&#10;- Better handling of DLS, not active when set off&#13;&#10;- Convert UTC to local (and back) checks DLS time on the input date and time&#13;&#10;- Better coding"/>
		<Dokumentation Revision="0.4" Date="2018-04-24" Author="Rick Hofsink" Company="Riwo Engineering B.V." Description="Solved some small problems"/>
		<Dokumentation Revision="0.3" Date="2018-04-24" Author="Rick Hofsink" Company="Riwo Engineering B.V." Description="- _updateTime() correct implementation&#13;&#10;- Write actions on UtcDate and UtcTime servers"/>
		<Dokumentation Revision="0.2" Date="2017-10-25" Author="Rick Hofsink" Company="Riwo Engineering B.V." Description="- Moved the _timeOverflow function to the RiwoDateTimeLib class&#13;&#10;- Make the type DAT_DateTime publib"/>
		<Dokumentation Revision="0.1" Date="2014-05-28" Author="Rick Hofsink" Company="Riwo Engineering B.V." Description="Import from Sieplo, modified, tested at Emsflower"/>
	</RevDoku>
</Class>
*)
RiwoDateTime : CLASS
	TYPE
#pragma pack(push, 1)
	  tDAT_DateAndTime : STRUCT  //! <Type Public="true" Name="tDAT_DateAndTime"/>
	    DAT_Date : SYSDATE;
	    DAT_Time : SYSTIME;
	  END_STRUCT;
#pragma pack(pop)
	  tDLSday :  //! <Type Public="true" Name="tDLSday"/>
	  (
	    DayOfMonth_1:=1,
	    DayOfMonth_2:=2,
	    DayOfMonth_3:=3,
	    DayOfMonth_4:=4,
	    DayOfMonth_5:=5,
	    DayOfMonth_6:=6,
	    DayOfMonth_7:=7,
	    DayOfMonth_8:=8,
	    DayOfMonth_9:=9,
	    DayOfMonth_10:=10,
	    DayOfMonth_11:=11,
	    DayOfMonth_12:=12,
	    DayOfMonth_13:=13,
	    DayOfMonth_14:=14,
	    DayOfMonth_15:=15,
	    DayOfMonth_16:=16,
	    DayOfMonth_17:=17,
	    DayOfMonth_18:=18,
	    DayOfMonth_19:=19,
	    DayOfMonth_20:=20,
	    DayOfMonth_21:=21,
	    DayOfMonth_22:=22,
	    DayOfMonth_23:=23,
	    DayOfMonth_24:=24,
	    DayOfMonth_25:=25,
	    DayOfMonth_26:=26,
	    DayOfMonth_27:=27,
	    DayOfMonth_28:=28,
	    DayOfMonth_29:=29,
	    DayOfMonth_30:=30,
	    DayOfMonth_31:=31,
	    DayOfWeek_Sunday:=100,
	    DayOfWeek_Monday:=101,
	    DayOfWeek_Tuesday:=102,
	    DayOfWeek_Wednesday:=103,
	    DayOfWeek_Thursday:=104,
	    DayOfWeek_Friday:=105,
	    DayOfWeek_Saturday:=106
	  )$UDINT;
	  tDLSTimeType :  //! <Type Public="true" Name="tDLSTimeType"/>
	  (
	    CalculateByUTCTime,
	    CalculateByLocalTime,
	    CalculateByUTCFixedDate,
	    CalculateByLocalFixedDate
	  )$UDINT;
	  tDLSWeekOption :  //! <Type Public="true" Name="tDLSWeekOption"/>
	  (
	    FirstWeekOfTheMonth:=0,
	    SecondWeekOfTheMonth:=1,
	    ThirdWeekOfTheMonth:=2,
	    FourthWeekOfTheMonth:=3,
	    LastWeekOfTheMonth:=4
	  )$UDINT;
	END_TYPE
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
	UtcDate 	: SvrCh_DATE_LSL;
	UtcTime 	: SvrCh_TIME_LSL;
	UtcDayOfWeek 	: SvrCh_DINT;
	UtcYear 	: SvrCh_DINT;
	UtcMonth 	: SvrCh_DINT;
	UtcDay 	: SvrCh_DINT;
	UtcHour 	: SvrCh_DINT;
	UtcMinute 	: SvrCh_DINT;
	UtcSecond 	: SvrCh_DINT;
	LocalDate 	: SvrCh_DATE_LSL;
	LocalTime 	: SvrCh_TIME_LSL;
	UtcOffsetMinutes 	: SvrCh_DINT;
	DlsActivated 	: SvrCh_DINT;
	DlsNowActive 	: SvrCh_DINT;
	DlsCalculateType 	: SvrCh_tDLSTimeType_PTofCls_RiwoDateTime;
	DlsStartWeek 	: SvrCh_tDLSWeekOption_PTofCls_RiwoDateTime;
	DlsStartDay 	: SvrCh_tDLSday_PTofCls_RiwoDateTime;
	DlsStartMonth 	: SvrCh_UDINT;
	DlsStartHour 	: SvrCh_UDINT;
	DlsEndWeek 	: SvrCh_tDLSWeekOption_PTofCls_RiwoDateTime;
	DlsEndDay 	: SvrCh_tDLSday_PTofCls_RiwoDateTime;
	DlsEndMonth 	: SvrCh_UDINT;
	DlsEndHour 	: SvrCh_UDINT;
  //Clients:
	objRiwoDateTimeLib 	: CltChCmd_RiwoDateTimeLib;
	system 	: CltChCmd_System;
  //Variables:
		_initCounter 	: DINT;
		_startup 	: BOOL;
		_utcTimeAndDate 	: tDAT_DateAndTime;
		_localTimeAndDate 	: tDAT_DateAndTime;
		_dlsStart 	: tDAT_DateAndTime;
		_dlsEnd 	: tDAT_DateAndTime;
		_lastCalculatedDls 	: UDINT;
		_lastSwitchedDls 	: UDINT;
		_checkDlsTime 	: UDINT;
		_runningInLars 	: BOOL;
		_dlsStartDate 	: HDINT;
		_dlsStartTime 	: HDINT;
		_dlsEndDate 	: HDINT;
		_dlsEndTime 	: HDINT;
		_plcType 	: DM_CPU_Types;
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL Init;
	
	FUNCTION VIRTUAL GLOBAL Background
		VAR_INPUT
			EAX 	: UDINT;
		END_VAR
		VAR_OUTPUT
			state (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION _setUtcTime;
	
	FUNCTION _localTimeCalc;
	
	FUNCTION _checkDLS;
	
	FUNCTION _updateTime;
	
	FUNCTION _updateDate;
	
	FUNCTION _calculateDLS
		VAR_INPUT
			CalcYear 	: DINT;
		END_VAR;
	
	FUNCTION GLOBAL Convert_UTC_to_Local
		VAR_INPUT
			InputDateTime 	: tDAT_DateAndTime;
		END_VAR
		VAR_OUTPUT
			OutputDateTime 	: tDAT_DateAndTime;
		END_VAR;
	
	FUNCTION GLOBAL Convert_Local_to_UTC
		VAR_INPUT
			InputDateTime 	: tDAT_DateAndTime;
		END_VAR
		VAR_OUTPUT
			OutputDateTime 	: tDAT_DateAndTime;
		END_VAR;
	
	FUNCTION GLOBAL GetUTCdateTime
		VAR_OUTPUT
			DateTime 	: tDAT_DateAndTime;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL UtcDate::Write
		VAR_INPUT
			input (EAX) 	: DATE_LSL;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DATE_LSL;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL UtcTime::Write
		VAR_INPUT
			input (EAX) 	: TIME_LSL;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: TIME_LSL;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL UtcYear::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL UtcMonth::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL UtcDay::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL UtcHour::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL UtcMinute::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL UtcSecond::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL LocalDate::Write
		VAR_INPUT
			input (EAX) 	: DATE_LSL;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DATE_LSL;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL LocalTime::Write
		VAR_INPUT
			input (EAX) 	: TIME_LSL;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: TIME_LSL;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL DlsActivated::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL DlsCalculateType::Write
		VAR_INPUT
			input (EAX) 	: RiwoDateTime::tDLSTimeType;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: RiwoDateTime::tDLSTimeType;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL DlsStartWeek::Write
		VAR_INPUT
			input (EAX) 	: RiwoDateTime::tDLSWeekOption;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: RiwoDateTime::tDLSWeekOption;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL DlsStartDay::Write
		VAR_INPUT
			input (EAX) 	: RiwoDateTime::tDLSday;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: RiwoDateTime::tDLSday;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL DlsStartMonth::Write
		VAR_INPUT
			input (EAX) 	: UDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL DlsStartHour::Write
		VAR_INPUT
			input (EAX) 	: UDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL DlsEndWeek::Write
		VAR_INPUT
			input (EAX) 	: RiwoDateTime::tDLSWeekOption;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: RiwoDateTime::tDLSWeekOption;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL DlsEndDay::Write
		VAR_INPUT
			input (EAX) 	: RiwoDateTime::tDLSday;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: RiwoDateTime::tDLSday;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL DlsEndMonth::Write
		VAR_INPUT
			input (EAX) 	: UDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL DlsEndHour::Write
		VAR_INPUT
			input (EAX) 	: UDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: UDINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma usingLtd RiwoDateTimeLib
#pragma usingLtd System


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB RiwoDateTime::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_RIWODATETIME
0$UINT, 10$UINT, (SIZEOF(::RiwoDateTime))$UINT, 
24$UINT, 2$UINT, 0$UINT, 
TO_UDINT(1821503902), "RiwoDateTime", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::RiwoDateTime.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
(::RiwoDateTime.UtcDate.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3649205444), "UtcDate", 
(::RiwoDateTime.UtcTime.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(478731259), "UtcTime", 
(::RiwoDateTime.UtcDayOfWeek.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3621096274), "UtcDayOfWeek", 
(::RiwoDateTime.UtcYear.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3365810313), "UtcYear", 
(::RiwoDateTime.UtcMonth.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2574430726), "UtcMonth", 
(::RiwoDateTime.UtcDay.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(636818487), "UtcDay", 
(::RiwoDateTime.UtcHour.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(50483952), "UtcHour", 
(::RiwoDateTime.UtcMinute.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1438339039), "UtcMinute", 
(::RiwoDateTime.UtcSecond.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2372334851), "UtcSecond", 
(::RiwoDateTime.LocalDate.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3216585291), "LocalDate", 
(::RiwoDateTime.LocalTime.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2058591604), "LocalTime", 
(::RiwoDateTime.UtcOffsetMinutes.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000001000$UINT, TO_UDINT(164652422), "UtcOffsetMinutes", 
(::RiwoDateTime.DlsActivated.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000001000$UINT, TO_UDINT(1409680735), "DlsActivated", 
(::RiwoDateTime.DlsNowActive.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000001000$UINT, TO_UDINT(3430594889), "DlsNowActive", 
(::RiwoDateTime.DlsCalculateType.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000001000$UINT, TO_UDINT(4165380489), "DlsCalculateType", 
(::RiwoDateTime.DlsStartWeek.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000001000$UINT, TO_UDINT(2119211358), "DlsStartWeek", 
(::RiwoDateTime.DlsStartDay.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000001000$UINT, TO_UDINT(2156009218), "DlsStartDay", 
(::RiwoDateTime.DlsStartMonth.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000001000$UINT, TO_UDINT(2722792573), "DlsStartMonth", 
(::RiwoDateTime.DlsStartHour.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000001000$UINT, TO_UDINT(1427431888), "DlsStartHour", 
(::RiwoDateTime.DlsEndWeek.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000001000$UINT, TO_UDINT(1431134137), "DlsEndWeek", 
(::RiwoDateTime.DlsEndDay.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000001000$UINT, TO_UDINT(689857208), "DlsEndDay", 
(::RiwoDateTime.DlsEndMonth.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000001000$UINT, TO_UDINT(2618289760), "DlsEndMonth", 
(::RiwoDateTime.DlsEndHour.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000001000$UINT, TO_UDINT(2114529079), "DlsEndHour", 
//Clients:
(::RiwoDateTime.objRiwoDateTimeLib.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(3976675001), "objRiwoDateTimeLib", TO_UDINT(1116381182), "RiwoDateTimeLib", 0$UINT, 3$UINT, 
(::RiwoDateTime.system.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000000$UINT, TO_UDINT(968218125), "system", TO_UDINT(968218125), "System", 0$UINT, 1$UINT, 
END_FUNCTION


#define USER_CNT_RiwoDateTime 1

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_RiwoDateTime] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION RiwoDateTime::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_RiwoDateTime, pCmd := #vmt.CmdTable);
	vmt.CmdTable.Init		:= #Init();
#pragma warning (disable : 74)
	vmt.UserFcts[0]		:= #Background();

#pragma warning (default : 74)
	ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	UtcDate.pMeth			:= StoreMethod( #M_RD_DIRECT(), #UtcDate::Write() );
	IF UtcDate.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	UtcTime.pMeth			:= StoreMethod( #M_RD_DIRECT(), #UtcTime::Write() );
	IF UtcTime.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	UtcYear.pMeth			:= StoreMethod( #M_RD_DIRECT(), #UtcYear::Write() );
	IF UtcYear.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	UtcMonth.pMeth			:= StoreMethod( #M_RD_DIRECT(), #UtcMonth::Write() );
	IF UtcMonth.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	UtcDay.pMeth			:= StoreMethod( #M_RD_DIRECT(), #UtcDay::Write() );
	IF UtcDay.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	UtcHour.pMeth			:= StoreMethod( #M_RD_DIRECT(), #UtcHour::Write() );
	IF UtcHour.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	UtcMinute.pMeth			:= StoreMethod( #M_RD_DIRECT(), #UtcMinute::Write() );
	IF UtcMinute.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	UtcSecond.pMeth			:= StoreMethod( #M_RD_DIRECT(), #UtcSecond::Write() );
	IF UtcSecond.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	LocalDate.pMeth			:= StoreMethod( #M_RD_DIRECT(), #LocalDate::Write() );
	IF LocalDate.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	LocalTime.pMeth			:= StoreMethod( #M_RD_DIRECT(), #LocalTime::Write() );
	IF LocalTime.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	UtcOffsetMinutes.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF UtcOffsetMinutes.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	DlsActivated.pMeth			:= StoreMethod( #M_RD_DIRECT(), #DlsActivated::Write() );
	IF DlsActivated.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	DlsNowActive.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF DlsNowActive.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	DlsCalculateType.pMeth			:= StoreMethod( #M_RD_DIRECT(), #DlsCalculateType::Write() );
	IF DlsCalculateType.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	DlsStartWeek.pMeth			:= StoreMethod( #M_RD_DIRECT(), #DlsStartWeek::Write() );
	IF DlsStartWeek.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	DlsStartDay.pMeth			:= StoreMethod( #M_RD_DIRECT(), #DlsStartDay::Write() );
	IF DlsStartDay.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	DlsStartMonth.pMeth			:= StoreMethod( #M_RD_DIRECT(), #DlsStartMonth::Write() );
	IF DlsStartMonth.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	DlsStartHour.pMeth			:= StoreMethod( #M_RD_DIRECT(), #DlsStartHour::Write() );
	IF DlsStartHour.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	DlsEndWeek.pMeth			:= StoreMethod( #M_RD_DIRECT(), #DlsEndWeek::Write() );
	IF DlsEndWeek.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	DlsEndDay.pMeth			:= StoreMethod( #M_RD_DIRECT(), #DlsEndDay::Write() );
	IF DlsEndDay.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	DlsEndMonth.pMeth			:= StoreMethod( #M_RD_DIRECT(), #DlsEndMonth::Write() );
	IF DlsEndMonth.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	DlsEndHour.pMeth			:= StoreMethod( #M_RD_DIRECT(), #DlsEndHour::Write() );
	IF DlsEndHour.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION
FUNCTION VIRTUAL GLOBAL RiwoDateTime::Init

  _initCounter += 1;

  if (_initCounter = INIT_CYCLE_6) then

    _plcType$UDINT	:= _WhoAMI;

    case _plcType of

      WINPC_CPU, WIN_PC98_CPU, WINPC_NT_CPU, WINIPC_98_CPU, WINIPC_NT_CPU, StandardPC_CPU:
        _runningInLars := TRUE;

      else
        _runningInLars := FALSE;

    end_case;

  end_if;

END_FUNCTION



FUNCTION VIRTUAL GLOBAL RiwoDateTime::Background
	VAR_INPUT
		EAX 	: UDINT;
	END_VAR
	VAR_OUTPUT
		state (EAX) : UDINT;
	END_VAR

  _setUtcTime();
  _localTimeCalc();

  state := READY;

END_FUNCTION



FUNCTION GLOBAL RiwoDateTime::Convert_UTC_to_Local
	VAR_INPUT
		InputDateTime 	: tDAT_DateAndTime;
	END_VAR
	VAR_OUTPUT
		OutputDateTime 	: tDAT_DateAndTime;
	END_VAR
  VAR
  	minutesOverflow : DINT;
    dateInput       : HDINT;
    timeInput       : HDINT;
  END_VAR

  MinutesOverflow := 0;

  dateInput := objRiwoDateTimeLib.Convert_Date_to_HDINT(InputDateTime.DAT_Date);
  timeInput := objRiwoDateTimeLib.Convert_Time_to_HDINT(InputDateTime.DAT_Time);

  if (DlsActivated = TRUE) then

    // Add 60 minutes (1 hour) to the time when input date and time is between start en end of DLS
    if ((dateInput and 16#0000FFFF) > (_dlsStartDate and 16#0000FFFF)) & ((dateInput and 16#0000FFFF) < (_dlsEndDate and 16#0000FFFF)) then
      minutesOverflow += 60;
    elsif ((dateInput and 16#0000FFFF) = (_dlsStartDate and 16#0000FFFF)) & (timeInput > _dlsStartTime) then
      minutesOverflow += 60;
    elsif ((dateInput and 16#0000FFFF) = (_dlsEndDate and 16#0000FFFF)) & (timeInput < _dlsEndTime) then
      minutesOverflow += 60;
    end_if;

  end_if;

  minutesOverflow += UtcOffsetMinutes;

  IF (minutesOverflow <> 0) THEN
    OutputDateTime := objRiwoDateTimeLib.TimeOverflow(InputDateTime, minutesOverflow);
  ELSE
    OutputDateTime := InputDateTime;
  END_IF;

END_FUNCTION



FUNCTION GLOBAL RiwoDateTime::Convert_Local_to_UTC
	VAR_INPUT
		InputDateTime 	: tDAT_DateAndTime;
	END_VAR
	VAR_OUTPUT
		OutputDateTime 	: tDAT_DateAndTime;
	END_VAR
  VAR
  	minutesOverflow : DINT;
    dateInput       : HDINT;
    timeInput       : HDINT;
  END_VAR

  MinutesOverflow := 0;

  dateInput := objRiwoDateTimeLib.Convert_Date_to_HDINT(InputDateTime.DAT_Date);
  timeInput := objRiwoDateTimeLib.Convert_Time_to_HDINT(InputDateTime.DAT_Time);

  if (DlsActivated = TRUE) then

    // Add 60 minutes (1 hour) to the time when input date and time is between start en end of DLS
    if ((dateInput and 16#0000FFFF) > (_dlsStartDate and 16#0000FFFF)) & ((dateInput and 16#0000FFFF) < (_dlsEndDate and 16#0000FFFF)) then
      minutesOverflow -= 60;
    elsif ((dateInput and 16#0000FFFF) = (_dlsStartDate and 16#0000FFFF)) & (timeInput > _dlsStartTime) then
      minutesOverflow -= 60;
    elsif ((dateInput and 16#0000FFFF) = (_dlsEndDate and 16#0000FFFF)) & (timeInput < _dlsEndTime) then
      minutesOverflow -= 60;
    end_if;

  end_if;

  MinutesOverflow -= UtcOffsetMinutes;

  IF (MinutesOverflow <> 0) THEN
    OutputDateTime := objRiwoDateTimeLib.TimeOverflow(InputDateTime, MinutesOverflow);
  ELSE
    OutputDateTime := InputDateTime;
  END_IF;

END_FUNCTION



FUNCTION GLOBAL RiwoDateTime::GetUTCdateTime
	VAR_OUTPUT
		DateTime 	: tDAT_DateAndTime;
	END_VAR

  DateTime := _utcTimeAndDate;

END_FUNCTION



FUNCTION RiwoDateTime::_setUtcTime
  VAR
    tme : SYSTIME;  
    dte : SYSDATE;
    tmp  : UDINT;  
  END_VAR

  objRiwoDateTimeLib.GetTime(pTime:=#tme);
  objRiwoDateTimeLib.GetDate(pDate:=#dte);

  tmp     := tme.wHour and 16#FF;
  tmp     := (tmp shl 8) or (tme.wMinute and 16#FF); 
  tmp     := (tmp shl 8) or (tme.wSecond and 16#FF);
  UtcTime := (tmp shl 8); 

  tmp     := dte.wYear; 
  tmp     := (tmp shl 4) or dte.wMonth; 
  tmp     := (tmp shl 8) or dte.wDay;
  tmp     := (tmp shl 4);
  tmp     := tmp or (objRiwoDateTimeLib.GetDayOfWeek(tmp))$UDINT;
  UtcDate := tmp;

  UtcHour := tme.wHour;
  UtcMinute := tme.wMinute;
  UtcSecond := tme.wSecond;

  UtcDay := dte.wDay;
  UtcMonth := dte.wMonth;
  UtcYear := dte.wYear;
  UtcDayOfWeek := dte.wDayOfWeek;

  _utcTimeAndDate.DAT_Date := dte;
  _utcTimeAndDate.DAT_Time := tme;

END_FUNCTION



FUNCTION RiwoDateTime::_localTimeCalc

  // Calculate DLS switch on and off times every 10 days or after startup
  IF ((ops.tAbsolute > 2000) & (_startup = FALSE)) | ((ops.tAbsolute - _lastCalculatedDls) > (10 * 24 HOURS)) THEN
    _calculateDLS(UtcYear);
    _startup := TRUE;
    _lastCalculatedDls := ops.tAbsolute;
  END_IF;

  // Calculate local date and time
  IF (DlsNowActive = TRUE) THEN
    _localTimeAndDate := objRiwoDateTimeLib.TimeOverflow(_utcTimeAndDate, UtcOffsetMinutes + 60);
  ELSE
    _localTimeAndDate := objRiwoDateTimeLib.TimeOverflow(_utcTimeAndDate, UtcOffsetMinutes);
  END_IF;

  // Check if DLS should be activated or not
  if ((ops.tAbsolute - _checkDlsTime) > 1 MIN) & (DlsActivated = TRUE) then
    _checkDlsTime := ops.tAbsolute;
    _checkDLS();
  end_if;

  // Calculate actual time for screen
  LocalDate := objRiwoDateTimeLib.Convert_Date_to_HDINT(Date_In:=_localTimeAndDate.DAT_Date);
  LocalTime := objRiwoDateTimeLib.Convert_Time_to_HDINT(Time_in:=_localTimeAndDate.DAT_Time);

END_FUNCTION



FUNCTION RiwoDateTime::_checkDLS
  VAR
  	StartDLS : HDINT;
  	EndDLS   : HDINT;
  	CurTime  : HDINT;
  END_VAR

  StartDLS := 0;
  EndDLS := 0;
  CurTime := 0;

  StartDLS := StartDLS OR ((_dlsStart.DAT_Date.wMonth AND 16#000000FF) SHL 24);          // 16#FF000000 Month
  StartDLS := StartDLS OR ((_dlsStart.DAT_Date.wDay AND 16#000000FF) SHL 16);            // 16#00FF0000 Day
  StartDLS := StartDLS OR ((_dlsStart.DAT_Time.wHour AND 16#000000FF) SHL 8);            // 16#0000FF00 Hour

  EndDLS := EndDLS OR ((_dlsEnd.DAT_Date.wMonth AND 16#000000FF) SHL 24);                // 16#FF000000 Month
  EndDLS := EndDLS OR ((_dlsEnd.DAT_Date.wDay AND 16#000000FF) SHL 16);                  // 16#00FF0000 Day
  EndDLS := EndDLS OR ((_dlsEnd.DAT_Time.wHour AND 16#000000FF) SHL 8);                  // 16#0000FF00 Hour

  IF (DlsCalculateType = CalculateByUTCTime) | (DlsCalculateType = CalculateByUTCFixedDate) THEN
    CurTime := CurTime OR ((_utcTimeAndDate.DAT_Date.wMonth AND 16#000000FF) SHL 24);    // 16#FF000000 Month
    CurTime := CurTime OR ((_utcTimeAndDate.DAT_Date.wDay AND 16#000000FF) SHL 16);      // 16#00FF0000 Day
    CurTime := CurTime OR ((_utcTimeAndDate.DAT_Time.wHour AND 16#000000FF) SHL 8);      // 16#0000FF00 Hour
  ELSIF (DlsCalculateType = CalculateByLocalTime) | (DlsCalculateType = CalculateByLocalFixedDate) THEN
    CurTime := CurTime OR ((_localTimeAndDate.DAT_Date.wMonth AND 16#000000FF) SHL 24);  // 16#FF000000 Month
    CurTime := CurTime OR ((_localTimeAndDate.DAT_Date.wDay AND 16#000000FF) SHL 16);    // 16#00FF0000 Day
    CurTime := CurTime OR ((_localTimeAndDate.DAT_Time.wHour AND 16#000000FF) SHL 8);    // 16#0000FF00 Hour
  END_IF;

  // Only switch once every 3 hours, therefore it doesn't toggle when switch time is set to local
  IF ((ops.tAbsolute - _lastSwitchedDls) >= 3 HOURS) THEN

    IF ((CurTime < StartDLS) | (CurTime >= EndDLS)) & (DlsNowActive = TRUE) THEN
      _lastSwitchedDls := ops.tAbsolute;
      DlsNowActive.Write(input:=FALSE);
    ELSIF (CurTime >= StartDLS) & (CurTime < EndDLS) & (DlsNowActive = FALSE)THEN
      _lastSwitchedDls := ops.tAbsolute;
      DlsNowActive.Write(input:=TRUE);
    END_IF;

  END_IF;

END_FUNCTION



FUNCTION RiwoDateTime::_updateTime
  VAR
   timeInp : SYSTIME;
  END_VAR

  timeInp.wHour   := TO_UINT UtcHour;  
  timeInp.wMinute := TO_UINT UtcMinute; 
  timeInp.wSecond := TO_UINT UtcSecond;

  if (_runningInLars = FALSE) then
    System.SetSysTime(#timeInp);
  end_if;

END_FUNCTION



FUNCTION RiwoDateTime::_updateDate
  VAR
   dateInp : SYSDATE;
  END_VAR

  dateInp.wDay       := TO_USINT(UtcDay);
  dateInp.wMonth     := TO_USINT(UtcMonth); 
  dateInp.wYear      := TO_UINT(UtcYear);

  if (_runningInLars = FALSE) then
    System.SetSysDate(#dateInp);
  end_if;

END_FUNCTION



FUNCTION RiwoDateTime::_calculateDLS
	VAR_INPUT
		CalcYear 	      : DINT;
	END_VAR
  VAR
  	StartDayNr      : UINT;
  	EndDayNr        : UINT;
    StartDaysMonth  : UINT;
    EndDaysMonth    : UINT;
  END_VAR

  IF (DlsCalculateType = CalculateByLocalTime) | (DlsCalculateType = CalculateByUTCTime) THEN

    // Calculate start and end of DayLightSavings. Days from 0 (sunday) to 6 (sateruday). Start option from 0 (1st week apearance in month) tot 3 (4th week apearance) and 4 (last week).
    StartDaysMonth := objRiwoDateTimeLib.GetDayOfMonth(month:=to_uint(DlsStartMonth), year:=to_uint(CalcYear));
    EndDaysMonth := objRiwoDateTimeLib.GetDayOfMonth(month:=to_uint(DlsEndMonth), year:=to_uint(CalcYear));
    _dlsStart.DAT_Time.wHour := TO_UINT(DlsStartHour);
    _dlsEnd.DAT_Time.wHour := TO_UINT(DlsEndHour);

    if (DlsStartWeek = LastWeekOfTheMonth) then

      StartDayNr := objRiwoDateTimeLib.GetDayOfWeekSplitsed(day:=StartDaysMonth, month:=to_uint(DlsStartMonth), year:=to_uint(CalcYear));

      _dlsStart.DAT_Date.wYear := TO_UINT(CalcYear);
      _dlsStart.DAT_Date.wMonth := TO_USINT(DlsStartMonth);

      if (((DlsStartDay)$UINT - 100) > StartDayNr) then
        _dlsStart.DAT_Date.wDay := TO_USINT(StartDaysMonth - 7 + (((DlsStartDay)$UINT - 100) - StartDayNr));
      else
        _dlsStart.DAT_Date.wDay := TO_USINT(StartDaysMonth - StartDayNr + ((DlsStartDay)$UINT - 100));
      end_if;

    else

      StartDayNr := objRiwoDateTimeLib.GetDayOfWeekSplitsed(day:=1, month:=to_uint(DlsStartMonth), year:=to_uint(CalcYear));
      _dlsStart.DAT_Date.wYear := TO_UINT(CalcYear);
      _dlsStart.DAT_Date.wMonth := TO_USINT(DlsStartMonth);

      if (((DlsStartDay)$UINT - 100) >= StartDayNr) then
        _dlsStart.DAT_Date.wDay := TO_USINT(1 + ((DlsStartDay)$UINT - 100) - StartDayNr);
      else
        _dlsStart.DAT_Date.wDay := TO_USINT(8 - StartDayNr + ((DlsStartDay)$UINT - 100));
      end_if;

      if DlsStartWeek = SecondWeekOfTheMonth then
        _dlsStart.DAT_Date.wDay += 7;
      elsif DlsStartWeek = ThirdWeekOfTheMonth then
        _dlsStart.DAT_Date.wDay += 14;
      elsif DlsStartWeek = FourthWeekOfTheMonth then
        _dlsStart.DAT_Date.wDay += 21;
      end_if;

    end_if;

    if (DlsEndWeek = LastWeekOfTheMonth) then

      EndDayNr := objRiwoDateTimeLib.GetDayOfWeekSplitsed(day:=EndDaysMonth, month:=to_uint(DlsEndMonth), year:=to_uint(CalcYear));
      _dlsEnd.DAT_Date.wYear := TO_UINT(CalcYear);
      _dlsEnd.DAT_Date.wMonth := TO_USINT(DlsEndMonth);

      if ((DlsEndDay)$UINT - 100) > EndDayNr then
        _dlsEnd.DAT_Date.wDay := TO_USINT(EndDaysMonth - 7 + (((DlsEndDay)$UINT - 100) - EndDayNr));
      else
        _dlsEnd.DAT_Date.wDay := TO_USINT(EndDaysMonth - EndDayNr + ((DlsEndDay)$UINT - 100));
      end_if;

    else

      EndDayNr := objRiwoDateTimeLib.GetDayOfWeekSplitsed(day:=1, month:=to_uint(DlsEndMonth), year:=to_uint(CalcYear));

      if ((DlsEndDay)$UINT - 100) >= EndDayNr then
        _dlsEnd.DAT_Date.wDay := TO_USINT(1 + ((DlsEndDay)$UINT - 100) - EndDayNr);
      else
        _dlsEnd.DAT_Date.wDay := TO_USINT(8 - EndDayNr + ((DlsEndDay)$UINT - 100));
      end_if;

      if DlsStartWeek = SecondWeekOfTheMonth then
        _dlsEnd.DAT_Date.wDay += 21;
      elsif DlsStartWeek = ThirdWeekOfTheMonth then
        _dlsEnd.DAT_Date.wDay += 21;
      elsif DlsStartWeek = FourthWeekOfTheMonth then
        _dlsEnd.DAT_Date.wDay += 21;
      end_if;

    end_if;

  ELSIF (DlsCalculateType = CalculateByLocalFixedDate) | (DlsCalculateType = CalculateByUTCFixedDate) THEN

    _dlsStart.DAT_Date.wYear := TO_UINT(CalcYear);
    _dlsStart.DAT_Date.wMonth := TO_USINT(DlsStartMonth);
    _dlsStart.DAT_Date.wDay := TO_USINT((DlsStartDay)$USINT);
    _dlsStart.DAT_Time.wHour := TO_USINT(DlsStartHour);

    _dlsEnd.DAT_Date.wYear := TO_UINT(CalcYear);
    _dlsEnd.DAT_Date.wMonth := TO_USINT(DlsEndMonth);
    _dlsEnd.DAT_Date.wDay := TO_USINT((DlsEndDay)$USINT);
    _dlsEnd.DAT_Time.wHour := TO_USINT(DlsEndHour);

  END_IF;

  _dlsStartDate := objRiwoDateTimeLib.Convert_Date_to_HDINT(_dlsStart.DAT_Date);
  _dlsStartTime := objRiwoDateTimeLib.Convert_Time_to_HDINT(_dlsStart.DAT_Time);
  _dlsEndDate := objRiwoDateTimeLib.Convert_Date_to_HDINT(_dlsEnd.DAT_Date);
  _dlsEndTime := objRiwoDateTimeLib.Convert_Time_to_HDINT(_dlsEnd.DAT_Time);

END_FUNCTION



FUNCTION VIRTUAL GLOBAL RiwoDateTime::UtcYear::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	UtcYear := input;
  _updateDate();
  result := 0;  
 
END_FUNCTION



FUNCTION VIRTUAL GLOBAL RiwoDateTime::UtcMonth::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	UtcMonth := input;
  _updateDate();
 	result := UtcMonth;

END_FUNCTION



FUNCTION VIRTUAL GLOBAL RiwoDateTime::UtcDay::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	UtcDay := input;
  _updateDate();
 	result := UtcDay;
  
END_FUNCTION



FUNCTION VIRTUAL GLOBAL RiwoDateTime::UtcHour::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	UtcHour := input;
  _updateTime();
  result := 0; 


END_FUNCTION



FUNCTION VIRTUAL GLOBAL RiwoDateTime::UtcMinute::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	UtcMinute := input;
  _updateTime();
 	result := UtcMinute;
END_FUNCTION



FUNCTION VIRTUAL GLOBAL RiwoDateTime::UtcSecond::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	UtcSecond := input;
  _updateTime();
 	result := UtcSecond;
  
END_FUNCTION



FUNCTION VIRTUAL GLOBAL RiwoDateTime::DlsActivated::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	DlsActivated := input;
  _calculateDLS(UtcYear);
	result := DlsActivated;

  if (DlsActivated = FALSE) & (DlsNowActive = TRUE) then
    DlsNowActive.Write(FALSE);
  end_if;

END_FUNCTION



FUNCTION VIRTUAL GLOBAL RiwoDateTime::DlsCalculateType::Write
	VAR_INPUT
		input (EAX) 	: RiwoDateTime::tDLSTimeType;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: RiwoDateTime::tDLSTimeType;
	END_VAR

	DlsCalculateType := input;
  _calculateDLS(UtcYear);
	result := DlsCalculateType;

END_FUNCTION



FUNCTION VIRTUAL GLOBAL RiwoDateTime::DlsStartWeek::Write
	VAR_INPUT
		input (EAX) 	: RiwoDateTime::tDLSWeekOption;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: RiwoDateTime::tDLSWeekOption;
	END_VAR

	DlsStartWeek := input;
  _calculateDLS(UtcYear);
	result := DlsStartWeek;

END_FUNCTION



FUNCTION VIRTUAL GLOBAL RiwoDateTime::DlsStartDay::Write
	VAR_INPUT
		input (EAX) 	: RiwoDateTime::tDLSday;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: RiwoDateTime::tDLSday;
	END_VAR

  IF (DlsCalculateType = CalculateByLocalTime) | (DlsCalculateType = CalculateByUTCTime) THEN

    IF (input > DayOfWeek_Saturday) THEN
      input := DayOfWeek_Saturday;
    END_IF;

    IF (input < DayOfWeek_Sunday) THEN
      input := DayOfWeek_Sunday;
    END_IF;

  ELSIF (DlsCalculateType = CalculateByLocalFixedDate) | (DlsCalculateType = CalculateByUTCFixedDate) THEN

    IF (input > DayOfMonth_31) THEN
      input := DayOfMonth_31;
    END_IF;

    IF (input < DayOfMonth_1) THEN
      input := DayOfMonth_1;
    END_IF;

  END_IF;

	DlsStartDay := input;
  _calculateDLS(UtcYear);
	result := DlsStartDay;

END_FUNCTION



FUNCTION VIRTUAL GLOBAL RiwoDateTime::DlsStartMonth::Write
	VAR_INPUT
		input (EAX) 	: UDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: UDINT;
	END_VAR

  IF (input > 12) THEN
    input := 12;
  END_IF;

  IF (input < 1) THEN
    input := 1;
  END_IF;

	DlsStartMonth := input;
  _calculateDLS(UtcYear);
	result := DlsStartMonth;

END_FUNCTION



FUNCTION VIRTUAL GLOBAL RiwoDateTime::DlsStartHour::Write
	VAR_INPUT
		input (EAX) 	: UDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: UDINT;
	END_VAR

  IF (input > 23) THEN
    input := 23;
  END_IF;

  IF (input < 0) THEN
    input := 0;
  END_IF;


	DlsStartHour := input;
  _calculateDLS(UtcYear);
	result := DlsStartHour;

END_FUNCTION



FUNCTION VIRTUAL GLOBAL RiwoDateTime::DlsEndWeek::Write
	VAR_INPUT
		input (EAX) 	: RiwoDateTime::tDLSWeekOption;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: RiwoDateTime::tDLSWeekOption;
	END_VAR

	DlsEndWeek := input;
  _calculateDLS(UtcYear);
	result := DlsEndWeek;

END_FUNCTION



FUNCTION VIRTUAL GLOBAL RiwoDateTime::DlsEndDay::Write
	VAR_INPUT
		input (EAX) 	: RiwoDateTime::tDLSday;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: RiwoDateTime::tDLSday;
	END_VAR

  IF (DlsCalculateType = CalculateByLocalTime) | (DlsCalculateType = CalculateByUTCTime) THEN

    IF (input > DayOfWeek_Saturday) THEN
      input := DayOfWeek_Saturday;
    END_IF;

    IF (input < DayOfWeek_Sunday) THEN
      input := DayOfWeek_Sunday;
    END_IF;

  ELSIF (DlsCalculateType = CalculateByLocalFixedDate) | (DlsCalculateType = CalculateByUTCFixedDate) THEN

    IF (input > DayOfMonth_31) THEN
      input := DayOfMonth_31;
    END_IF;

    IF (input < DayOfMonth_1) THEN
      input := DayOfMonth_1;
    END_IF;

  END_IF;

	DlsEndDay := input;
  _calculateDLS(UtcYear);
	result := DlsEndDay;

END_FUNCTION



FUNCTION VIRTUAL GLOBAL RiwoDateTime::DlsEndMonth::Write
	VAR_INPUT
		input (EAX) 	: UDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: UDINT;
	END_VAR

  IF (input > 12) THEN
    input := 12;
  END_IF;

  IF (input < 1) THEN
    input := 1;
  END_IF;

	DlsEndMonth := input;
  _calculateDLS(UtcYear);
	result := DlsEndMonth;

END_FUNCTION



FUNCTION VIRTUAL GLOBAL RiwoDateTime::DlsEndHour::Write
	VAR_INPUT
		input (EAX) 	: UDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: UDINT;
	END_VAR

  IF (input > 23) THEN
    input := 23;
  END_IF;

  IF (input < 0) THEN
    input := 0;
  END_IF;

	DlsEndHour := input;
  _calculateDLS(UtcYear);
	result := DlsEndHour;

END_FUNCTION



FUNCTION VIRTUAL GLOBAL RiwoDateTime::LocalDate::Write
	VAR_INPUT
		input (EAX) 	: DATE_LSL;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DATE_LSL;
	END_VAR
  VAR
    tempDaTiLoc : tDAT_DateAndTime;
    tempDaTiUTC : tDAT_DateAndTime;
  END_VAR

	LocalDate := input;

  tempDaTiLoc.DAT_Date := objRiwoDateTimeLib.Convert_HDINT_to_Date(Date_in:=LocalDate);
  tempDaTiLoc.DAT_Time := objRiwoDateTimeLib.Convert_HDINT_to_Time(Time_in:=LocalTime);
  tempDaTiUTC := Convert_Local_to_UTC(InputDateTime:=tempDaTiLoc);

  UtcDay := tempDaTiUTC.DAT_Date.wDay;
  UtcMonth := tempDaTiUTC.DAT_Date.wMonth;
  UtcYear := tempDaTiUTC.DAT_Date.wYear;

  _updateDate();

	result := LocalDate;

END_FUNCTION



FUNCTION VIRTUAL GLOBAL RiwoDateTime::LocalTime::Write
	VAR_INPUT
		input (EAX) 	: TIME_LSL;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: TIME_LSL;
	END_VAR
  VAR
    tempDaTiLoc : tDAT_DateAndTime;
    tempDaTiUTC : tDAT_DateAndTime;
  END_VAR

	LocalTime := input;

  tempDaTiLoc.DAT_Date := objRiwoDateTimeLib.Convert_HDINT_to_Date(Date_in:=LocalDate);
  tempDaTiLoc.DAT_Time := objRiwoDateTimeLib.Convert_HDINT_to_Time(Time_in:=LocalTime);
  tempDaTiUTC := Convert_Local_to_UTC(InputDateTime:=tempDaTiLoc);

  UtcSecond := tempDaTiUTC.DAT_Time.wSecond;
  UtcMinute := tempDaTiUTC.DAT_Time.wMinute;
  UtcHour := tempDaTiUTC.DAT_Time.wHour;
  UtcDay := tempDaTiUTC.DAT_Date.wDay;
  UtcMonth := tempDaTiUTC.DAT_Date.wMonth;
  UtcYear := tempDaTiUTC.DAT_Date.wYear;

  _updateDate();
  _updateTime();

	result := LocalTime;

END_FUNCTION



FUNCTION VIRTUAL GLOBAL RiwoDateTime::UtcDate::Write
	VAR_INPUT
		input (EAX) 	: DATE_LSL;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DATE_LSL;
	END_VAR
  VAR
  	sysDate       : SYSDATE;
  END_VAR

	UtcDate := input;

  if (_runningInLars = FALSE) then
    sysDate := objRiwoDateTimeLib.Convert_HDINT_to_Date(UtcDate);
    System.SetSysDate(#sysDate);
  end_if;

	result := UtcDate;

END_FUNCTION



FUNCTION VIRTUAL GLOBAL RiwoDateTime::UtcTime::Write
	VAR_INPUT
		input (EAX) 	: TIME_LSL;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: TIME_LSL;
	END_VAR
  VAR
  	sysTime       : SYSTIME;
  END_VAR

	UtcTime := input;

  if (_runningInLars = FALSE) then
    sysTime := objRiwoDateTimeLib.Convert_HDINT_to_Time(UtcTime);
    System.SetSysTime(#sysTime);
  end_if;

	result := UtcTime;

END_FUNCTION