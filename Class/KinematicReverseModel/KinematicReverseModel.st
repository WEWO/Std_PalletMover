//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)

//{{LSL_DEFINES
#define PI    3.14159265359
#define DEG2RAD PI/180
#define INF   10**30
//}}LSL_DEFINES

//{{LSL_DECLARATION

(*!
<Class
	Name               = "KinematicReverseModel"
	Revision           = "0.0"
	GUID               = "{596E8076-9C16-491C-811A-51721DC523A1}"
	RealtimeTask       = "false"
	CyclicTask         = "true"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(690,840)">
	<Channels>
		<Server Name="ActualTotalDirection" GUID="{B0EA07CC-EC8F-484E-AD13-FE640BE4FB5B}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="ActualTotalRadius" GUID="{1F78F458-FBA7-4520-A510-023E93BD873A}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="ActualTotalSpeed" GUID="{B03B8519-22BB-421A-AA61-6BAD8055FF81}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="ClassSvr" GUID="{BB13BBC4-4722-4404-B51E-8D8378BEC429}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Client Name="objPivotWheel1" Required="true" Internal="false"/>
		<Client Name="objPivotWheel2" Required="true" Internal="false"/>
		<Client Name="objPivotWheel3" Required="true" Internal="false"/>
		<Client Name="objPivotWheel4" Required="true" Internal="false"/>
		<Client Name="Wheel1Angle" Required="true" Internal="false"/>
		<Client Name="Wheel1Speed" Required="true" Internal="false"/>
		<Client Name="Wheel2Angle" Required="true" Internal="false"/>
		<Client Name="Wheel2Speed" Required="true" Internal="false"/>
		<Client Name="Wheel3Angle" Required="true" Internal="false"/>
		<Client Name="Wheel3Speed" Required="true" Internal="false"/>
		<Client Name="Wheel4Angle" Required="true" Internal="false"/>
		<Client Name="Wheel4Speed" Required="true" Internal="false"/>
	</Channels>
	<Separators>
		<Clients>
			<SepChn Position="8"/>
		</Clients>
	</Separators>
</Class>
*)
KinematicReverseModel : CLASS
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
	ActualTotalSpeed 	: SvrCh_REAL;
	ActualTotalDirection 	: SvrCh_REAL;
	ActualTotalRadius 	: SvrCh_REAL;
  //Clients:
	Wheel1Angle 	: CltCh_REAL;
	Wheel2Angle 	: CltCh_REAL;
	Wheel3Angle 	: CltCh_REAL;
	Wheel4Angle 	: CltCh_REAL;
	Wheel1Speed 	: CltCh_DINT;
	Wheel2Speed 	: CltCh_DINT;
	Wheel3Speed 	: CltCh_DINT;
	Wheel4Speed 	: CltCh_DINT;
	objPivotWheel1 	: CltChCmd_PivotWheel;
	objPivotWheel2 	: CltChCmd_PivotWheel;
	objPivotWheel3 	: CltChCmd_PivotWheel;
	objPivotWheel4 	: CltChCmd_PivotWheel;
  //Variables:
		Vx 	: REAL;
		Vy 	: REAL;
		omega 	: REAL;
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL CyWork
		VAR_INPUT
			EAX 	: UDINT;
		END_VAR
		VAR_OUTPUT
			state (EAX) 	: UDINT := READY;
		END_VAR;
	
	FUNCTION _readClients;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma usingLtd PivotWheel


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB KinematicReverseModel::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_KINEMATICREVERSEMODEL
0$UINT, 0$UINT, (SIZEOF(::KinematicReverseModel))$UINT, 
4$UINT, 12$UINT, 0$UINT, 
TO_UDINT(1861511807), "KinematicReverseModel", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::KinematicReverseModel.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
(::KinematicReverseModel.ActualTotalSpeed.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(783541552), "ActualTotalSpeed", 
(::KinematicReverseModel.ActualTotalDirection.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(198553421), "ActualTotalDirection", 
(::KinematicReverseModel.ActualTotalRadius.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1916058636), "ActualTotalRadius", 
//Clients:
(::KinematicReverseModel.Wheel1Angle.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(1064111999), "Wheel1Angle", 
(::KinematicReverseModel.Wheel2Angle.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(3120135633), "Wheel2Angle", 
(::KinematicReverseModel.Wheel3Angle.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(1923460724), "Wheel3Angle", 
(::KinematicReverseModel.Wheel4Angle.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(1872797388), "Wheel4Angle", 
(::KinematicReverseModel.Wheel1Speed.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(818590848), "Wheel1Speed", 
(::KinematicReverseModel.Wheel2Speed.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(3059664430), "Wheel2Speed", 
(::KinematicReverseModel.Wheel3Speed.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(2097288587), "Wheel3Speed", 
(::KinematicReverseModel.Wheel4Speed.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(1611081011), "Wheel4Speed", 
(::KinematicReverseModel.objPivotWheel1.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(1407998262), "objPivotWheel1", TO_UDINT(3457971339), "PivotWheel", 0$UINT, 0$UINT, 
(::KinematicReverseModel.objPivotWheel2.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(3404007564), "objPivotWheel2", TO_UDINT(3457971339), "PivotWheel", 0$UINT, 0$UINT, 
(::KinematicReverseModel.objPivotWheel3.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(3185719322), "objPivotWheel3", TO_UDINT(3457971339), "PivotWheel", 0$UINT, 0$UINT, 
(::KinematicReverseModel.objPivotWheel4.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(596028857), "objPivotWheel4", TO_UDINT(3457971339), "PivotWheel", 0$UINT, 0$UINT, 
END_FUNCTION


#define USER_CNT_KinematicReverseModel 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_KinematicReverseModel] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION KinematicReverseModel::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_KinematicReverseModel, pCmd := #vmt.CmdTable);
	vmt.CmdTable.CyWork		:= #CyWork();
	ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION


FUNCTION VIRTUAL GLOBAL KinematicReverseModel::CyWork
	VAR_INPUT
		EAX 	: UDINT;
	END_VAR
	VAR_OUTPUT
		state (EAX) 	: UDINT;(* := READY *)
	END_VAR
  VAR
  	W1  : REAL;
    W2  : REAL;
    W3  : REAL;
    W4  : REAL;

  END_VAR

  _readClients();

  // Calculate weights W1 to W4 so later calculations look less messy
  W1 := (-objPivotWheel1.DistanceToCenterY * cos(Wheel1Angle*DEG2RAD) + objPivotWheel1.DistanceToCenterX * sin(Wheel1Angle*DEG2RAD))/(4 * (objPivotWheel1.DistanceToCenterY**2 + objPivotWheel1.DistanceToCenterX**2));
  W2 := (-objPivotWheel2.DistanceToCenterY * cos(Wheel2Angle*DEG2RAD) + objPivotWheel2.DistanceToCenterX * sin(Wheel2Angle*DEG2RAD))/(4 * (objPivotWheel2.DistanceToCenterY**2 + objPivotWheel2.DistanceToCenterX**2));
  W3 := (-objPivotWheel3.DistanceToCenterY * cos(Wheel3Angle*DEG2RAD) + objPivotWheel3.DistanceToCenterX * sin(Wheel3Angle*DEG2RAD))/(4 * (objPivotWheel3.DistanceToCenterY**2 + objPivotWheel3.DistanceToCenterX**2));
  W4 := (-objPivotWheel4.DistanceToCenterY * cos(Wheel4Angle*DEG2RAD) + objPivotWheel4.DistanceToCenterX * sin(Wheel4Angle*DEG2RAD))/(4 * (objPivotWheel4.DistanceToCenterY**2 + objPivotWheel4.DistanceToCenterX**2));

  // Calculate Speed in X, Y and angular velocity
  Vx := (to_real(Wheel1Speed) * cos(Wheel1Angle*DEG2RAD) + to_real(Wheel2Speed) * cos(Wheel2Angle*DEG2RAD) + to_real(Wheel3Speed) * cos(Wheel3Angle*DEG2RAD) + to_real(Wheel4Speed) * cos(Wheel4Angle*DEG2RAD))/4;
  Vy := (to_real(Wheel1Speed) * sin(Wheel1Angle*DEG2RAD) + to_real(Wheel2Speed) * sin(Wheel2Angle*DEG2RAD) + to_real(Wheel3Speed) * sin(Wheel3Angle*DEG2RAD) + to_real(Wheel4Speed) * sin(Wheel4Angle*DEG2RAD))/4;
  omega := -(to_real(Wheel1Speed) * W1 + to_real(Wheel2Speed) * W2 + to_real(Wheel3Speed) * W3 + to_real(Wheel4Speed) * W4);
  
  // Calculate serverss(Vy) * 
  ActualTotalSpeed := sqrt(Vx**2 + Vy**2);
  if Vx <> 0 then
    ActualTotalDirection := atan(Vy/Vx);
    if Wheel1Speed > 0 & Wheel2Speed > 0 & Wheel3Speed > 0 & Wheel4Speed > 0 then
      ActualTotalSpeed *= -1;
    end_if;
  else
    if Vy <> 0 then
      ActualTotalDirection := (Vy/abs(Vy))*(PI/2);
    end_if;
  end_if;
  if omega <> 0 then
    ActualTotalRadius := ActualTotalSpeed/omega;
  else
    ActualTotalRadius := INF;
  end_if;
END_FUNCTION


FUNCTION KinematicReverseModel::_readClients

  Wheel1Angle := Wheel1Angle.Read();
  Wheel2Angle := Wheel2Angle.Read();
  Wheel3Angle := Wheel3Angle.Read();
  Wheel4Angle := Wheel4Angle.Read();
  Wheel1Speed := Wheel1Speed.Read();
  Wheel2Speed := Wheel2Speed.Read();
  Wheel3Speed := Wheel3Speed.Read();
  Wheel4Speed := Wheel4Speed.Read();

END_FUNCTION
