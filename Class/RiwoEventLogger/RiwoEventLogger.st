//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)

//{{LSL_DEFINES
//________________________________________________________________________________________________________________
//
//         RIWO EVENT LOGGING
//________________________________________________________________________________________________________________
#ifndef MAXLOGRULES 
  #define MAXLOGRULES 200
#endif

#ifndef RIWO_EVENT_LOGGER
  #define RIWO_EVENT_LOGGER
  

  #define RIWO_EVENT_LOGFILE0 "C:\SYSMSG\RIWOEVENTLOG_0.CSV"
  #define RIWO_EVENT_LOGFILE1 "C:\SYSMSG\RIWOEVENTLOG_1.CSV"
  #define RIWO_EVENT_LOGFILE2 "C:\SYSMSG\RIWOEVENTLOG_2.CSV"
  #define RIWO_EVENT_LOGFILE3 "C:\SYSMSG\RIWOEVENTLOG_3.CSV"
  #define RIWO_EVENT_LOGFILE4 "C:\SYSMSG\RIWOEVENTLOG_4.CSV"
  #define RIWO_EVENT_LOGFILE5 "C:\SYSMSG\RIWOEVENTLOG_5.CSV"
  #define RIWO_EVENT_LOGFILE6 "C:\SYSMSG\RIWOEVENTLOG_6.CSV"
  #define RIWO_EVENT_LOGFILE7 "C:\SYSMSG\RIWOEVENTLOG_7.CSV"
  #define RIWO_EVENT_LOGFILE8 "C:\SYSMSG\RIWOEVENTLOG_8.CSV"

  #define RIWO_EVENT_LOGFILECOPY "C:\SYSMSG\RIWOEVENTLOG_0_COPY.CSV"
  #define RIWO_EVENT_MAXFILESIZE 3000000   // 3MB



  //////////////
  //  TRACE   //
  //////////////
  #define _RIWO_TRACE_MSG(msg)                                    #pragma warning(disable: 172); \
                                                                  RiwoEventLogger::LogMsg(msg, Level:=ell_Trace); \
                                                                  #pragma warning(default: 172);
                                                                  
  #define _RIWO_TRACE_MSG0(msg, Val0)                             #pragma warning(disable: 172); \
                                                                  RiwoEventLogger::LogMsg(msg, Val0, Level:=ell_Trace); \
                                                                  #pragma warning(default: 172);
                                                                  
  #define _RIWO_TRACE_MSG1(msg, Val0, Val1)                       #pragma warning(disable: 172); \
                                                                  RiwoEventLogger::LogMsg(msg, Val0, Val1, Level:=ell_Trace); \
                                                                  #pragma warning(default: 172);
                                                                  
  #define _RIWO_TRACE_MSG2(msg, Val0, Val1, Val2)                 #pragma warning(disable: 172); \
                                                                  RiwoEventLogger::LogMsg(msg, Val0, Val1, Val2, Level:=ell_Trace); \
                                                                  #pragma warning(default: 172);
                                                                  
  #define _RIWO_TRACE_MSG3(msg, Val0, Val1, Val2, Val3)           #pragma warning(disable: 172); \
                                                                  RiwoEventLogger::LogMsg(msg, Val0, Val1, Val2, Val3, Level:=ell_Trace); \
                                                                  #pragma warning(default: 172);
                                                                  
  #define _RIWO_TRACE_MSG4(msg, Val0, Val1, Val2, Val3, Val4)     #pragma warning(disable: 172); \
                                                                  RiwoEventLogger::LogMsg(msg, Val0, Val1, Val2, Val3, Val4, Level:=ell_Trace); \
                                                                  #pragma warning(default: 172);

  //////////////
  //  DEBUG   //
  //////////////
  #define _RIWO_DEBUG_MSG(msg)                                    #pragma warning(disable: 172); \
                                                                  RiwoEventLogger::LogMsg(msg, Level:=ell_Debug); \
                                                                  #pragma warning(default: 172);

  #define _RIWO_DEBUG_MSG0(msg, Val0)                             #pragma warning(disable: 172); \
                                                                  RiwoEventLogger::LogMsg(msg, Val0, Level:=ell_Debug); \
                                                                  #pragma warning(default: 172);
                                                                  
  #define _RIWO_DEBUG_MSG1(msg, Val0, Val1)                       #pragma warning(disable: 172); \
                                                                  RiwoEventLogger::LogMsg(msg, Val0, Val1, Level:=ell_Debug); \
                                                                  #pragma warning(default: 172);
                                                                  
  #define _RIWO_DEBUG_MSG2(msg, Val0, Val1, Val2)                 #pragma warning(disable: 172); \
                                                                  RiwoEventLogger::LogMsg(msg, Val0, Val1, Val2, Level:=ell_Debug); \
                                                                  #pragma warning(default: 172);
                                                                  
  #define _RIWO_DEBUG_MSG3(msg, Val0, Val1, Val2, Val3)           #pragma warning(disable: 172); \
                                                                  RiwoEventLogger::LogMsg(msg, Val0, Val1, Val2, Val3, Level:=ell_Debug); \
                                                                  #pragma warning(default: 172);
                                                                  
  #define _RIWO_DEBUG_MSG4(msg, Val0, Val1, Val2, Val3, Val4)     #pragma warning(disable: 172); \
                                                                  RiwoEventLogger::LogMsg(msg, Val0, Val1, Val2, Val3, Val4, Level:=ell_Debug); \
                                                                  #pragma warning(default: 172);

  //////////////
  //  INFO    //
  //////////////
  #define _RIWO_INFO_MSG(msg)                                     #pragma warning(disable: 172); \
                                                                  RiwoEventLogger::LogMsg(msg, Level:=ell_Info); \
                                                                  #pragma warning(default: 172);
  
  #define _RIWO_INFO_MSG0(msg, Val0)                              #pragma warning(disable: 172); \
                                                                  RiwoEventLogger::LogMsg(msg, Val0, Level:=ell_Info); \
                                                                  #pragma warning(default: 172);

  #define _RIWO_INFO_MSG1(msg, Val0, Val1)                        #pragma warning(disable: 172); \
                                                                  RiwoEventLogger::LogMsg(msg, Val0, Val1, Level:=ell_Info); \
                                                                  #pragma warning(default: 172);
                                                                  
  #define _RIWO_INFO_MSG2(msg, Val0, Val1, Val2)                  #pragma warning(disable: 172); \
                                                                  RiwoEventLogger::LogMsg(msg, Val0, Val1, Val2, Level:=ell_Info); \
                                                                  #pragma warning(default: 172);
                                                                  
  #define _RIWO_INFO_MSG3(msg, Val0, Val1, Val2, Val3)            #pragma warning(disable: 172); \
                                                                  RiwoEventLogger::LogMsg(msg, Val0, Val1, Val2, Val3, Level:=ell_Info); \
                                                                  #pragma warning(default: 172); 
                                                                    
  #define _RIWO_INFO_MSG4(msg, Val0, Val1, Val2, Val3, Val4)      #pragma warning(disable: 172); \
                                                                  RiwoEventLogger::LogMsg(msg, Val0, Val1, Val2, Val3, Val4, Level:=ell_Info); \
                                                                  #pragma warning(default: 172);
  
  

  //////////////
  // WARNING  //
  //////////////
  
  #define _RIWO_WARNING_MSG(msg)                                  #pragma warning(disable: 172); \
                                                                  RiwoEventLogger::LogMsg(msg, Level:=ell_Warning); \
                                                                  #pragma warning(default: 172);
                                                                  
  #define _RIWO_WARNING_MSG0(msg, Val0)                           #pragma warning(disable: 172); \
                                                                  RiwoEventLogger::LogMsg(msg, Val0, Level:=ell_Warning); \
                                                                  #pragma warning(default: 172);
                                                                  
  #define _RIWO_WARNING_MSG1(msg, Val0, Val1)                     #pragma warning(disable: 172); \
                                                                  RiwoEventLogger::LogMsg(msg, Val0, Val1, Level:=ell_Warning); \
                                                                  #pragma warning(default: 172);
                                                                  
  #define _RIWO_WARNING_MSG2(msg, Val0, Val1, Val2)               #pragma warning(disable: 172); \
                                                                  RiwoEventLogger::LogMsg(msg, Val0, Val1, Val2, Level:=ell_Warning); \
                                                                  #pragma warning(default: 172);
                                                                  
  #define _RIWO_WARNING_MSG3(msg, Val0, Val1, Val2, Val3)         #pragma warning(disable: 172); \
                                                                  RiwoEventLogger::LogMsg(msg, Val0, Val1, Val2, Val3, Level:=ell_Warning); \
                                                                  #pragma warning(default: 172);
                                                                  
  #define _RIWO_WARNING_MSG4(msg, Val0, Val1, Val2, Val3, Val4)   #pragma warning(disable: 172); \
                                                                  RiwoEventLogger::LogMsg(msg, Val0, Val1, Val2, Val3, Val4, Level:=ell_Warning); \
                                                                  #pragma warning(default: 172);

  //////////////
  //  ERROR   //
  //////////////
  #define _RIWO_ERROR_MSG(msg)                                    #pragma warning(disable: 172); \
                                                                  RiwoEventLogger::LogMsg(msg, Level:=ell_Error); \
                                                                  #pragma warning(default: 172);
                                                                  
  #define _RIWO_ERROR_MSG0(msg, Val0)                             #pragma warning(disable: 172); \
                                                                  RiwoEventLogger::LogMsg(msg, Val0, Level:=ell_Error); \
                                                                  #pragma warning(default: 172);
                                                                  
  #define _RIWO_ERROR_MSG1(msg, Val0, Val1)                       #pragma warning(disable: 172); \
                                                                  RiwoEventLogger::LogMsg(msg, Val0, Val1, Level:=ell_Error); \
                                                                  #pragma warning(default: 172);
                                                                  
  #define _RIWO_ERROR_MSG2(msg, Val0, Val1, Val2)                 #pragma warning(disable: 172); \
                                                                  RiwoEventLogger::LogMsg(msg, Val0, Val1, Val2, Level:=ell_Error); \
                                                                  #pragma warning(default: 172);
                                                                  
  #define _RIWO_ERROR_MSG3(msg, Val0, Val1, Val2, Val3)           #pragma warning(disable: 172); \
                                                                  RiwoEventLogger::LogMsg(msg, Val0, Val1, Val2, Val3, Level:=ell_Error); \
                                                                  #pragma warning(default: 172);
                                                                  
  #define _RIWO_ERROR_MSG4(msg, Val0, Val1, Val2, Val3, Val4)     #pragma warning(disable: 172); \
                                                                  RiwoEventLogger::LogMsg(msg, Val0, Val1, Val2, Val3, Val4, Level:=ell_Error); \
                                                                  #pragma warning(default: 172);

  //////////////
  //  FATAL   //
  //////////////
  #define _RIWO_FATAL_MSG(msg)                                    #pragma warning(disable: 172); \
                                                                  RiwoEventLogger::LogMsg(msg, Level:=ell_fatal); \
                                                                  #pragma warning(default: 172);
                                                                  
  #define _RIWO_FATAL_MSG0(msg, Val0)                             #pragma warning(disable: 172); \
                                                                  RiwoEventLogger::LogMsg(msg, Val0, Level:=ell_fatal); \
                                                                  #pragma warning(default: 172);
                                                                  
  #define _RIWO_FATAL_MSG1(msg, Val0, Val1)                       #pragma warning(disable: 172); \
                                                                  RiwoEventLogger::LogMsg(msg, Val0, Val1, Level:=ell_fatal); \
                                                                  #pragma warning(default: 172);
                                                                  
  #define _RIWO_FATAL_MSG2(msg, Val0, Val1, Val2)                 #pragma warning(disable: 172); \
                                                                  RiwoEventLogger::LogMsg(msg, Val0, Val1, Val2, Level:=ell_fatal); \
                                                                  #pragma warning(default: 172);
                                                                  
  #define _RIWO_FATAL_MSG3(msg, Val0, Val1, Val2, Val3)           #pragma warning(disable: 172); \
                                                                  RiwoEventLogger::LogMsg(msg, Val0, Val1, Val2, Val3, Level:=ell_fatal); \
                                                                  #pragma warning(default: 172);
                                                                  
  #define _RIWO_FATAL_MSG4(msg, Val0, Val1, Val2, Val3, Val4)     #pragma warning(disable: 172); \
                                                                  RiwoEventLogger::LogMsg(msg, Val0, Val1, Val2, Val3, Val4, Level:=ell_fatal); \
                                                                  #pragma warning(default: 172);
#endif
//}}LSL_DEFINES

//{{LSL_DECLARATION

(*!
<Class
	Name               = "RiwoEventLogger"
	Revision           = "2.3"
	GUID               = "{19C4C094-8651-4114-8B20-E0828EE0CE28}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "true"
	DefBackground      = "1000 ms"
	DefBackgroundIndex = "256"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(1200,300)"
	Singleton          = "true"
	Comment            = "This class works in combination with the&#13;&#10;global class &quot;gLog&quot;&#13;&#10;&#13;&#10;&#13;&#10;It will only work with one object called &quot;EventLogger1&quot;&#13;&#10;">
	<Channels>
		<Server Name="BufferPos" GUID="{7130590D-87A6-45AF-8A98-7CA6B045C3FB}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="ClassSvr" GUID="{E61833DB-7A09-4B82-8D21-6399D43B7503}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="ClearBuffer" GUID="{DD1A5147-6E38-4548-8A0A-9A6063FE8B5A}" Visualized="true" Initialize="true" DefValue="1" WriteProtected="false" Retentive="false"/>
		<Server Name="CopyLogFile0" GUID="{F99DDFDC-F80D-4D0A-BC66-D7DAA21C06F2}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Server Name="ExtraLoggingFiles" GUID="{BEF3CA1F-0E2D-4101-A954-D102CE888BE0}" Visualized="true" Initialize="true" DefValue="0" WriteProtected="false" Retentive="File"/>
		<Server Name="LastLoggedBuffPos" GUID="{FEF6A4C4-54A5-4F01-985B-6EF23082D14F}" Visualized="true" Initialize="true" DefValue="0" WriteProtected="false" Retentive="false"/>
		<Server Name="Log2FileSetting" GUID="{9DE80B4C-25D8-4A76-9617-A9DEE83FA12D}" Visualized="true" Initialize="true" DefValue="127" WriteProtected="false" Retentive="File"/>
		<Server Name="PrjChkSum" GUID="{EDC363BC-B862-4422-B61B-9878AC301A2A}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="File"/>
		<Server Name="TestEvent" GUID="{BA6B07C5-12E3-4F1A-ABE7-5F1CE4D11B8C}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Client Name="objAsciiBin" Required="true" Internal="false"/>
		<Client Name="objFileSys" Required="false" Internal="false"/>
		<Client Name="objLinker" Required="false" Internal="false"/>
		<Client Name="objRiwoTime" Required="true" Internal="false"/>
		<Client Name="objSigClib" Required="false" Internal="false"/>
		<Client Name="objSysMsg" Required="false" Internal="false"/>
		<Client Name="usbDriveLetter" Required="false" Internal="false"/>
		<Client Name="USBPluggedIn" Required="true" Internal="false"/>
	</Channels>
	<Dependencies>
		<Files>
			<File Path=".\Class\RiwoDefine\RiwoDef.h" Include="false"/>
		</Files>
	</Dependencies>
	<RevDoku>
		<Owner Company="Riwo Engineering B.V." Author="Stefan Veltmaat (SVE)"/>
		<Dokumentation Revision="2.3" Date="2020-11-12" Author="Stefan Veltmaat (SVE)" Company="Riwo Engineering B.V." Description="better check of instance name size fitting in log rule text size to prevent acces exception"/>
		<Dokumentation Revision="2.2" Date="2020-11-11" Author="Stefan Veltmaat (SVE)" Company="Riwo Engineering B.V." Description="removed ussage of NumToStr function and StrCat to be usabel non screen projects + disabled warning for possible not resolving this pointer of the riwo event log function calls.&#13;&#10;"/>
		<Dokumentation Revision="2.1" Date="2020-10-07" Author="Stefan Veltmaat (SVE)" Company="Riwo Engineering B.V." Description="merged version 2.00 with V1.93 to get correct usb drive handling + removed sceen dependency by using the asccie to bin lib"/>
		<Dokumentation Revision="1.92" Date="2020-02-04" Author="Thomas Hordijk&#13;&#10;(TAH)&#13;&#10;" Company="Riwo Engineering B.V." Description="Removed dependency of LSE class"/>
		<Dokumentation Revision="1.8" Date="2018-02-12" Author="Stefan Veltmaat (SVE)" Company="Riwo Engineering B.V." Description="Changed Bufferpos and LastLoggedBuffPos to SRAM server instead of file server"/>
		<Dokumentation Revision="1.7" Date="2015-07-24" Author="Peter Tijhaar (PWT)" Company="Riwo Engineering B.V." Description="ifndef included"/>
		<Dokumentation Revision="1.6" Date="2015-06-15" Author="Andre Mensink (AJM)" Company="Riwo Engineering B.V." Description="added ATT_CREATE to opening logfile"/>
		<Dokumentation Revision="1.4" Date="2015-03-06" Author="Andre Mensink (AJM)" Company="Riwo Engineering B.V." Description="Logbuffer to local memory in stead of ramex"/>
		<Dokumentation Revision="1.3" Date="2015-01-31" Author="Andre Mensink (AJM)" Company="Riwo Engineering B.V." Description="Loggedbuffposition depending on buffer, not on ID anymore. maybe this solves the unexplained access exception with RoyStevelink&apos;s plc.&#13;&#10;"/>
		<Dokumentation Revision="1.2" Date="2014-12-08" Author="Andre Mensink (AJM)" Company="Riwo Engineering B.V." Description="Project checksum compare"/>
		<Dokumentation Revision="1.1" Date="2014-10-17" Author="Andre Mensink (AJM)" Company="Riwo Engineering B.V." Description="Check for Ram memory use and ClearBuffer if LastLognr = 0"/>
		<Dokumentation Revision="1.0" Date="2014-09-29" Author="Andre Mensink (AJM)" Company="Riwo Engineering B.V." Description="First Creation"/>
	</RevDoku>
	<Network Name="RiwoEventLogger">
		<!-- List of Components in this network -->
		<Components>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
RiwoEventLogger : CLASS
	TYPE
	  tEventLogLevel :
	  (
	    ell_Trace,
	    ell_Debug,
	    ell_Info,
	    ell_Warning,
	    ell_Alarm,
	    ell_Error,
	    ell_fatal
	  )$UDINT;
	  tEventLogValues : ARRAY [0..4] OF DINT;
#pragma pack(push, 1)
	  tEventLogDateTime : STRUCT
	    eldt_OpsAbso : UDINT;
	    eldt_LogDate : SYSDATE;
	    eldt_LogTime : SYSTIME;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 1)
	  tEventLogCmd : STRUCT
	    elc_Id : DINT;
	    elc_pThis : ^VirtualBase;
	    elc_Level : tEventLogLevel;
	    elc_Msg : ^CHAR;
	    elc_Values : tEventLogValues;
	    elc_DateTime : tEventLogDateTime;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 4)
	  tLogBuffer : STRUCT
	    Status : DINT;
	    LogRow : ARRAY [0..MAXLOGRULES-1] OF tEventLogCmd;
	  END_STRUCT;
#pragma pack(pop)
	END_TYPE
  //Servers:
	ClassSvr 	: SvrChCmd_UDINT;
	CopyLogFile0 	: SvrCh_DINT;
	ClearBuffer 	: SvrCh_DINT;
	Log2FileSetting 	: SvrCh_tLogSetting;
	TestEvent 	: SvrCh_DINT;
	BufferPos 	: SvrCh_DINT;
	LastLoggedBuffPos 	: SvrCh_DINT;
	PrjChkSum 	: SvrCh_UDINT;
	ExtraLoggingFiles 	: SvrCh_DINT;
  //Clients:
	objRiwoTime 	: CltChCmd_RiwoDateTimeLib;
	objSysMsg 	: CltChCmd__SysMsg;
	objFileSys 	: CltChCmd__FileSys;
	objAsciiBin 	: CltChCmd_ASCII_BIN;
	objLinker 	: CltChCmd__Linker;
	objSigClib 	: CltChCmd_SigCLib;
	USBPluggedIn 	: CltCh_DINT;
	usbDriveLetter 	: CltCh_DINT;
  //Variables:
		_msg : ARRAY [0..245] OF CHAR;

		_InitCounter 	: DINT;
		_fileHandle 	: DINT;
		_FirstScanReady 	: DINT;
		_LogBuffer 	: tLogBuffer;
  //Functions:
	
	FUNCTION RiwoEventLogger
		VAR_OUTPUT
			ret_code 	: ConfStates;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Init;
	
	FUNCTION VIRTUAL GLOBAL Background
		VAR_INPUT
			EAX 	: UDINT;
		END_VAR
		VAR_OUTPUT
			state (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION GLOBAL LogRule
		VAR_INPUT
			LogCmd 	: tEventLogCmd;
		END_VAR;
	
	FUNCTION _LogRow2File
		VAR_INPUT
			LogCmd 	: tEventLogCmd;
		END_VAR;
	
	FUNCTION _CheckSize;
	
	FUNCTION _AddValue
		VAR_INPUT
			dVal 	: DINT;
			pString 	: ^CHAR;
		END_VAR;
	
	FUNCTION _MakeMessage
		VAR_INPUT
			LogCmd 	: tEventLogCmd;
			pString 	: ^CHAR;
		END_VAR;
	
	FUNCTION _LogEnabled
		VAR_INPUT
			LogCmd 	: tEventLogCmd;
		END_VAR
		VAR_OUTPUT
			Enabled 	: DINT;
		END_VAR;
	
	FUNCTION _usbHandler
		VAR_OUTPUT
			returnValue 	: CHAR;
		END_VAR;
	
	FUNCTION GLOBAL LogMsg
		VAR_INPUT
			msg 	: ^CHAR;
			Val0 	: DINT := 0;
			Val1 	: DINT := 0;
			Val2 	: DINT := 0;
			Val3 	: DINT := 0;
			Val4 	: DINT := 0;
			Level 	: tEventLogLevel;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL ClearBuffer::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL Log2FileSetting::Write
		VAR_INPUT
			input (EAX) 	: tLogSetting;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: tLogSetting;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL TestEvent::Write
		VAR_INPUT
			input (EAX) 	: DINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: DINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma usingLtd _FileSys
#pragma usingLtd _Linker
#pragma usingLtd _SysMsg
#pragma usingLtd ASCII_BIN
#pragma usingLtd RiwoDateTimeLib
#pragma usingLtd SigCLib


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB RiwoEventLogger::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_RIWOEVENTLOGGER
2$UINT, 3$UINT, (SIZEOF(::RiwoEventLogger))$UINT, 
9$UINT, 8$UINT, 0$UINT, 
TO_UDINT(2650024474), "RiwoEventLogger", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::RiwoEventLogger.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
(::RiwoEventLogger.CopyLogFile0.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(598315731), "CopyLogFile0", 
(::RiwoEventLogger.ClearBuffer.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(364102494), "ClearBuffer", 
(::RiwoEventLogger.Log2FileSetting.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(1338570673), "Log2FileSetting", 
(::RiwoEventLogger.TestEvent.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(657477276), "TestEvent", 
(::RiwoEventLogger.BufferPos.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3982034587), "BufferPos", 
(::RiwoEventLogger.LastLoggedBuffPos.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(4039631277), "LastLoggedBuffPos", 
(::RiwoEventLogger.PrjChkSum.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(1864514551), "PrjChkSum", 
(::RiwoEventLogger.ExtraLoggingFiles.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(3361870892), "ExtraLoggingFiles", 
//Clients:
(::RiwoEventLogger.objRiwoTime.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(2319031274), "objRiwoTime", TO_UDINT(1116381182), "RiwoDateTimeLib", 0$UINT, 3$UINT, 
(::RiwoEventLogger.objSysMsg.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000000$UINT, TO_UDINT(187466823), "objSysMsg", TO_UDINT(792524216), "_SysMsg", 0$UINT, 0$UINT, 
(::RiwoEventLogger.objFileSys.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000000$UINT, TO_UDINT(229028325), "objFileSys", TO_UDINT(545279513), "_FileSys", 1$UINT, 20$UINT, 
(::RiwoEventLogger.objAsciiBin.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(4047284128), "objAsciiBin", TO_UDINT(2897291062), "ASCII_BIN", 1$UINT, 21$UINT, 
(::RiwoEventLogger.objLinker.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000000$UINT, TO_UDINT(1324810567), "objLinker", TO_UDINT(1793552568), "_Linker", 0$UINT, 5$UINT, 
(::RiwoEventLogger.objSigClib.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000000$UINT, TO_UDINT(1576254127), "objSigClib", TO_UDINT(77440046), "SigCLib", 0$UINT, 38$UINT, 
(::RiwoEventLogger.USBPluggedIn.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(1251703882), "USBPluggedIn", 
(::RiwoEventLogger.usbDriveLetter.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000000$UINT, TO_UDINT(4178054931), "usbDriveLetter", 
END_FUNCTION


#define USER_CNT_RiwoEventLogger 1

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_RiwoEventLogger] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION RiwoEventLogger::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_RiwoEventLogger, pCmd := #vmt.CmdTable);
	vmt.CmdTable.Write		:= #M_WR_DIRECT();
	vmt.CmdTable.Init		:= #Init();
#pragma warning (disable : 74)
	vmt.UserFcts[0]		:= #Background();

#pragma warning (default : 74)
	ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	CopyLogFile0.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF CopyLogFile0.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	ClearBuffer.pMeth			:= StoreMethod( #M_RD_DIRECT(), #ClearBuffer::Write() );
	IF ClearBuffer.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Log2FileSetting.pMeth			:= StoreMethod( #M_RD_DIRECT(), #Log2FileSetting::Write() );
	IF Log2FileSetting.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	TestEvent.pMeth			:= StoreMethod( #M_RD_DIRECT(), #TestEvent::Write() );
	IF TestEvent.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	BufferPos.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF BufferPos.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	LastLoggedBuffPos.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF LastLoggedBuffPos.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	PrjChkSum.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF PrjChkSum.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	ExtraLoggingFiles.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF ExtraLoggingFiles.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	ret_code	:= RiwoEventLogger();

END_FUNCTION

//{{LSL_IMPLEMENTATION
VAR_GLOBAL
  pRiwoEventLogger    : ^RiwoEventLogger;
END_VAR

FUNCTION RiwoEventLogger::RiwoEventLogger
	VAR_OUTPUT
		ret_code 	: ConfStates;
	END_VAR
  
  pRiwoEventLogger := this;
  
	ret_code := C_OK;

END_FUNCTION

FUNCTION VIRTUAL GLOBAL RiwoEventLogger::Init
VAR
  startupCmd: tEventLogCmd;
END_VAR

  _initCounter += 1;
  
  case _initCounter of
    
   INIT_CYCLE_1:
      
  
      // Clear local logbuffer
      ClearBuffer.Write(1);
      // Keep file always open
      _fileHandle := objFileSys.FileOpen(filename:=RIWO_EVENT_LOGFILE0, attributes:=ATT_CREATE+ATT_READ_WRITE);  
      if _fileHandle > 0 then
        // Go to end of file!
        objFileSys.Filelseek(handle:=_fileHandle, offset:=0, fromwhere:=2); 
      else
        ClassSvr-=1;
        TRACE_ERR("EventLogger could not open the RIWO_EVENT_LOGFILE");
      end_if;
      
      // Log start-up condition 
      // Only for eventlogger use
      startupCmd.elc_Level := 100 $tEventLogLevel; 
      startupCmd.elc_pThis := this;
      startupCmd.elc_Msg := ("Startup with Log2FileSetting = {0}");
      startupCmd.elc_Values[0] := (Log2FileSetting and 127) $dint;
      startupCmd.elc_Values[1] := 0;
      startupCmd.elc_Values[2] := 0;
      startupCmd.elc_Values[3] := 0;
      startupCmd.elc_Values[4] := 0;
      startupCmd.elc_DateTime.eldt_OpsAbso :=ops.tAbsolute;
      LogRule(LogCmd:=startupCmd);
      
      
   end_case;
   
  // Do on first scan to make sure that _memmove is enabled by OS 
  if _FirstScan & _firstScanReady = 0 then
    _firstScanReady := _initCounter;
  end_if;

END_FUNCTION



FUNCTION VIRTUAL GLOBAL RiwoEventLogger::Background
	VAR_INPUT
		EAX 	: UDINT;
	END_VAR
	VAR_OUTPUT
		state (EAX) 	: UDINT;
	END_VAR
  VAR
    pos2log:dint;
    usbDriveLetter :char;
    usbDirectory : Array [0..100] of char;
  END_VAR
  
  while LastLoggedBuffPos <> BufferPos & ClassSvr>=0 do
    pos2log := LastLoggedBuffPos +1;
    if pos2log > MAXLOGRULES-1 then pos2log:=0; end_if;
    
    _LogRow2File(LogCmd:=_logBuffer.LogRow[pos2log]);
    LastLoggedBuffPos := LastLoggedBuffPos.Write(pos2log);
    
  end_while;

  if CopyLogFile0 = 1 then
    if _fileHandle > 0 then
      objFileSys.FileClose(handle:=_fileHandle);
      CopyLogFile0 := objFileSys.FileCopy(pSource:=RIWO_EVENT_LOGFILE0, pDest:=RIWO_EVENT_LOGFILECOPY, udOption:=FC_CONTINUE_ON_ERROR);
      _fileHandle := objFileSys.FileOpen(filename:=RIWO_EVENT_LOGFILE0, attributes:=ATT_READ_WRITE);  // keep file always open
      objFileSys.Filelseek(handle:=_fileHandle, offset:=0, fromwhere:=2); // go to end of file!
      usbDriveLetter := _UsbHandler();
      if usbDriveLetter then 
        _memset(dest:=#usbDirectory[0], usByte:=0, cntr:=sizeof(usbDirectory));
        usbDirectory[0] := usbDriveLetter;
        _strcat(dest:=#usbDirectory[0], src:=":\RIWOEVENTLOG_0_COPY.CSV");
        CopyLogFile0 := objFileSys.FileCopy(pSource:=RIWO_EVENT_LOGFILECOPY, pDest:=#usbDirectory[0], udOption:=FC_CONTINUE_ON_ERROR);
      end_if;
    end_if;
  end_if;

	state := READY;

END_FUNCTION

FUNCTION GLOBAL RiwoEventLogger::LogMsg
	VAR_INPUT
		msg 	: ^CHAR;
		Val0 	: DINT;(* := 0 *)
		Val1 	: DINT;(* := 0 *)
		Val2 	: DINT;(* := 0 *)
		Val3 	: DINT;(* := 0 *)
		Val4 	: DINT;(* := 0 *)
		Level 	: tEventLogLevel;
	END_VAR
  VAR
    LogCmd        : tEventLogCmd;
  END_VAR

  LogCmd.elc_Level := Level;
  LogCmd.elc_pThis := this;
  LogCmd.elc_Msg := msg;
  LogCmd.elc_Values[0] := Val0;
  LogCmd.elc_Values[1] := Val1;
  LogCmd.elc_Values[2] := Val2;
  LogCmd.elc_Values[3] := Val3;
  LogCmd.elc_Values[4] := Val4;
  LogCmd.elc_DateTime.eldt_OpsAbso := ops.tAbsolute;

  LogRule(LogCmd);

END_FUNCTION

FUNCTION GLOBAL RiwoEventLogger::LogRule
	VAR_INPUT
		LogCmd 	: tEventLogCmd;
	END_VAR
  VAR
    prevBufferPos:dint;
  END_VAR
  
  // Must make sure that event logger is added to an network due to the posibility to call the functions globaly
  if pRiwoEventLogger <>  nil  then
    this := pRiwoEventLogger;
    
    if ClassSvr >= 0 then
    
      prevBufferPos := BufferPos;
      if BufferPos < MAXLOGRULES-1 then
        BufferPos.Write(BufferPos+1);
      else
        BufferPos.Write(0);
      end_if;
      
      _logBuffer.LogRow[BufferPos] := LogCmd;
      _logBuffer.LogRow[BufferPos].elc_Id := _logBuffer.LogRow[prevBufferPos].elc_Id + 1;
      
      objRiwoTime.GetDate(pDate:=#_logBuffer.LogRow[BufferPos].elc_DateTime.eldt_LogDate);
      objRiwoTime.GetTime(pTime:=#_logBuffer.LogRow[BufferPos].elc_DateTime.eldt_LogTime);
      
    elsif _initCounter <= 1 then
      TRACE0_WARN("_logBuffer not inititialized (yet). lost Eventlog: {0}", LogCmd.elc_Msg);
    elsif ClassSvr < 0 then
      TRACE0_ERR("lost Eventlog: {0}", LogCmd.elc_Msg);
    end_if;
  else
    TRACE_ERR("RiwoEventLogger no instance added to project!");
  end_if;
END_FUNCTION



FUNCTION VIRTUAL GLOBAL RiwoEventLogger::ClearBuffer::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR

	ClearBuffer := input;
  if ClearBuffer > 0 then
    _memset(#_logBuffer,0,sizeof(tLogBuffer));
    LastLoggedBuffPos.Write(-1);
    BufferPos.Write(MAXLOGRULES-1);
    ClearBuffer := 0;
  end_if;
	result := ClearBuffer;

END_FUNCTION



FUNCTION RiwoEventLogger::_logRow2File
	VAR_INPUT
		LogCmd 	: tEventLogCmd;
	END_VAR
  VAR
  	aLogTxt :ARRAY [0..245] OF CHAR;
    ObjectNameSize :udint;
  END_VAR
  
  if _LogEnabled(LogCmd) then // Check if setting is enabled to log to file

    _CheckSize();  // This will manage the file where the data is written
      
    if _fileHandle > 0 then
      
      _memset(dest:=#aLogTxt, usByte:=0, cntr:=sizeof(aLogTxt));
      
      _AddValue(dVal:=LogCmd.elc_Id $dint, pString:=#aLogTxt[0]);
      objRiwoTime.DateToAsciiString(pDate:=(#aLogTxt[_strlen(#aLogTxt[0])]), dte:=#LogCmd.elc_DateTime.eldt_LogDate);
      aLogTxt[_strlen(#aLogTxt[0])] := ';';
      objRiwoTime.TimeToAsciiString(pTime:=(#aLogTxt[_strlen(#aLogTxt[0])]), tme:= #LogCmd.elc_DateTime.eldt_LogTime);
      aLogTxt[_strlen(#aLogTxt[0])] := ';';
      _AddValue(dVal:=LogCmd.elc_DateTime.eldt_OpsAbso$dint, pString:=#aLogTxt[0]);
      
    case LogCmd.elc_Level of
        ell_Trace,
        100$tEventLogLevel:_strcat(dest:=#aLogTxt[0], src:="Trace;");
        ell_Debug:    _strcat(dest:=#aLogTxt[0], src:="Debug;");
        ell_Info:     _strcat(dest:=#aLogTxt[0], src:="Info;");
        ell_Warning:  _strcat(dest:=#aLogTxt[0], src:="Warning;");
        ell_Alarm:    _strcat(dest:=#aLogTxt[0], src:="Alarm;");
        ell_Error:    _strcat(dest:=#aLogTxt[0], src:="Error;");
        ell_fatal:    _strcat(dest:=#aLogTxt[0], src:="Fatal;");
      end_case;
          
      ObjectNameSize := _strlen(src:=sigclib_nameof_object(pthis:=LogCmd.elc_pThis));
      if  ObjectNameSize < ( sizeof(aLogTxt) - _strlen(#aLogTxt[0]) )  then
        _strcpy(dest:=#aLogTxt[_strlen(#aLogTxt[0])], src:=sigclib_nameof_object(pthis:=LogCmd.elc_pThis));
      end_if;
      
      aLogTxt[_strlen(#aLogTxt[0])] := ';';
      
      _MakeMessage(LogCmd:=LogCmd, pString:=#aLogTxt[_strlen(#aLogTxt[0])]);
      
      // Add values in seperate collumns for filtering in excel. Could be usefull
      _AddValue(dVal:=LogCmd.elc_Values[0], pString:=#aLogTxt[0]);
      _AddValue(dVal:=LogCmd.elc_Values[1], pString:=#aLogTxt[0]);
      _AddValue(dVal:=LogCmd.elc_Values[2], pString:=#aLogTxt[0]);
      _AddValue(dVal:=LogCmd.elc_Values[3], pString:=#aLogTxt[0]);
      _AddValue(dVal:=LogCmd.elc_Values[4], pString:=#aLogTxt[0]);
      
      aLogTxt[_strlen(#aLogTxt[0])] := 13;
      aLogTxt[_strlen(#aLogTxt[0])] := 10;
      
      objFileSys.FileWrite(handle:=_fileHandle, buffer:=#aLogTxt[0], length:=_strlen(#aLogTxt[0]));  
    
    end_if;
  end_if;
END_FUNCTION


FUNCTION RiwoEventLogger::_checkSize
VAR
  aLogTxt :ARRAY [0..245] OF CHAR;
END_VAR
  // Check if buffers must be replaced
  if objFileSys.FileLength(handle:=_fileHandle) > RIWO_EVENT_MAXFILESIZE | _fileHandle <= 0 then   
    objFileSys.FileClose(handle:=_fileHandle);
    
    if ExtraLoggingFiles = 1 then
      // Check RIWO_EVENT_LOGFILE5-8 as well
      objFileSys.FileDelete(filename:=RIWO_EVENT_LOGFILE8);
      objFileSys.RenameFile_Dir(actname:=RIWO_EVENT_LOGFILE7, newname:=RIWO_EVENT_LOGFILE8);
      objFileSys.FileDelete(filename:=RIWO_EVENT_LOGFILE7);
      objFileSys.RenameFile_Dir(actname:=RIWO_EVENT_LOGFILE6, newname:=RIWO_EVENT_LOGFILE7);
      objFileSys.FileDelete(filename:=RIWO_EVENT_LOGFILE6);
      objFileSys.RenameFile_Dir(actname:=RIWO_EVENT_LOGFILE5, newname:=RIWO_EVENT_LOGFILE6);
      objFileSys.FileDelete(filename:=RIWO_EVENT_LOGFILE5);
      objFileSys.RenameFile_Dir(actname:=RIWO_EVENT_LOGFILE4, newname:=RIWO_EVENT_LOGFILE5);
    end_if;        
    
    objFileSys.FileDelete(filename:=RIWO_EVENT_LOGFILE4);
    objFileSys.RenameFile_Dir(actname:=RIWO_EVENT_LOGFILE3, newname:=RIWO_EVENT_LOGFILE4);
    objFileSys.FileDelete(filename:=RIWO_EVENT_LOGFILE3);
    objFileSys.RenameFile_Dir(actname:=RIWO_EVENT_LOGFILE2, newname:=RIWO_EVENT_LOGFILE3);
    objFileSys.FileDelete(filename:=RIWO_EVENT_LOGFILE2);
    objFileSys.RenameFile_Dir(actname:=RIWO_EVENT_LOGFILE1, newname:=RIWO_EVENT_LOGFILE2);
    objFileSys.FileDelete(filename:=RIWO_EVENT_LOGFILE1);
    objFileSys.RenameFile_Dir(actname:=RIWO_EVENT_LOGFILE0, newname:=RIWO_EVENT_LOGFILE1);
    
    _fileHandle := objFileSys.FileOpen(filename:=RIWO_EVENT_LOGFILE0, attributes:=ATT_CREATE);  // create new file and open it.
    _memset(dest:=#aLogTxt, usByte:=0, cntr:=sizeof(aLogTxt));
    _strcat(dest:=#aLogTxt[0], src:="idx;date;time;opsTime;level;Object;message;value 0;value 1;value 2;value 3;value 4;");  // first row header-text
    aLogTxt[_strlen(#aLogTxt[0])] := 13;
    aLogTxt[_strlen(#aLogTxt[0])] := 10;
    objFileSys.FileWrite(handle:=_fileHandle, buffer:=#aLogTxt[0], length:=_strlen(#aLogTxt[0]));
  end_if;
  
END_FUNCTION



FUNCTION RiwoEventLogger::_addValue
	VAR_INPUT
		dVal 	: DINT;
		pString 	: ^CHAR;
	END_VAR
  VAR
    tmpString : array[0..255] of char;
  END_VAR

  _memset(dest:=#tmpString[0], usByte:=0, cntr:=sizeof(tmpString));
  
  objAsciiBin.Bin2Ascii(pt:= #tmpString[_strlen(#tmpString[0])], value:= dVal, format:= 16#0000$BINT);
  tmpString[_strlen(#tmpString[0])] := ';';                 // insert ; at end of value    
  _strcat(dest:=pString, src:=#tmpString[0]);
    
END_FUNCTION


FUNCTION RiwoEventLogger::_makeMessage
	VAR_INPUT
		LogCmd 	: tEventLogCmd;
		pString 	: ^CHAR;
	END_VAR
  VAR
    pCharPos :^CHAR;
    pNextPos :^CHAR;
    valnr :dint;
  END_VAR
  
  // Pwt: included check for accessexception
  if LogCmd.elc_Msg = nil | LogCmd.elc_Msg^ = 0 then 
    return;
  end_if;
  
  pCharPos := _strchr(src:=LogCmd.elc_Msg, chr:='{');
  
  if pCharPos <> nil then // value found
    valnr := 0;
    _strncpy(dest:=pString, src:=LogCmd.elc_Msg, max:=(pCharPos $udint-LogCmd.elc_Msg $udint)); // copy the first part
    objAsciiBin.Bin2Ascii(pt:= pString+_strlen(pString), value:= LogCmd.elc_Values[valnr], format:= 16#0000$BINT);
    pNextPos := pCharPos+3;
    pCharPos := _strchr(src:=pNextPos, chr:='{');
    while pCharPos <> nil do
      _strncpy(dest:=pString+_strlen(pString), src:=pNextPos, max:=(pCharPos $udint-pNextPos $udint)); // copy the first part
      valnr +=1;
      objAsciiBin.Bin2Ascii(pt:= pString+_strlen(pString), value:= LogCmd.elc_Values[valnr], format:= 16#0000$BINT);
      pNextPos := pCharPos+3;
      pCharPos := _strchr(src:=pNextPos, chr:='{');
    end_while;
    
    _strncpy(dest:=pString+_strlen(pString), src:=pNextPos, max:=((LogCmd.elc_Msg+_strlen(LogCmd.elc_Msg)) $udint-pNextPos $udint)); // copy the last part
    
  else
    _strncpy(dest:=pString, src:=LogCmd.elc_Msg, max:=_strlen(LogCmd.elc_Msg));
  end_if;
  
  _strcat(dest:=pString, src:=";");
  
END_FUNCTION

FUNCTION RiwoEventLogger::_logEnabled
	VAR_INPUT
		LogCmd 	: tEventLogCmd;
	END_VAR
	VAR_OUTPUT
		Enabled 	: DINT;
	END_VAR
  Enabled := false;
  
  case LogCmd.elc_Level of
    ell_Trace:    if Log2FileSetting.EnableTrace then Enabled := true; end_if;
    ell_Debug:    if Log2FileSetting.EnableDebug then Enabled := true; end_if;
    ell_Info:     if Log2FileSetting.EnableInfo then Enabled := true; end_if;
    ell_Warning:  if Log2FileSetting.EnableWarning then Enabled := true; end_if;
    ell_Alarm:    if Log2FileSetting.EnableAlarm then Enabled := true; end_if;
    ell_Error:    if Log2FileSetting.EnableError then Enabled := true; end_if;
    ell_fatal:    if Log2FileSetting.EnableFatal then Enabled := true; end_if;
    100$tEventLogLevel:Enabled := true;  // only for eventlogger use
  end_case;
  
  
END_FUNCTION


FUNCTION VIRTUAL GLOBAL RiwoEventLogger::Log2FileSetting::Write
	VAR_INPUT
		input (EAX) 	: tLogSetting;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: tLogSetting;
	END_VAR
  VAR
    mydat : UDINT; 
    para  : UDINT;
    parChangeCmd : tEventLogCmd;
  END_VAR 
  
  // Checkbox functionality for screen
  mydat := Log2FileSetting$UDINT; 
  para  := input$UDINT; 

  IF (para AND 16#80000000) THEN
    IF (para = 16#80000000) THEN
		mydat := mydat OR 16#80000000; 
	ELSE   
    	mydat := mydat OR (para AND 16#7FFFFFFF);  
    END_IF; 
  ELSE
    IF (para = 0) THEN
    	mydat := mydat AND 16#7FFFFFFF; 
    ELSE
      mydat := mydat AND (16#FFFFFFFF XOR para); 
    END_IF; 
  END_IF; 

  result:= Log2FileSetting := mydat$UDINT; 
  
  // Log settings change 
  parChangeCmd.elc_Level := 100 $tEventLogLevel;  // only for EventLogger use
  parChangeCmd.elc_pThis := this;
  parChangeCmd.elc_Msg := ("Log2FileSetting::Write(); parameterchange new value = {0}");
  parChangeCmd.elc_Values[0] := (Log2FileSetting and 127) $dint;
  parChangeCmd.elc_Values[1] := 0;
  parChangeCmd.elc_Values[2] := 0;
  parChangeCmd.elc_Values[3] := 0;
  parChangeCmd.elc_Values[4] := 0;
  parChangeCmd.elc_DateTime.eldt_OpsAbso:=ops.tAbsolute;
  LogRule(LogCmd:=parChangeCmd);
  
END_FUNCTION





FUNCTION VIRTUAL GLOBAL RiwoEventLogger::TestEvent::Write
	VAR_INPUT
		input (EAX) 	: DINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: DINT;
	END_VAR
  VAR
    tmpLogCmd     :tEventLogCmd;
  END_VAR

	TestEvent := input;
  if TestEvent = 1 then
    tmpLogCmd.elc_Level := 100 $tEventLogLevel; // only for eventlogger use
    tmpLogCmd.elc_pThis := this;
    tmpLogCmd.elc_Msg := ("Test Log rule by server write action: TestEvent");
    tmpLogCmd.elc_Values[0] := 0;
    tmpLogCmd.elc_Values[1] := 0;
    tmpLogCmd.elc_Values[2] := 0;
    tmpLogCmd.elc_Values[3] := 0;
    tmpLogCmd.elc_Values[4] := 0;
    tmpLogCmd.elc_DateTime.eldt_OpsAbso:=ops.tAbsolute;
    LogRule(LogCmd:=tmpLogCmd);
    TestEvent := 0;
  end_if;
	result := TestEvent;

END_FUNCTION


FUNCTION RiwoEventLogger::_usbHandler
	VAR_OUTPUT
		returnValue 	: CHAR;
	END_VAR

  returnValue := 0;
  if IsClientConnected(input:=#usbPluggedIn) & IsClientConnected(input:=#usbDriveLetter) then
    usbPluggedIn := usbPluggedIn.Read();
    if (usbPluggedIn > 0) then
      if IsClientConnected(#usbDriveLetter) then
        usbDriveLetter := usbDriveLetter.Read();
        returnValue := to_usint(usbDriveLetter+65);
      end_if;
    end_if;
  end_if;
  
END_FUNCTION


