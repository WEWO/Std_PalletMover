//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "_TCPIPClientInterface_MQTTClient"
	Revision           = "1.0"
	GUID               = "{4A93938E-1EB0-418E-B2F4-F8FF719517D9}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(610,120)"
	Comment            = "MQTT Specific derivation of the _TCPIPClientInterface Class.">
	<Channels>
		<Client Name="cPort" Required="true" Internal="false"/>
	</Channels>
	<RevDoku>
		<Owner Company="Sigmatek" Author="VelGer"/>
		<Dokumentation Revision="1.0" Date="2019-04-19" Author="VelGer" Company="Sigmatek" Description="Creation."/>
	</RevDoku>
	<Network Name="_TCPIPClientInterface_MQTTClient">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "_base"
				GUID       = "{FAE23626-8D78-462B-A90C-0571AC9D09B2}"
				Class      = "_TCPIPClientInterface"
				Position   = "(218,120)"
				Visualized = "false">
				<Channels>
					<Server Name="ClassSvr"/>
					<Server Name="ErrorCode"/>
					<Server Name="ErrorGroup"/>
					<Server Name="ErrorState"/>
					<Server Name="State"/>
					<Client Name="_TCPIPClient"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.ClassSvr" Destination="_base.ClassSvr" Vertices="(1096,210),(924,210),"/>
			<Connection Source="this.State" Destination="_base.State" Vertices="(1096,270),(924,270),"/>
			<Connection Source="this.ErrorState" Destination="_base.ErrorState" Vertices="(1096,330),(924,330),"/>
			<Connection Source="this.ErrorGroup" Destination="_base.ErrorGroup" Vertices="(1096,390),(924,390),"/>
			<Connection Source="this.ErrorCode" Destination="_base.ErrorCode" Vertices="(1096,450),(924,450),"/>
			<Connection Source="_base._TCPIPClient" Destination="this._TCPIPClient" Vertices="(218,210),(38,210),"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
#pragma using _TCPIPClientInterface

_TCPIPClientInterface_MQTTClient : CLASS
: _TCPIPClientInterface
	TYPE
#pragma pack(push, 1)
	  t_s_Callback : STRUCT
	    pThis : ^void;
	    pMethod : ^void;
	  END_STRUCT;
#pragma pack(pop)
	END_TYPE
  //Servers:
  //Clients:
	cPort 	: CltCh_DINT;
  //Variables:
		ErrorCallback 	: t_s_Callback;
		InfoCallback 	: t_s_Callback;			//! <Variable Comment="reserved" Name="InfoCallback"/>
		DataCallback 	: t_s_Callback;
  //Functions:
				//! <Function Comment="This Method is called if Data is received (Overwrite it)&#13;&#10;For receiving a spezial amount of Data you have to use the &#13;&#10;DataHandling Methode." Name="Response"/>
	FUNCTION VIRTUAL GLOBAL Response
		VAR_INPUT
			pData 	: ^void;			//! <Variable Comment="Pointer to Data" Name="Response.pData"/>
			udsize 	: UDINT;			//! <Variable Comment="Size of Data" Name="Response.udsize"/>
		END_VAR;
				//! <Function Comment="Method provides connection informations.&#13;&#10;-) TCP connected &#13;&#10;-) TCP disconnected &#13;&#10;-) connection is deleted &#13;&#10;" Name="InfoCallback"/>
	FUNCTION VIRTUAL GLOBAL InfoCallback
		VAR_INPUT
			FSM_TCP 	: _TCPIPClient::_FSM_TCPIP_CLIENT;
			InfoPara1 	: DINT;
			InfoPara2 	: DINT;
		END_VAR;
				//! <Function Comment="Method provides connection error states.&#13;&#10;-) TCP error&#13;&#10;-)  internal error&#13;&#10;-) receive timeout (in case of timeout is set)" Name="ErrCallback"/>
	FUNCTION VIRTUAL GLOBAL ErrCallback
		VAR_INPUT
			FSM_TCP 	: _TCPIPClient::_FSM_TCPIP_CLIENT;			//! <Variable Comment="shows the last error state." Name="ErrCallback.FSM_TCP"/>
			ErrGroup 	: DINT;			//! <Variable Comment="ErrorGroup = 0:&#13;&#10;   ErrorCode = TCP error status (defnition in lsl_st_tcp_user.h)&#13;&#10;&#13;&#10;ErrorGroup = 1:&#13;&#10;    ErrorCode = internal error status ( -1: receive timeout (in case of timeout is set))&#13;&#10;&#13;&#10;" Name="ErrCallback.ErrGroup"/>
			ErrCode 	: DINT;			//! <Variable Comment="ErrorGroup = 0:&#13;&#10;   ErrorCode = TCP error status (defnition in lsl_st_tcp_user.h)&#13;&#10;&#13;&#10;ErrorGroup = 1:&#13;&#10;    ErrorCode = internal error status ( -1: receive timeout (in case of timeout is set))" Name="ErrCallback.ErrCode"/>
		END_VAR;
	
	FUNCTION GLOBAL AddConnectionMQTT
		VAR_INPUT
			pIPAddress 	: ^CHAR;
			dPort 	: DINT;
			udTimeout 	: UDINT;
			bSSL 	: BOOL;
			pCACertPEMFilename 	: ^CHAR;
			pClientCertChainPEMFilename 	: ^CHAR;
			pClientCertKeyPEMFilename 	: ^CHAR;
			pKeyDecryptPwd 	: ^CHAR;
		END_VAR
		VAR_OUTPUT
			dHandle 	: DINT;
		END_VAR;
	
	FUNCTION GLOBAL InstallConnErrCallback
		VAR_INPUT
			pThis 	: ^void;
			pCallbackMeth 	: ^void;
		END_VAR;
	
	FUNCTION GLOBAL InstallConnInfoCallback
		VAR_INPUT
			pThis 	: ^void;
			pCallbackMeth 	: ^void;
		END_VAR;
	
	FUNCTION GLOBAL InstallDataReceivedCallback
		VAR_INPUT
			pThis 	: ^void;
			pCallbackMeth 	: ^void;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB _TCPIPClientInterface_MQTTClient::@CT_
0$UINT,
2#0100000000000000$UINT, //TY__TCPIPCLIENTINTERFACE_MQTTCLIENT
1$UINT, 0$UINT, (SIZEOF(::_TCPIPClientInterface_MQTTClient))$UINT, 
0$UINT, 1$UINT, 0$UINT, 
TO_UDINT(1222095338), "_TCPIPClientInterface_MQTTClient", //Class
TO_UDINT(670188634), "_TCPIPClientInterface", 1$UINT, 2$UINT, //Baseclass
//Servers:
//Clients:
(::_TCPIPClientInterface_MQTTClient.cPort.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(2368846560), "cPort", 
END_FUNCTION


#define USER_CNT__TCPIPClientInterface_MQTTClient 14

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT__TCPIPClientInterface_MQTTClient] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION _TCPIPClientInterface_MQTTClient::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
		nCmdSize	: UINT;
	END_VAR

	ret_code	:= _TCPIPClientInterface::@STD();
	IF ret_code <> C_OK THEN
		RETURN;
	END_IF;
	nCmdSize		:= _TCPIPClientInterface::ClassSvr.pMeth^.nCmds$UINT*SIZEOF(pVoid) + CMDMETH.Init;

	_memcpy((#vmt.CmdTable)$^USINT, _TCPIPClientInterface::ClassSvr.pMeth, nCmdSize);
	vmt.CmdTable.nCmds		:= nSTDCMD + USER_CNT__TCPIPClientInterface_MQTTClient;
#pragma warning (disable : 74)
	vmt.UserFcts[4]		:= #Response();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[12]		:= #InfoCallback();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[13]		:= #ErrCallback();

#pragma warning (default : 74)
	_TCPIPClientInterface::ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF _TCPIPClientInterface::ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION
FUNCTION TCP_ErrorOccurred_Callback   VAR_INPUT pThis : ^void; TCPFSM 	: _TCPIPClient::_FSM_TCPIP_CLIENT;  ErrorGroup 	: DINT; ErrorCode 	: DINT; END_VAR;
FUNCTION TCP_Info_Callback            VAR_INPUT pThis : ^void; TCPFSM 	: _TCPIPClient::_FSM_TCPIP_CLIENT;  dInfoPara1 	: DINT; dInfoPara2 	: DINT; END_VAR;
FUNCTION TCP_DataReceive_Callback     VAR_INPUT pThis : ^void; pData 	  : ^void;                            udSize 	    : UDINT;                    END_VAR;

FUNCTION GLOBAL _TCPIPClientInterface_MQTTClient::AddConnectionMQTT
	VAR_INPUT
		pIPAddress 	: ^CHAR;
		dPort 	: DINT;
		udTimeout 	: UDINT;
		bSSL 	: BOOL;
		pCACertPEMFilename 	: ^CHAR;
		pClientCertChainPEMFilename 	: ^CHAR;
		pClientCertKeyPEMFilename 	: ^CHAR;
		pKeyDecryptPwd 	: ^CHAR;
	END_VAR
	VAR_OUTPUT
		dHandle 	: DINT;
	END_VAR
  
  //Set the Port number
  cPort := dPort;
  cPort.Write(input:=cPort);
  
  //If Non-Encrypted  Connection
  if bSSL = FALSE then
    
    dHandle := AddConnection( pIPAddress    :=  pIPAddress, 
                              udTimeout     :=  udTimeout);
  
  
  //If the connection is encrypted
  else
    
    dHandle := AddConnectionSSL(pIPAddress                  :=  pIPAddress, 
                                pCACertPEMFilename          :=  pCACertPEMFilename, 
                                pClientCertChainPEMFilename :=  pClientCertChainPEMFilename, 
                                pClientCertKeyPEMFilename   :=  pClientCertKeyPEMFilename, 
                                pKeyDecryptPwd              :=  pKeyDecryptPwd, 
                                udTimeout                   :=  udTimeout);  
    
  end_if;

  
END_FUNCTION


FUNCTION GLOBAL _TCPIPClientInterface_MQTTClient::InstallConnErrCallback
	VAR_INPUT
		pThis 	: ^void;
		pCallbackMeth 	: ^void;
	END_VAR
  
  //If the input variables are OK, Set the Callback pointers to the internal struct.
  if pThis          &
     pCallbackMeth  then
    
    ErrorCallback.pThis   := pThis;
    ErrorCallback.pMethod := pCallbackMeth;
    
  end_if;

  
END_FUNCTION

FUNCTION GLOBAL _TCPIPClientInterface_MQTTClient::InstallConnInfoCallback
	VAR_INPUT
		pThis 	: ^void;
		pCallbackMeth 	: ^void;
	END_VAR
  
  
  //If the input variables are OK, Set the Callback pointers to the internal struct.
  if pThis          &
     pCallbackMeth  then
    
    InfoCallback.pThis   := pThis;
    InfoCallback.pMethod := pCallbackMeth;
    
  end_if;

  
END_FUNCTION

FUNCTION VIRTUAL GLOBAL _TCPIPClientInterface_MQTTClient::ErrCallback
	VAR_INPUT
		FSM_TCP 	: _TCPIPClient::_FSM_TCPIP_CLIENT;
		ErrGroup 	: DINT;
		ErrCode 	: DINT;
	END_VAR
  
  //If the Callback has been set, call the method with the input variables
  if ErrorCallback.pThis    &
     ErrorCallback.pMethod  then
  
    ErrorCallback.pMethod$TCP_ErrorOccurred_Callback( pThis       :=  ErrorCallback.pThis, 
                                                      TCPFSM      :=  FSM_TCP, 
                                                      ErrorGroup  :=  ErrGroup, 
                                                      ErrorCode   :=  ErrCode);
      
  end_if;

  
END_FUNCTION


FUNCTION VIRTUAL GLOBAL _TCPIPClientInterface_MQTTClient::InfoCallback
	VAR_INPUT
		FSM_TCP 	: _TCPIPClient::_FSM_TCPIP_CLIENT;
		InfoPara1 	: DINT;
		InfoPara2 	: DINT;
	END_VAR
  
  //If the Callback has been set, call the method with the input variables
  if InfoCallback.pThis   &
     InfoCallback.pMethod then
    
    InfoCallback.pMethod$TCP_Info_Callback( pThis       :=  InfoCallback.pThis, 
                                            TCPFSM      :=  FSM_TCP, 
                                            dInfoPara1  :=  InfoPara1, 
                                            dInfoPara2  :=  InfoPara2);
    
  end_if;

  
END_FUNCTION


FUNCTION GLOBAL _TCPIPClientInterface_MQTTClient::InstallDataReceivedCallback
	VAR_INPUT
		pThis 	: ^void;
		pCallbackMeth 	: ^void;
	END_VAR
  
  //If the pointers are ok, store the callback pointers.
  if pThis          &
     pCallbackMeth  then
    
    DataCallback.pThis    := pThis;
    DataCallback.pMethod  := pCallbackMeth;
    
  end_if;
  
END_FUNCTION


FUNCTION VIRTUAL GLOBAL _TCPIPClientInterface_MQTTClient::Response
	VAR_INPUT
		pData 	: ^void;
		udsize 	: UDINT;
	END_VAR
  
  //If the DataCallback pointers are ok, call the callback method.
  if DataCallback.pThis   &  
     DataCallback.pMethod then
    
    DataCallback.pMethod$TCP_DataReceive_Callback(pThis   :=  DataCallback.pThis, 
                                                  pData   :=  pData, 
                                                  udSize  :=  udsize);
    
  end_if;

  
END_FUNCTION
