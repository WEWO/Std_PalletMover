//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "CanBase"
	Revision           = "1.2"
	GUID               = "{941057A1-E809-440B-8174-D7E559B853AC}"
	RealtimeTask       = "false"
	CyclicTask         = "true"
	DefCyclictime      = "10 ms"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(284,120)"
	Comment            = "CAN Base class">
	<Channels>
		<Server Name="Server0" GUID="{C20239E5-507C-4796-B014-4F9B975738B1}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Client Name="Driver" Required="false" Internal="false"/>
		<Client Name="System" Required="false" Internal="false"/>
	</Channels>
	<Dependencies>
		<Files>
			<File Path=".\Class\CanBase\CanBaseGl.h" Include="false"/>
		</Files>
	</Dependencies>
	<RevDoku>
		<Owner Company="SigmaControl" Author="Johan Embregts"/>
		<Dokumentation Revision="1.2" Date="2015-12-01" Author="Johan Embregts" Company="SigmaControl" Description="DefaultCyclic set to 10mSec."/>
		<Dokumentation Revision="1.1" Date="2013-06-20" Author="Johan Embregts" Company="SigmaControl" Description="ObjectClient Driver is not requiered."/>
	</RevDoku>
</Class>
*)
CanBase : CLASS
	TYPE
	  IntrStr : STRUCT  //! <Type Comment="Internal Class information" Name="IntrStr"/>
	    ObjInformation : LSLOBJ_INFO;  //! <Type Comment="Object information" Name="IntrStr.ObjInformation"/>
	  END_STRUCT;
	END_TYPE
  //Servers:
	Server0 	: SvrChCmd_DINT;
  //Clients:
	Driver 	: CltChCmd_CanDriverBase;
	System 	: CltChCmd_System;
  //Variables:
		Alive 	: DINT;			//! <Variable Comment="1= This station has been alive, 2= PollRequest" Name="Alive"/>
		tAlive 	: UDINT;			//! <Variable Comment="Time delay between keeping comm alive" Name="tAlive"/>
		tSend 	: UDINT;			//! <Variable Comment="Starttime send CAN object" Name="tSend"/>
		TxData 	: CanObjStr;			//! <Variable Comment="Send CAN object" Name="TxData"/>
		Intr 	: IntrStr;			//! <Variable Comment="Internal Class information" Name="Intr"/>
  //Functions:
				//! <Function Comment="[#ENGLISH]&#13;&#10;" Name="Init"/>
	FUNCTION VIRTUAL GLOBAL Init;
				//! <Function Comment="[#ENGLISH]&#13;&#10;" Name="CyWork"/>
	FUNCTION VIRTUAL GLOBAL CyWork
		VAR_INPUT
			EAX 	: UDINT := EAX;
		END_VAR
		VAR_OUTPUT
			state (EAX) 	: UDINT;
		END_VAR;
				//! <Function Comment=" 0 = OK.&#13;&#10;-1 = None existing CAN IO number.&#13;&#10;-2 = Size data buffer to Large.&#13;&#10;-3 = Driver client is not connected." Name="SendCanObj"/>
	FUNCTION VIRTUAL GLOBAL SendCanObj
		VAR_INPUT
			SendPtr 	: ^CanObjStr;			//! <Variable Comment="Pointer to CAN object to be send." Name="SendCanObj.SendPtr"/>
		END_VAR
		VAR_OUTPUT
			State 	: DINT;			//! <Variable Comment="0= ok, -1= ID error, -2= Size error." Name="SendCanObj.State"/>
		END_VAR;
				//! <Function Comment="[#ENGLISH]&#13;&#10;" Name="GetCanObj"/>
	FUNCTION VIRTUAL GLOBAL GetCanObj
		VAR_INPUT
			ObjNr 	: HDINT;			//! <Variable Comment="Test for a CAN Object with this ID." Name="GetCanObj.ObjNr"/>
		END_VAR
		VAR_OUTPUT
			Ptr2ID 	: ^CanObjStr;			//! <Variable Comment="Pointer to data of requested CAN object ID.&#13;&#10;When NIL no CAN object received or Client Driver not connected." Name="GetCanObj.Ptr2ID"/>
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma usingLtd CanDriverBase
#pragma usingLtd System


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB CanBase::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_CANBASE
1$UINT, 2$UINT, (SIZEOF(::CanBase))$UINT, 
1$UINT, 2$UINT, 0$UINT, 
TO_UDINT(472728498), "CanBase", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::CanBase.Server0.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(2759080719), "Server0", 
//Clients:
(::CanBase.Driver.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000000$UINT, TO_UDINT(3785276255), "Driver", TO_UDINT(1472885325), "CanDriverBase", 0$UINT, 7$UINT, 
(::CanBase.System.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000000$UINT, TO_UDINT(968218125), "System", TO_UDINT(968218125), "System", 0$UINT, 1$UINT, 
END_FUNCTION


#define USER_CNT_CanBase 2

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_CanBase] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION CanBase::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_CanBase, pCmd := #vmt.CmdTable);
	vmt.CmdTable.Init		:= #Init();
	vmt.CmdTable.CyWork		:= #CyWork();
#pragma warning (disable : 74)
	vmt.UserFcts[0]		:= #SendCanObj();

#pragma warning (default : 74)
#pragma warning (disable : 74)
	vmt.UserFcts[1]		:= #GetCanObj();

#pragma warning (default : 74)
	Server0.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF Server0.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION


//*********************Inserted from .\CanBase\CanBase_00_00.st*********************



 



//[#ENGLISH]
(*	****************************************************************************************
	CANBase	driver to communicate with one CAN device
	****************************************************************************************

	Server	Server0		: 0				= Ok
						  -1			= Alive timeout.
	Client	Driver		: Connection to _CanDriverBase class for interface with the hardware
			System

	****************************************************************************************
	Created  : JE  : Wk 48/04	| Lasal V00:61f 	|
	Tested   : JE  : Wk 01/01	| Lasal V01:01:103	| c-IPC	- 2.2 x1.8	- 1.1.11 1.00.3.0
	Rev00:00 : JE  : Wk mm/yy	| Lasal Vxx:xxx		| c-IPC	-	-
	****************************************************************************************
//[#DEUTSCH]
(*	****************************************************************************************

	****************************************************************************************


	****************************************************************************************)

FUNCTION VIRTUAL GLOBAL CanBase::Init

(*
 * Synchronise timing with task.
 *)
System.GetObjectInfo( ThisObj0	:= This
					, TaskType0	:= Obj_Ct
					, ObjInfo	:= #Intr.ObjInformation);
(*
IF Intr.ObjInformation.OrgPeriod> 0 THEN
	TaskRes	:= to_dint( Intr.ObjInformation.OrgPeriod);	// this gives the ct timebase
ELSE
	Server0	:= -12;
END_IF;
*)
Alive	:= 0;

END_FUNCTION //VIRTUAL GLOBAL CanBase::Init

//[#ENGLISH]
(*	****************************************************************************************
	Cyclic task
	****************************************************************************************)

FUNCTION VIRTUAL GLOBAL CanBase::CyWork
VAR_INPUT
	EAX		: UDINT;
END_VAR
VAR_OUTPUT
	state		: UDINT;
END_VAR

// If no data within time recieved then device is not alive
If Alive> 0 Then
	If Ops.tAbsolute- tAlive> cCanOpenAliveTime Then
		Alive		:= 0;
	End_If;
End_If;

State	:= Ready$Dint;
END_FUNCTION //VIRTUAL GLOBAL CanBase::CyWork


//[#ENGLISH]
//[>ObjNr]Test for a CAN Object with this ID.
//[<Ptr2ID]Pointer to data of requested CAN object ID.
FUNCTION VIRTUAL GLOBAL CanBase::GetCanObj
VAR_INPUT
	ObjNr		: HDINT;
END_VAR
VAR_OUTPUT
	Ptr2ID		: ^CanObjStr;
END_VAR

if ObjNr <= cMaxCanMem
 & IsClientConnected( #Driver)
then
	Ptr2ID	:= Driver.GetObject( ObjNr);
	If Ptr2ID<> Nil Then
		Alive		:= 1;
		tAlive		:= Ops.tabsolute;
	End_If;
else
	Ptr2ID	:= Nil;
end_If;

END_FUNCTION //VIRTUAL GLOBAL CanBase::GetCanObj


//[#ENGLISH]
//[>SendPtr]Pointer to CAN object to be send.
//[<State]0= ok, -1= ID error, -2= Size error.
(*	****************************************************************************************
	Send a CAN object
	****************************************************************************************

	When the input object number "ObjNr" is recieved by the
	CAN Driver class then the return value will be the pointer
	to the recieved data in format "CanObjStr".
	the object number must be within the range of 0 and MaxCanMem_

	****************************************************************************************

	State	:  0	= ok.
			    -1	= None existing CAN ID number.
			    -2	= Size data bufer to large.
          -3  = Driver client is not connected.

	****************************************************************************************)
FUNCTION VIRTUAL GLOBAL CanBase::SendCanObj
VAR_INPUT
	SendPtr		: ^CanObjStr;
END_VAR
VAR_OUTPUT
	State		: DINT;
END_VAR

if IsClientConnected( #Driver) then
  if SendPtr^.ID<= cMaxCanMem then
    if SendPtr^.Size <= cMaxCanData then
      State	:= Driver.SendObject( TxBuffer	:= SendPtr);
      if State>= 0 then
        tSend	:= Ops.tAbsolute;
      end_if;
    else
      State	:= -2;
    end_If;
  else
    State	:= -1;
  end_if;
else
  State	:= -3;
end_if;

END_FUNCTION //VIRTUAL GLOBAL CanBase::SendCanObj
