//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "PivotWheel"
	Revision           = "0.0"
	GUID               = "{8A49F0D2-F676-4508-82FF-B632F1909FFE}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(750,300)">
	<Channels>
		<Server Name="ClassSvr" GUID="{E5D95EC3-580F-482F-83D8-646A6C09075C}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="DistanceToCenterX" GUID="{0A95F051-B419-4B91-B472-4CE14AE9BE5B}" Visualized="false" Initialize="true" WriteProtected="false" Retentive="File" Comment="There is a coordinate frame attached to the center of the AGV. This sever describes the position of the wheel in this coordinate frame in mm. This is the x-component."/>
		<Server Name="DistanceToCenterY" GUID="{EB553CCC-0364-4EB7-A2CF-CE50FB5D6810}" Visualized="false" Initialize="true" WriteProtected="false" Retentive="File" Comment="There is a coordinate frame attached to the center of the AGV. This sever describes the position of the wheel in this coordinate frame in mm. This is the y-component."/>
		<Server Name="PivotWheelReferenced" GUID="{EC8BE497-6377-4689-9BE1-256DB59ED6F0}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Client Name="objDrive" Required="false" Internal="false"/>
		<Client Name="objSteer" Required="false" Internal="false"/>
	</Channels>
</Class>
*)
PivotWheel : CLASS
	TYPE
#pragma pack(push, 1)
	  tPivotWheelParameters : STRUCT  //! <Type Public="true" Name="tPivotWheelParameters"/>
	    pwp_DistanceToCenterX : REAL;
	    pwp_DistanceToCenterY : REAL;
	    pwp_PivotWheelReferenced : DINT;
	  END_STRUCT;
#pragma pack(pop)
#pragma pack(push, 4)
	  tPivotWheelStatus : STRUCT  //! <Type Public="true" Name="tPivotWheelStatus"/>
	    pws_PivotWheelExists : BOOL;
	    pws_Driving : HandleSteering::tDriveStatus;
	    pws_Steering : HandleSteering::tDriveStatus;
	  END_STRUCT;
#pragma pack(pop)
	END_TYPE
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
	DistanceToCenterX 	: SvrCh_REAL;
	DistanceToCenterY 	: SvrCh_REAL;
	PivotWheelReferenced 	: SvrCh_DINT;
  //Clients:
	objSteer 	: CltChCmd_HandleSteering;
	objDrive 	: CltChCmd_HandleSteering;
  //Variables:
  //Functions:
	
	FUNCTION GLOBAL SendCurrentState;
	
	FUNCTION GLOBAL GetPivotWheelParameters
		VAR_OUTPUT
			returnValue 	: tPivotWheelParameters;
		END_VAR;
	
	FUNCTION GLOBAL SetPivotWheelSetpoints
		VAR_INPUT
			SPSpeed 	: REAL;
			SPAngle 	: REAL;
		END_VAR;
	
	FUNCTION GLOBAL GetActualAngle
		VAR_OUTPUT
			returnValue 	: REAL;
		END_VAR;
	
	FUNCTION GLOBAL GetActualSpeed
		VAR_OUTPUT
			returnValue 	: REAL;
		END_VAR;
	
	FUNCTION GLOBAL GetPivotWheelStatus
		VAR_OUTPUT
			returnValue 	: tPivotWheelStatus;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL PivotWheelReferenced::Read
		VAR_OUTPUT
			output (EAX) 	: DINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma usingLtd HandleSteering


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB PivotWheel::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_PIVOTWHEEL
0$UINT, 0$UINT, (SIZEOF(::PivotWheel))$UINT, 
4$UINT, 2$UINT, 0$UINT, 
TO_UDINT(3457971339), "PivotWheel", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::PivotWheel.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
(::PivotWheel.DistanceToCenterX.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(4129488195), "DistanceToCenterX", 
(::PivotWheel.DistanceToCenterY.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(2166738389), "DistanceToCenterY", 
(::PivotWheel.PivotWheelReferenced.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(332273145), "PivotWheelReferenced", 
//Clients:
(::PivotWheel.objSteer.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000000$UINT, TO_UDINT(2905516847), "objSteer", TO_UDINT(934856050), "HandleSteering", 0$UINT, 0$UINT, 
(::PivotWheel.objDrive.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000000$UINT, TO_UDINT(2980282960), "objDrive", TO_UDINT(934856050), "HandleSteering", 0$UINT, 0$UINT, 
END_FUNCTION


#define USER_CNT_PivotWheel 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_PivotWheel] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION PivotWheel::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_PivotWheel, pCmd := #vmt.CmdTable);
	ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	DistanceToCenterX.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF DistanceToCenterX.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	DistanceToCenterY.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF DistanceToCenterY.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	PivotWheelReferenced.pMeth			:= StoreMethod( #PivotWheelReferenced::Read(), #M_NO_F() );
	IF PivotWheelReferenced.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION


FUNCTION GLOBAL PivotWheel::SendCurrentState

END_FUNCTION


FUNCTION GLOBAL PivotWheel::GetPivotWheelParameters
	VAR_OUTPUT
		returnValue 	: tPivotWheelParameters;
	END_VAR

  returnValue.pwp_DistanceToCenterX := DistanceToCenterX;
  returnValue.pwp_DistanceToCenterY := DistanceToCenterY;
  returnValue.pwp_PivotWheelReferenced := PivotWheelReferenced;



END_FUNCTION


FUNCTION GLOBAL PivotWheel::SetPivotWheelSetpoints
	VAR_INPUT
		SPSpeed 	: REAL;
		SPAngle 	: REAL;
	END_VAR

  objDrive.Setpoint.Write(SPSpeed);
  objSteer.Setpoint.Write(SPAngle);

END_FUNCTION


FUNCTION VIRTUAL GLOBAL PivotWheel::PivotWheelReferenced::Read
	VAR_OUTPUT
		output (EAX) 	: DINT;
	END_VAR

  PivotWheelReferenced := objDrive.GetReferenced() & objSteer.GetReferenced();
	output := PivotWheelReferenced;

END_FUNCTION


FUNCTION GLOBAL PivotWheel::GetActualAngle
	VAR_OUTPUT
		returnValue 	: REAL;
	END_VAR
  VAR
  	tmpDriveStatus : HandleSteering::tDriveStatus;
  END_VAR

  tmpDriveStatus := objSteer.GetDriveStatus();
  returnValue := tmpDriveStatus.ds_Actual;

END_FUNCTION


FUNCTION GLOBAL PivotWheel::GetActualSpeed
	VAR_OUTPUT
		returnValue 	: REAL;
	END_VAR
  VAR
  	tmpDriveStatus : HandleSteering::tDriveStatus;
  END_VAR

  tmpDriveStatus := objDrive.GetDriveStatus();
  returnValue := tmpDriveStatus.ds_Actual;  

END_FUNCTION


FUNCTION GLOBAL PivotWheel::GetPivotWheelStatus
	VAR_OUTPUT
		returnValue 	: tPivotWheelStatus;
	END_VAR
  
  returnValue.pws_PivotWheelExists := TRUE;
  returnValue.pws_Driving := objDrive.GetDriveStatus();
  returnValue.pws_Steering := objSteer.GetDriveStatus();

END_FUNCTION
