//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "_Settingsbase"
	Revision           = "0.0"
	GUID               = "{1959CBB5-7B62-4840-92EF-30D87D1077D8}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(420,240)">
	<Channels>
		<Server Name="ClassSvr" GUID="{A71F6FFC-2FB2-4A07-98DE-F0926319E2F4}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="ItemError" GUID="{9B2EFCD0-24B9-4C62-937A-BECD5E4F9631}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="ItemOk" GUID="{8890418B-1674-4DBC-BBC7-D9CA394045D6}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Client Name="JsReader" Required="true" Internal="true"/>
		<Client Name="JsWriter" Required="true" Internal="true"/>
		<Client Name="op_LogData" Required="false" Internal="false" Comment="Output for logging data to SF_Logger"/>
		<Client Name="WewoBase3" Required="true" Internal="true"/>
	</Channels>
	<Network Name="_Settingsbase">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name           = "JsReader"
				GUID           = "{B434C39C-358C-4AB1-A5D3-F6E245BF6B4C}"
				Class          = "_JSONReader"
				Position       = "(780,210)"
				Visualized     = "true"
				Remotely       = "true"
				BackgroundTime = "10 ms">
				<Channels>
					<Server Name="ClassSvr"/>
					<Server Name="LibraryVersion"/>
					<Server Name="ReadFSM"/>
					<Client Name="_FileSys"/>
					<Client Name="SigCLib"/>
				</Channels>
			</Object>
			<Object
				Name           = "JsWriter"
				GUID           = "{EB46B8C3-4883-43D2-8066-FF0FE36506F2}"
				Class          = "_JSONWriter"
				Position       = "(180,210)"
				Visualized     = "true"
				Remotely       = "true"
				BackgroundTime = "10 ms">
				<Channels>
					<Server Name="ClassSvr"/>
					<Server Name="LibraryVersion"/>
					<Server Name="WriteFSM"/>
					<Client Name="_FileSys"/>
					<Client Name="SigCLib"/>
				</Channels>
			</Object>
			<Object
				Name       = "WewoBase3"
				GUID       = "{87D8A843-3879-41DD-B42D-092B0E8E1D91}"
				Class      = "WewoBase"
				Position   = "(570,540)"
				Visualized = "false">
				<Channels>
					<Server Name="m_Id"/>
					<Server Name="m_p_Name"/>
					<Server Name="o_ErrorWarningStatus"/>
					<Server Name="ObjectStatus"/>
					<Server Name="ToObject"/>
					<Client Name="c_Group"/>
					<Client Name="op_LogData"/>
					<Client Name="toOsLibTaskObjControl"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.JsReader" Destination="JsReader.ClassSvr"/>
			<Connection Source="this.JsWriter" Destination="JsWriter.ClassSvr"/>
			<Connection Source="this.WewoBase3" Destination="WewoBase3.ToObject"/>
			<Connection Source="WewoBase3.op_LogData" Destination="this.op_LogData" Vertices="(570,630),(38,210),"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
_Settingsbase : CLASS
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
	ItemOk 	: SvrCh_DINT;
	ItemError 	: SvrCh_DINT;
  //Clients:
	JsReader 	: CltChCmd__JSONReader;
	JsWriter 	: CltChCmd__JSONWriter;
	WewoBase3 	: CltChCmd_WewoBase;
	op_LogData 	: CltCh_gpt_LogData;
  //Variables:
		pObjectHandle 	: ^_cJSON::t_s_cJSON;
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL Init;
	
	FUNCTION UpdateFile
		VAR_INPUT
			Name 	: ^CHAR;
		END_VAR
		VAR_OUTPUT
			Value 	: BOOL;
		END_VAR;
	
	FUNCTION Method;
	
	FUNCTION GLOBAL GetObjectPath
		VAR_INPUT
			Path 	: ^CHAR;
		END_VAR
		VAR_OUTPUT
			GetValue 	: ^_cJSON::t_s_cJSON;
		END_VAR;
	
	FUNCTION GLOBAL GetDintValue
		VAR_INPUT
			Path 	: ^CHAR;
		END_VAR
		VAR_OUTPUT
			value 	: DINT;
		END_VAR;
	
	FUNCTION GLOBAL GetStringValue
		VAR_INPUT
			Path 	: ^CHAR;
		END_VAR
		VAR_OUTPUT
			value 	: ^CHAR;
		END_VAR;
	
	FUNCTION GLOBAL GetDoubleValue
		VAR_INPUT
			Path 	: ^CHAR;
		END_VAR
		VAR_OUTPUT
			value 	: REAL;
		END_VAR;
	
	FUNCTION GLOBAL GetBooleanValue
		VAR_INPUT
			Path 	: ^CHAR;
		END_VAR
		VAR_OUTPUT
			value 	: BOOL;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma using _JSONReader
#pragma using _JSONWriter
#pragma using WewoBase


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB _Settingsbase::@CT_
0$UINT,
2#0100000000000010$UINT, //TY__SETTINGSBASE
0$UINT, 0$UINT, (SIZEOF(::_Settingsbase))$UINT, 
3$UINT, 4$UINT, 0$UINT, 
TO_UDINT(3394779963), "_Settingsbase", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::_Settingsbase.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
(::_Settingsbase.ItemOk.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(375516738), "ItemOk", 
(::_Settingsbase.ItemError.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2349504126), "ItemError", 
//Clients:
(::_Settingsbase.JsReader.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(1111956863), "JsReader", TO_UDINT(722092968), "_JSONReader", 1$UINT, 1$UINT, 
(::_Settingsbase.JsWriter.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(433605825), "JsWriter", TO_UDINT(1888817686), "_JSONWriter", 1$UINT, 0$UINT, 
(::_Settingsbase.WewoBase3.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(3565479382), "WewoBase3", TO_UDINT(817841270), "WewoBase", 0$UINT, 29$UINT, 
(::_Settingsbase.op_LogData.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000100$UINT, TO_UDINT(1597732449), "op_LogData", 
END_FUNCTION


#define USER_CNT__Settingsbase 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT__Settingsbase] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION _Settingsbase::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT__Settingsbase, pCmd := #vmt.CmdTable);
	vmt.CmdTable.Init		:= #Init();
	ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION


FUNCTION _Settingsbase::UpdateFile
	VAR_INPUT
		Name 	: ^CHAR;
	END_VAR
	VAR_OUTPUT
		Value 	: BOOL;
	END_VAR

  Name:="c:\settings\Configuration.json";
    
    Value :=JsReader.ReadFile(Name) ;
    if Value = TRUE then
        pObjectHandle := JsReader.GetMainElement();
        ItemOk      :=  0;
        ItemError   :=  0;
    end_if;
     
END_FUNCTION


FUNCTION _SettingsBase::Method

END_FUNCTION


FUNCTION GLOBAL _Settingsbase::GetObjectPath
	VAR_INPUT
		Path 	: ^CHAR;
	END_VAR
	VAR_OUTPUT
		GetValue 	: ^_cJSON::t_s_cJSON;
	END_VAR
    
    var 
        LenString : dint;
        counter :dint;
        LocString : array[0..255] of CHAR;
        pos:byte;
        curchar :char;
    END_VAR
    
   LenString :=  _strlen(src:=Path)$dint; 
   Counter := 0;
   GetValue :=  pObjectHandle;
  
    for  pos := 0 to LenString$dint do
        curchar :=  (path+pos)^ ;
 
        if (curchar = '.') | (curchar = 0)  | (curchar = '\') | (curchar = '/' ) then
            LocString[counter] := 0;
            if counter > 0 then
                GetValue := JsReader.GetObjectItem(object:=GetValue , string:=#LocString[0]);
                if pObjectHandle = nil then
                    exit;
                end_if;
            End_if;
            Counter :=0;
        else
            LocString[Counter] :=  curchar;
            Counter += 1;
        end_if;  
    end_for;
    
    if GetValue <> nil then
       ItemOk += 1;
    else
       ItemError += 1;
    end_if;
END_FUNCTION


FUNCTION GLOBAL _Settingsbase::GetDintValue
	VAR_INPUT
		Path 	: ^CHAR;
	END_VAR
	VAR_OUTPUT
		value 	: DINT;
	END_VAR
    
    VAR
    	pReadVariableHandle  : ^_cJSON::t_s_cJSON;
    END_VAR

    pReadVariableHandle := GetObjectPath(Path);
    if pReadVariableHandle <> nil then
        value := pReadVariableHandle^.Val_Int$Dint;
    end_if;

END_FUNCTION


FUNCTION GLOBAL _Settingsbase::GetStringValue
	VAR_INPUT
		Path 	: ^CHAR;
	END_VAR
	VAR_OUTPUT
		value 	: ^CHAR;
	END_VAR

    VAR
    	pReadVariableHandle  : ^_cJSON::t_s_cJSON;
    END_VAR

    pReadVariableHandle := GetObjectPath(Path);
    if pReadVariableHandle <> nil then
        value := pReadVariableHandle^.Val_String$^char;
    end_if;

END_FUNCTION


FUNCTION GLOBAL _Settingsbase::GetDoubleValue
	VAR_INPUT
		Path 	: ^CHAR;
	END_VAR
	VAR_OUTPUT
		value 	: REAL;
	END_VAR
    
    VAR
    	pReadVariableHandle  : ^_cJSON::t_s_cJSON;
       temp:dint;
    END_VAR
    
    value := 0;

    pReadVariableHandle := GetObjectPath(Path);
    if pReadVariableHandle <> nil then
        temp :=pReadVariableHandle^.Val_String$dint;
    end_if;

    value := to_real(temp);
END_FUNCTION


FUNCTION VIRTUAL GLOBAL _Settingsbase::Init
   
END_FUNCTION


FUNCTION GLOBAL _Settingsbase::GetBooleanValue
	VAR_INPUT
		Path 	: ^CHAR;
	END_VAR
	VAR_OUTPUT
		value 	: BOOL;
	END_VAR
       VAR
    	pReadVariableHandle  : ^_cJSON::t_s_cJSON;
        temp : ^char;
    END_VAR
    
      value := false;

    pReadVariableHandle := GetObjectPath(Path);
    if pReadVariableHandle <> nil then
        if pReadVariableHandle^.Val_String <> nil then
        _strupr(str:=pReadVariableHandle^.Val_String);
           if _stricmp(pReadVariableHandle^.Val_String ,temp) = 0 then
            value := true;
            else
            Value := false;
          end_if;
      end_if;
      else
            value := false
            // write error
     end_if;

END_FUNCTION
