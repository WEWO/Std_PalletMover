//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "Merker"
	Revision           = "1.0"
	GUID               = "{AB61EC81-3A16-11D4-83FF-00902787C17B}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "true"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	IconPath           = ".\Class\Merker\Merker.ICO"
	SharedCommandTable = "true"
	Objectsize         = "(420,120)"
	Comment            = "to store data, not constant, not retentive">
	<Channels>
		<Server Name="Data" GUID="{AB61EC82-3A16-11D4-83FF-00902787C17B}" Visualized="true" Initialize="true" WriteProtected="false" Retentive="false"/>
	</Channels>
	<Dependencies>
		<Files>
			<File Path=".\Class\Ram\Ram.h" Include="false"/>
		</Files>
	</Dependencies>
</Class>
*)
Merker : CLASS
  //Servers:
	Data 	: SvrChCmd_DINT;
  //Clients:
  //Variables:
  //Functions:
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB Merker::@CT_
0$UINT,
2#0100000000000000$UINT, //TY_MERKER
1$UINT, 0$UINT, (SIZEOF(::Merker))$UINT, 
1$UINT, 0$UINT, 0$UINT, 
TO_UDINT(2276934072), "Merker", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::Merker.Data.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(2607161047), "Data", 
//Clients:
END_FUNCTION


#define USER_CNT_Merker 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_Merker] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION Merker::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_Merker, pCmd := #vmt.CmdTable);
	vmt.CmdTable.Write		:= #M_WR_DIRECT();
	Data.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF Data.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION

