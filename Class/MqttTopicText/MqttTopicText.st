//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "MqttTopicText"
	Revision           = "0.0"
	GUID               = "{377C0CD8-686F-4BF1-A14F-2BCCB722B662}"
	RealtimeTask       = "false"
	CyclicTask         = "true"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(730,120)">
	<Channels>
		<Server Name="DataReceived" GUID="{451E4B8F-F47B-423E-AD3F-1D312EB8A080}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="EnableMessage" GUID="{22B09C63-DA39-4E72-83D6-444BCEDD6D25}" Visualized="false" Initialize="true" WriteProtected="false" Retentive="File"/>
		<Client Name="objRiwoEventLogger" Required="false" Internal="false"/>
	</Channels>
	<Network Name="MqttTopicText">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "_base"
				GUID       = "{05F648CE-A76B-4F29-B3CA-E8495312B81C}"
				Class      = "MQTTTopicString"
				Position   = "(218,120)"
				Visualized = "true"
				Remotely   = "true">
				<Channels>
					<Server Name="DataString"/>
					<Server Name="GrantedQoS"/>
					<Server Name="PublishInterval" Value="10 sec"/>
					<Server Name="QoS"/>
					<Server Name="RetainData"/>
					<Server Name="TopicName"/>
					<Server Name="TopicState"/>
					<Server Name="TopicType"/>
					<Client Name="cAutoResetTime" Value="MQTTTOPIC_DEFAULT_AUTORESET_TIME"/>
					<Client Name="cPublishTimeout" Value="MQTTTOPIC_DEFAULT_PUBLISH_TIMEOUT"/>
					<Client Name="cSubscribeTimeout" Value="MQTTTOPIC_DEFAULT_SUBSCRIBE_TIMEOUT"/>
					<Client Name="cUnsubscribeTimeout" Value="MQTTTOPIC_DEFAULT_UNSUBSCRIBE_TIMEOUT"/>
					<Client Name="ocMQTTClient_Interface"/>
					<Client Name="ocSigCLib"/>
					<Client Name="ocStdLib"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.TopicState" Destination="_base.TopicState" Vertices="(2236,210),(2064,210),"/>
			<Connection Source="this.TopicType" Destination="_base.TopicType" Vertices="(2236,270),(2064,270),"/>
			<Connection Source="this.TopicName" Destination="_base.TopicName" Vertices="(2236,330),(2064,330),"/>
			<Connection Source="this.PublishInterval" Destination="_base.PublishInterval" Vertices="(2236,390),(2064,390),"/>
			<Connection Source="this.RetainData" Destination="_base.RetainData" Vertices="(2236,450),(2064,450),"/>
			<Connection Source="this.QoS" Destination="_base.QoS" Vertices="(2236,510),(2064,510),"/>
			<Connection Source="this.GrantedQoS" Destination="_base.GrantedQoS" Vertices="(2236,570),(2064,570),"/>
			<Connection Source="this.DataString" Destination="_base.DataString" Vertices="(2236,630),(2064,630),"/>
			<Connection Source="_base.ocMQTTClient_Interface" Destination="this.ocMQTTClient_Interface" Vertices="(218,210),(38,210),"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
#pragma using MQTTTopicString

MqttTopicText : CLASS
: MQTTTopicString
  //Servers:
	DataReceived 	: SvrCh_DINT;
	EnableMessage 	: SvrCh_DINT;
  //Clients:
	objRiwoEventLogger 	: CltChCmd_RiwoEventLogger;
  //Variables:
  //Functions:
				//! <Function Comment="Will be called if data from the subscribed topic was received.&#13;&#10;&#13;&#10;Note: the pointer to the data is only valid in the actual call of this method." Name="User_SubscribeData"/>
	FUNCTION VIRTUAL User_SubscribeData
		VAR_INPUT
			pData 	: ^void;			//! <Variable Comment="Pointer to the payload of the MQTT message, if data is available. Otherwise the pointer is NIL." Name="User_SubscribeData.pData"/>
			udLen 	: UDINT;			//! <Variable Comment="Size of the data in byte." Name="User_SubscribeData.udLen"/>
		END_VAR;
	
	FUNCTION GLOBAL SetText
		VAR_INPUT
			pText 	: ^CHAR;
		END_VAR;
	
	FUNCTION GLOBAL GetPublishedFlag
		VAR_OUTPUT
			returnValue 	: BOOL;
		END_VAR;
	
	FUNCTION GLOBAL GetTopicState
		VAR_OUTPUT
			returnValue 	: t_e_MQTT_TopicState;
		END_VAR;
	
	FUNCTION GLOBAL Reconnect
		VAR_INPUT
			ConnectRequest 	: DINT;
		END_VAR;
	
	FUNCTION GLOBAL SetTopicName
		VAR_INPUT
			input 	: ^CHAR;
		END_VAR;
	
	FUNCTION GLOBAL GetDataString
		VAR_INPUT
			pData 	: ^CHAR;
			dataLength 	: UDINT;
		END_VAR
		VAR_OUTPUT
			returnValue 	: UDINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma usingLtd RiwoEventLogger


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB MqttTopicText::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_MQTTTOPICTEXT
0$UINT, 0$UINT, (SIZEOF(::MqttTopicText))$UINT, 
2$UINT, 1$UINT, 0$UINT, 
TO_UDINT(3441159294), "MqttTopicText", //Class
TO_UDINT(3831352762), "MQTTTopicString", 1$UINT, 1$UINT, //Baseclass
//Servers:
(::MqttTopicText.DataReceived.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1277019995), "DataReceived", 
(::MqttTopicText.EnableMessage.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(3057794279), "EnableMessage", 
//Clients:
(::MqttTopicText.objRiwoEventLogger.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000000$UINT, TO_UDINT(846826333), "objRiwoEventLogger", TO_UDINT(2650024474), "RiwoEventLogger", 2$UINT, 3$UINT, 
END_FUNCTION


#define USER_CNT_MqttTopicText 8

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_MqttTopicText] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION MqttTopicText::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
		nCmdSize	: UINT;
	END_VAR

	ret_code	:= MQTTTopicString::@STD();
	IF ret_code <> C_OK THEN
		RETURN;
	END_IF;
	nCmdSize		:= MQTTTopic::TopicState.pMeth^.nCmds$UINT*SIZEOF(pVoid) + CMDMETH.Init;

	_memcpy((#vmt.CmdTable)$^USINT, MQTTTopic::TopicState.pMeth, nCmdSize);
	vmt.CmdTable.nCmds		:= nSTDCMD + USER_CNT_MqttTopicText;
#pragma warning (disable : 74)
	vmt.UserFcts[7]		:= #User_SubscribeData();

#pragma warning (default : 74)
	MQTTTopic::TopicState.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF MQTTTopic::TopicState.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	EnableMessage.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF EnableMessage.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION


FUNCTION GLOBAL MqttTopicText::SetText
	VAR_INPUT
		pText 	: ^CHAR;
	END_VAR
  
  if pText <> nil then
    PubSubDataString.WriteDataOff(udLen :=  _strlen(src:=pText), 
                                  udOff :=  0, 
                                  pData :=  pText);
  else
    _RIWO_ERROR_MSG("Received nil pointer in function MqttTopicText");
  end_if;
  
END_FUNCTION


FUNCTION GLOBAL MqttTopicText::GetPublishedFlag
	VAR_OUTPUT
		returnValue 	: BOOL;
	END_VAR
  
  returnValue := FlagList.PublishDone;

END_FUNCTION


FUNCTION GLOBAL MqttTopicText::GetTopicState
	VAR_OUTPUT
		returnValue 	: t_e_MQTT_TopicState;
	END_VAR
  
  returnValue := TopicState;

END_FUNCTION



FUNCTION GLOBAL MqttTopicText::Reconnect
	VAR_INPUT
		ConnectRequest 	: DINT;
	END_VAR

    if ocMQTTClient_Interface.InterfaceState <> MQTTClient_Interface::MCIS_Connected then  
      if ocMQTTClient_Interface.ClientActive = 1 then
        ocMQTTClient_Interface.ClientActive.Write(input:=0); //Reset Client connection
      else
        ocMQTTClient_Interface.ClientActive.Write(input:=1); //Set Client connection
      end_if;
    end_if;
      
END_FUNCTION


FUNCTION GLOBAL MqttTopicText::SetTopicName
	VAR_INPUT
		input 	: ^CHAR;
	END_VAR
  
  if input <> nil then
    objTopicName.WriteDataOff(udLen :=  _strlen(src:=input), 
                                  udOff :=  0, 
                                  pData :=  input);
  else
    _RIWO_ERROR_MSG("Received nil pointer in function MqttTopicText");
  end_if;
  
END_FUNCTION




FUNCTION GLOBAL MqttTopicText::GetDataString
	VAR_INPUT
		pData 	: ^CHAR;
		dataLength 	: UDINT;
	END_VAR
	VAR_OUTPUT
		returnValue 	: UDINT;
	END_VAR
  
  if pData <> nil then
    returnValue := PubSubDataString.ReadDataOff(udOff:=0, pData:=pData, udMax:=dataLength);
    DataReceived := false;
  else
    _RIWO_ERROR_MSG("Received nil pointer in function MqttTopicText");
  end_if;

END_FUNCTION


FUNCTION VIRTUAL MqttTopicText::User_SubscribeData
	VAR_INPUT
		pData 	: ^void;
		udLen 	: UDINT;
	END_VAR
  
  MQTTTopicString::User_SubscribeData(pData,udLen);
  
  if pData <> nil then
    DataReceived := true;
  else
    _RIWO_ERROR_MSG("Received nil pointer in function MqttTopicText");
  end_if;

END_FUNCTION
